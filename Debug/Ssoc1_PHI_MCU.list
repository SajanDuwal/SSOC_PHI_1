
Ssoc1_PHI_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ecc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  0800800c  0800800c  0001800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008490  08008490  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08008490  08008490  00018490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008498  08008498  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008498  08008498  00018498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800849c  0800849c  0001849c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080084a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  20000068  08008508  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  08008508  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c72c  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ac9  00000000  00000000  0003c801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c08  00000000  00000000  000402d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015a6  00000000  00000000  00041ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020cae  00000000  00000000  0004347e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d57e  00000000  00000000  0006412c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdf2a  00000000  00000000  000816aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007c94  00000000  00000000  0014f5d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00157268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	08007ff4 	.word	0x08007ff4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	08007ff4 	.word	0x08007ff4

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811b 	bcs.w	80004de <__udivmoddi4+0x28e>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8118 	bls.w	80004de <__udivmoddi4+0x28e>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8106 	bcs.w	80004e2 <__udivmoddi4+0x292>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8103 	bls.w	80004e2 <__udivmoddi4+0x292>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ec 	beq.w	80004d8 <__udivmoddi4+0x288>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f7 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 808f 	bne.w	800045e <__udivmoddi4+0x20e>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80ba 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f901 	lsl.w	r9, r0, r1
 80003c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fbb5 f8f0 	udiv	r8, r5, r0
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb00 5518 	mls	r5, r0, r8, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f0 	udiv	r3, r4, r0
 8000408:	fb00 4413 	mls	r4, r0, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042e:	fba0 8302 	umull	r8, r3, r0, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	429c      	cmp	r4, r3
 8000438:	46c6      	mov	lr, r8
 800043a:	461d      	mov	r5, r3
 800043c:	d355      	bcc.n	80004ea <__udivmoddi4+0x29a>
 800043e:	d052      	beq.n	80004e6 <__udivmoddi4+0x296>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb9 030e 	subs.w	r3, r9, lr
 8000446:	eb64 0405 	sbc.w	r4, r4, r5
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40cb      	lsrs	r3, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	431f      	orrs	r7, r3
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	2100      	movs	r1, #0
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c3 0120 	rsb	r1, r3, #32
 8000462:	fa02 fc03 	lsl.w	ip, r2, r3
 8000466:	fa20 f201 	lsr.w	r2, r0, r1
 800046a:	fa25 f101 	lsr.w	r1, r5, r1
 800046e:	409d      	lsls	r5, r3
 8000470:	432a      	orrs	r2, r5
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1510 	mls	r5, r7, r0, r1
 8000482:	0c11      	lsrs	r1, r2, #16
 8000484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000488:	fb00 f50e 	mul.w	r5, r0, lr
 800048c:	428d      	cmp	r5, r1
 800048e:	fa04 f403 	lsl.w	r4, r4, r3
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428d      	cmp	r5, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	b292      	uxth	r2, r2
 80004aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ae:	fb07 1115 	mls	r1, r7, r5, r1
 80004b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b6:	fb05 f10e 	mul.w	r1, r5, lr
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x280>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c6:	d216      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d914      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	1a52      	subs	r2, r2, r1
 80004d2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d6:	e739      	b.n	800034c <__udivmoddi4+0xfc>
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004de:	4639      	mov	r1, r7
 80004e0:	e6e7      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6fc      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e6:	45c1      	cmp	r9, r8
 80004e8:	d2aa      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 050c 	sbc.w	r5, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4645      	mov	r5, r8
 80004f8:	e7ea      	b.n	80004d0 <__udivmoddi4+0x280>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	46d0      	mov	r8, sl
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x124>
 800050c:	4608      	mov	r0, r1
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xd8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e743      	b.n	800039e <__udivmoddi4+0x14e>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	68db      	ldr	r3, [r3, #12]
 800052a:	f023 0203 	bic.w	r2, r3, #3
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	431a      	orrs	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	60da      	str	r2, [r3, #12]
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	f003 0303 	and.w	r3, r3, #3
}
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800056a:	f023 0317 	bic.w	r3, r3, #23
 800056e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000590:	f023 0317 	bic.w	r3, r3, #23
 8000594:	f043 0201 	orr.w	r2, r3, #1
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr

080005a6 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80005a6:	b480      	push	{r7}
 80005a8:	b083      	sub	sp, #12
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d101      	bne.n	80005be <LL_ADC_IsEnabled+0x18>
 80005ba:	2301      	movs	r3, #1
 80005bc:	e000      	b.n	80005c0 <LL_ADC_IsEnabled+0x1a>
 80005be:	2300      	movs	r3, #0
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr

080005ca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d101      	bne.n	80005e2 <LL_ADC_IsDisableOngoing+0x18>
 80005de:	2301      	movs	r3, #1
 80005e0:	e000      	b.n	80005e4 <LL_ADC_IsDisableOngoing+0x1a>
 80005e2:	2300      	movs	r3, #0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr

080005ee <LL_ADC_StartCalibration>:
  * @rmtoll CR       ADCAL          LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80005fe:	f023 0317 	bic.w	r3, r3, #23
 8000602:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL);
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000628:	d101      	bne.n	800062e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800062a:	2301      	movs	r3, #1
 800062c:	e000      	b.n	8000630 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800062e:	2300      	movs	r3, #0
}
 8000630:	4618      	mov	r0, r3
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr

0800063a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800063a:	b480      	push	{r7}
 800063c:	b083      	sub	sp, #12
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800064a:	f023 0317 	bic.w	r3, r3, #23
 800064e:	f043 0204 	orr.w	r2, r3, #4
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	f003 0304 	and.w	r3, r3, #4
 8000670:	2b04      	cmp	r3, #4
 8000672:	d101      	bne.n	8000678 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000674:	2301      	movs	r3, #1
 8000676:	e000      	b.n	800067a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	b29b      	uxth	r3, r3
}
 8000692:	4618      	mov	r0, r3
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d101      	bne.n	80006b4 <LL_ADC_IsActiveFlag_ADRDY+0x18>
 80006b0:	2301      	movs	r3, #1
 80006b2:	e000      	b.n	80006b6 <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	2b04      	cmp	r3, #4
 80006d2:	d101      	bne.n	80006d8 <LL_ADC_IsActiveFlag_EOC+0x18>
 80006d4:	2301      	movs	r3, #1
 80006d6:	e000      	b.n	80006da <LL_ADC_IsActiveFlag_EOC+0x1a>
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2204      	movs	r2, #4
 80006f0:	601a      	str	r2, [r3, #0]
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <Activate_ADC>:
__IO uint16_t uhADCxConvertedData = VAR_CONVERTED_DATA_INIT_VALUE; /* ADC group regular conversion data */

/* Variables for ADC conversion data computation to physical values */
__IO int16_t hADCxConvertedData_Temperature_DegreeCelsius; /* Value of temperature calculated from ADC conversion data (unit: degree Celsius) */

void Activate_ADC(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
	__IO uint32_t wait_loop_index = 0U;
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
	__IO uint32_t backup_setting_adc_dma_transfer = 0U;
 8000706:	2300      	movs	r3, #0
 8000708:	603b      	str	r3, [r7, #0]
	/*       implemented anyway to show the best practice usages                */
	/*       corresponding to reference manual procedure.                       */
	/*       Software can be optimized by removing some of these checks, if     */
	/*       they are not relevant considering previous settings and actions    */
	/*       in user application.                                               */
	if (LL_ADC_IsEnabled(ADC) == 0) {
 800070a:	4828      	ldr	r0, [pc, #160]	; (80007ac <Activate_ADC+0xb0>)
 800070c:	f7ff ff4b 	bl	80005a6 <LL_ADC_IsEnabled>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d145      	bne.n	80007a2 <Activate_ADC+0xa6>
		/* Enable ADC internal voltage regulator */
		LL_ADC_EnableInternalRegulator(ADC);
 8000716:	4825      	ldr	r0, [pc, #148]	; (80007ac <Activate_ADC+0xb0>)
 8000718:	f7ff ff1f 	bl	800055a <LL_ADC_EnableInternalRegulator>
		/* Note: Variable divided by 2 to compensate partially                    */
		/*       CPU processing cycles (depends on compilation optimization).     */
		/* Note: If system core clock frequency is below 200kHz, wait time        */
		/*       is only a few CPU processing cycles.                             */
		wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US
				* (SystemCoreClock / (100000 * 2))) / 10);
 800071c:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <Activate_ADC+0xb4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	099b      	lsrs	r3, r3, #6
 8000722:	4a24      	ldr	r2, [pc, #144]	; (80007b4 <Activate_ADC+0xb8>)
 8000724:	fba2 2303 	umull	r2, r3, r2, r3
 8000728:	099a      	lsrs	r2, r3, #6
 800072a:	4613      	mov	r3, r2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	4413      	add	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	461a      	mov	r2, r3
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <Activate_ADC+0xbc>)
 8000736:	fba3 2302 	umull	r2, r3, r3, r2
 800073a:	08db      	lsrs	r3, r3, #3
		wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US
 800073c:	607b      	str	r3, [r7, #4]
		while (wait_loop_index != 0) {
 800073e:	e002      	b.n	8000746 <Activate_ADC+0x4a>
			wait_loop_index--;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3b01      	subs	r3, #1
 8000744:	607b      	str	r3, [r7, #4]
		while (wait_loop_index != 0) {
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1f9      	bne.n	8000740 <Activate_ADC+0x44>
		/* Note: Specificity of this STM32 series: Calibration factor is          */
		/*       available in data register and also transferred by DMA.          */
		/*       To not insert ADC calibration factor among ADC conversion data   */
		/*       in DMA destination address, DMA transfer must be disabled during */
		/*       calibration.                                                     */
		backup_setting_adc_dma_transfer = LL_ADC_REG_GetDMATransfer(ADC);
 800074c:	4817      	ldr	r0, [pc, #92]	; (80007ac <Activate_ADC+0xb0>)
 800074e:	f7ff fef7 	bl	8000540 <LL_ADC_REG_GetDMATransfer>
 8000752:	4603      	mov	r3, r0
 8000754:	603b      	str	r3, [r7, #0]
		LL_ADC_REG_SetDMATransfer(ADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 8000756:	2100      	movs	r1, #0
 8000758:	4814      	ldr	r0, [pc, #80]	; (80007ac <Activate_ADC+0xb0>)
 800075a:	f7ff fedf 	bl	800051c <LL_ADC_REG_SetDMATransfer>

		/* Run ADC self calibration */
		LL_ADC_StartCalibration(ADC);
 800075e:	4813      	ldr	r0, [pc, #76]	; (80007ac <Activate_ADC+0xb0>)
 8000760:	f7ff ff45 	bl	80005ee <LL_ADC_StartCalibration>
		/* Poll for ADC effectively calibrated */
#if (USE_TIMEOUT == 1)
	    Timeout = ADC_CALIBRATION_TIMEOUT_MS;
	    #endif /* USE_TIMEOUT */

		while (LL_ADC_IsCalibrationOnGoing(ADC) != 0) {
 8000764:	bf00      	nop
 8000766:	4811      	ldr	r0, [pc, #68]	; (80007ac <Activate_ADC+0xb0>)
 8000768:	f7ff ff54 	bl	8000614 <LL_ADC_IsCalibrationOnGoing>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1f9      	bne.n	8000766 <Activate_ADC+0x6a>
	      }
	    #endif /* USE_TIMEOUT */
		}

		/* Restore ADC DMA transfer request after calibration */
		LL_ADC_REG_SetDMATransfer(ADC, backup_setting_adc_dma_transfer);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	480d      	ldr	r0, [pc, #52]	; (80007ac <Activate_ADC+0xb0>)
 8000778:	f7ff fed0 	bl	800051c <LL_ADC_REG_SetDMATransfer>

		/* Delay between ADC end of calibration and ADC enable.                   */
		/* Note: Variable divided by 2 to compensate partially                    */
		/*       CPU processing cycles (depends on compilation optimization).     */
		wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1);
 800077c:	2320      	movs	r3, #32
 800077e:	607b      	str	r3, [r7, #4]
		while (wait_loop_index != 0) {
 8000780:	e002      	b.n	8000788 <Activate_ADC+0x8c>
			wait_loop_index--;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	3b01      	subs	r3, #1
 8000786:	607b      	str	r3, [r7, #4]
		while (wait_loop_index != 0) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d1f9      	bne.n	8000782 <Activate_ADC+0x86>
		}

		/* Enable ADC */
		LL_ADC_Enable(ADC);
 800078e:	4807      	ldr	r0, [pc, #28]	; (80007ac <Activate_ADC+0xb0>)
 8000790:	f7ff fef6 	bl	8000580 <LL_ADC_Enable>
		/* Poll for ADC ready to convert */
#if (USE_TIMEOUT == 1)
	    Timeout = ADC_ENABLE_TIMEOUT_MS;
	    #endif /* USE_TIMEOUT */

		while (LL_ADC_IsActiveFlag_ADRDY(ADC) == 0) {
 8000794:	bf00      	nop
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <Activate_ADC+0xb0>)
 8000798:	f7ff ff80 	bl	800069c <LL_ADC_IsActiveFlag_ADRDY>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0f9      	beq.n	8000796 <Activate_ADC+0x9a>
		/*       status afterwards.                                               */
		/*       This flag should be cleared at ADC Deactivation, before a new    */
		/*       ADC activation, using function "LL_ADC_ClearFlag_ADRDY()".       */
	}

}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40012400 	.word	0x40012400
 80007b0:	2000000c 	.word	0x2000000c
 80007b4:	053e2d63 	.word	0x053e2d63
 80007b8:	cccccccd 	.word	0xcccccccd

080007bc <ConversionStartPoll_ADC_GrpRegular>:

/**
 * @brief  Perform ADC group regular conversion start, poll for conversion
 *         completion.*/

void ConversionStartPoll_ADC_GrpRegular(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	  uint32_t Timeout = 0U; /* Variable used for timeout management */
	  #endif /* USE_TIMEOUT */

	/* Start ADC group regular conversion */

	if ((LL_ADC_IsEnabled(ADC) == 1) && (LL_ADC_IsDisableOngoing(ADC) == 0)
 80007c0:	4811      	ldr	r0, [pc, #68]	; (8000808 <ConversionStartPoll_ADC_GrpRegular+0x4c>)
 80007c2:	f7ff fef0 	bl	80005a6 <LL_ADC_IsEnabled>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d10f      	bne.n	80007ec <ConversionStartPoll_ADC_GrpRegular+0x30>
 80007cc:	480e      	ldr	r0, [pc, #56]	; (8000808 <ConversionStartPoll_ADC_GrpRegular+0x4c>)
 80007ce:	f7ff fefc 	bl	80005ca <LL_ADC_IsDisableOngoing>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d109      	bne.n	80007ec <ConversionStartPoll_ADC_GrpRegular+0x30>
			&& (LL_ADC_REG_IsConversionOngoing(ADC) == 0)) {
 80007d8:	480b      	ldr	r0, [pc, #44]	; (8000808 <ConversionStartPoll_ADC_GrpRegular+0x4c>)
 80007da:	f7ff ff41 	bl	8000660 <LL_ADC_REG_IsConversionOngoing>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d103      	bne.n	80007ec <ConversionStartPoll_ADC_GrpRegular+0x30>
		LL_ADC_REG_StartConversion(ADC);
 80007e4:	4808      	ldr	r0, [pc, #32]	; (8000808 <ConversionStartPoll_ADC_GrpRegular+0x4c>)
 80007e6:	f7ff ff28 	bl	800063a <LL_ADC_REG_StartConversion>
 80007ea:	e001      	b.n	80007f0 <ConversionStartPoll_ADC_GrpRegular+0x34>
	} else {
		/* Error: ADC conversion start could not be performed */
		Error_Handler();
 80007ec:	f000 fe32 	bl	8001454 <Error_Handler>

#if (USE_TIMEOUT == 1)
	  Timeout = ADC_UNITARY_CONVERSION_TIMEOUT_MS;
	  #endif /* USE_TIMEOUT */

	while (LL_ADC_IsActiveFlag_EOC(ADC) == 0) {
 80007f0:	bf00      	nop
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <ConversionStartPoll_ADC_GrpRegular+0x4c>)
 80007f4:	f7ff ff64 	bl	80006c0 <LL_ADC_IsActiveFlag_EOC>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f9      	beq.n	80007f2 <ConversionStartPoll_ADC_GrpRegular+0x36>
	    }
	  #endif /* USE_TIMEOUT */
	}

	/* Clear flag ADC group regular end of unitary conversion */
	LL_ADC_ClearFlag_EOC(ADC);
 80007fe:	4802      	ldr	r0, [pc, #8]	; (8000808 <ConversionStartPoll_ADC_GrpRegular+0x4c>)
 8000800:	f7ff ff70 	bl	80006e4 <LL_ADC_ClearFlag_EOC>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40012400 	.word	0x40012400

0800080c <ReadTemperature>:

uint16_t ReadTemperature() {
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	Activate_ADC();
 8000810:	f7ff ff74 	bl	80006fc <Activate_ADC>
	/* Init variable containing ADC conversion data */
	uhADCxConvertedData = VAR_CONVERTED_DATA_INIT_VALUE;
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <ReadTemperature+0x84>)
 8000816:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800081a:	801a      	strh	r2, [r3, #0]

	/* Perform ADC group regular conversion start, poll for conversion        */
	/* completion.                                                            */
	ConversionStartPoll_ADC_GrpRegular();
 800081c:	f7ff ffce 	bl	80007bc <ConversionStartPoll_ADC_GrpRegular>

	/* Retrieve ADC conversion data */
	/* (data scale corresponds to ADC resolution: 12 bits) */
	uhADCxConvertedData = LL_ADC_REG_ReadConversionData12(ADC);
 8000820:	481c      	ldr	r0, [pc, #112]	; (8000894 <ReadTemperature+0x88>)
 8000822:	f7ff ff2f 	bl	8000684 <LL_ADC_REG_ReadConversionData12>
 8000826:	4603      	mov	r3, r0
 8000828:	461a      	mov	r2, r3
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <ReadTemperature+0x84>)
 800082c:	801a      	strh	r2, [r3, #0]

	/* Turn LED on after ADC conversion completion */

	/* Computation of ADC conversions raw data to physical values             */
	/* using LL ADC driver helper macro.                                      */
	hADCxConvertedData_Temperature_DegreeCelsius = __LL_ADC_CALC_TEMPERATURE(
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <ReadTemperature+0x8c>)
 8000830:	881a      	ldrh	r2, [r3, #0]
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <ReadTemperature+0x90>)
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	429a      	cmp	r2, r3
 8000838:	d020      	beq.n	800087c <ReadTemperature+0x70>
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <ReadTemperature+0x84>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	b29b      	uxth	r3, r3
 8000840:	461a      	mov	r2, r3
 8000842:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000846:	fb02 f303 	mul.w	r3, r2, r3
 800084a:	089b      	lsrs	r3, r3, #2
 800084c:	4a14      	ldr	r2, [pc, #80]	; (80008a0 <ReadTemperature+0x94>)
 800084e:	fba2 2303 	umull	r2, r3, r2, r3
 8000852:	095b      	lsrs	r3, r3, #5
 8000854:	461a      	mov	r2, r3
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <ReadTemperature+0x90>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	2264      	movs	r2, #100	; 0x64
 800085e:	fb03 f202 	mul.w	r2, r3, r2
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <ReadTemperature+0x8c>)
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	4619      	mov	r1, r3
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <ReadTemperature+0x90>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	1acb      	subs	r3, r1, r3
 800086e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000872:	b29b      	uxth	r3, r3
 8000874:	331e      	adds	r3, #30
 8000876:	b29b      	uxth	r3, r3
 8000878:	b21b      	sxth	r3, r3
 800087a:	e001      	b.n	8000880 <ReadTemperature+0x74>
 800087c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000880:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <ReadTemperature+0x98>)
 8000882:	8013      	strh	r3, [r2, #0]
			VDDA_APPLI, uhADCxConvertedData, LL_ADC_RESOLUTION_12B);

	return hADCxConvertedData_Temperature_DegreeCelsius;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <ReadTemperature+0x98>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	b21b      	sxth	r3, r3
 800088a:	b29b      	uxth	r3, r3
}
 800088c:	4618      	mov	r0, r3
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000000 	.word	0x20000000
 8000894:	40012400 	.word	0x40012400
 8000898:	1fff75c8 	.word	0x1fff75c8
 800089c:	1fff75a8 	.word	0x1fff75a8
 80008a0:	09ee009f 	.word	0x09ee009f
 80008a4:	20000084 	.word	0x20000084

080008a8 <myPrintf>:
#include "com_debug.h"
#include "stdio.h"
#include "stdarg.h"
#include "stdint.h"

void myPrintf(const char *fmt, ...) {
 80008a8:	b40f      	push	{r0, r1, r2, r3}
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	2164      	movs	r1, #100	; 0x64
 80008bc:	480a      	ldr	r0, [pc, #40]	; (80008e8 <myPrintf+0x40>)
 80008be:	f006 ff09 	bl	80076d4 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 80008c2:	4809      	ldr	r0, [pc, #36]	; (80008e8 <myPrintf+0x40>)
 80008c4:	f000 f814 	bl	80008f0 <bufferSize>
 80008c8:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) temp, len, 1000);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d2:	4905      	ldr	r1, [pc, #20]	; (80008e8 <myPrintf+0x40>)
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <myPrintf+0x44>)
 80008d6:	f005 fc58 	bl	800618a <HAL_UART_Transmit>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008e4:	b004      	add	sp, #16
 80008e6:	4770      	bx	lr
 80008e8:	20000088 	.word	0x20000088
 80008ec:	200002cc 	.word	0x200002cc

080008f0 <bufferSize>:

int bufferSize(char *buffer) {
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	int i = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80008fc:	e002      	b.n	8000904 <bufferSize+0x14>
		i++;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	3301      	adds	r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	1c5a      	adds	r2, r3, #1
 8000908:	607a      	str	r2, [r7, #4]
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d1f6      	bne.n	80008fe <bufferSize+0xe>
	return i;
 8000910:	68fb      	ldr	r3, [r7, #12]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <delay_us>:

void delay_us(uint16_t ms) {
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
	uint8_t delay_counter_disp = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	73fb      	strb	r3, [r7, #15]
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // set the counter value a 0
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <delay_us+0x38>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < ms) {
 8000932:	e002      	b.n	800093a <delay_us+0x1e>
		delay_counter_disp++;
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	3301      	adds	r3, #1
 8000938:	73fb      	strb	r3, [r7, #15]
	while (__HAL_TIM_GET_COUNTER(&htim1) < ms) {
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <delay_us+0x38>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000940:	88fb      	ldrh	r3, [r7, #6]
 8000942:	429a      	cmp	r2, r3
 8000944:	d3f6      	bcc.n	8000934 <delay_us+0x18>
		// wait for the counter to reach the us input in the parameter
	}
}
 8000946:	bf00      	nop
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	200001ec 	.word	0x200001ec

08000958 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000964:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000966:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4313      	orrs	r3, r2
 800096e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000974:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4013      	ands	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800097c:	68fb      	ldr	r3, [r7, #12]
}
 800097e:	bf00      	nop
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr

08000988 <setDataToBeTransmitted>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void setDataToBeTransmitted() {
 8000988:	b5b0      	push	{r4, r5, r7, lr}
 800098a:	b090      	sub	sp, #64	; 0x40
 800098c:	af02      	add	r7, sp, #8
	uint8_t temp_count = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t temp_sensor[30];

	setTime(MAIN_CMD[8], MAIN_CMD[9], MAIN_CMD[10], MAIN_CMD[11], MAIN_CMD[12],
 8000994:	4b54      	ldr	r3, [pc, #336]	; (8000ae8 <setDataToBeTransmitted+0x160>)
 8000996:	7a18      	ldrb	r0, [r3, #8]
 8000998:	4b53      	ldr	r3, [pc, #332]	; (8000ae8 <setDataToBeTransmitted+0x160>)
 800099a:	7a59      	ldrb	r1, [r3, #9]
 800099c:	4b52      	ldr	r3, [pc, #328]	; (8000ae8 <setDataToBeTransmitted+0x160>)
 800099e:	7a9c      	ldrb	r4, [r3, #10]
 80009a0:	4b51      	ldr	r3, [pc, #324]	; (8000ae8 <setDataToBeTransmitted+0x160>)
 80009a2:	7add      	ldrb	r5, [r3, #11]
 80009a4:	4b50      	ldr	r3, [pc, #320]	; (8000ae8 <setDataToBeTransmitted+0x160>)
 80009a6:	7b1b      	ldrb	r3, [r3, #12]
 80009a8:	4a4f      	ldr	r2, [pc, #316]	; (8000ae8 <setDataToBeTransmitted+0x160>)
 80009aa:	7b52      	ldrb	r2, [r2, #13]
 80009ac:	9201      	str	r2, [sp, #4]
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	462b      	mov	r3, r5
 80009b2:	4622      	mov	r2, r4
 80009b4:	f000 fe48 	bl	8001648 <setTime>
			MAIN_CMD[13]);

	while (temp_count < 30) {
 80009b8:	e017      	b.n	80009ea <setDataToBeTransmitted+0x62>
		if (ReadTemperature() > 0)
 80009ba:	f7ff ff27 	bl	800080c <ReadTemperature>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d00a      	beq.n	80009da <setDataToBeTransmitted+0x52>
			temp_sensor[temp_count] = ReadTemperature();
 80009c4:	f7ff ff22 	bl	800080c <ReadTemperature>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009d0:	b2d2      	uxtb	r2, r2
 80009d2:	3338      	adds	r3, #56	; 0x38
 80009d4:	443b      	add	r3, r7
 80009d6:	f803 2c38 	strb.w	r2, [r3, #-56]
		delay_us(10);
 80009da:	200a      	movs	r0, #10
 80009dc:	f7ff ff9e 	bl	800091c <delay_us>
		temp_count++;
 80009e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009e4:	3301      	adds	r3, #1
 80009e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while (temp_count < 30) {
 80009ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009ee:	2b1d      	cmp	r3, #29
 80009f0:	d9e3      	bls.n	80009ba <setDataToBeTransmitted+0x32>
	}

	getTime();
 80009f2:	f000 fe6f 	bl	80016d4 <getTime>

	txBuffer[0] = 0xBA;
 80009f6:	4b3d      	ldr	r3, [pc, #244]	; (8000aec <setDataToBeTransmitted+0x164>)
 80009f8:	22ba      	movs	r2, #186	; 0xba
 80009fa:	701a      	strb	r2, [r3, #0]
	txBuffer[1] = 0x01;
 80009fc:	4b3b      	ldr	r3, [pc, #236]	; (8000aec <setDataToBeTransmitted+0x164>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	705a      	strb	r2, [r3, #1]
	txBuffer[2] = pkt_id;
 8000a02:	4b3b      	ldr	r3, [pc, #236]	; (8000af0 <setDataToBeTransmitted+0x168>)
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	4b39      	ldr	r3, [pc, #228]	; (8000aec <setDataToBeTransmitted+0x164>)
 8000a08:	709a      	strb	r2, [r3, #2]
	txBuffer[3] = gDate.Year;
 8000a0a:	4b3a      	ldr	r3, [pc, #232]	; (8000af4 <setDataToBeTransmitted+0x16c>)
 8000a0c:	78da      	ldrb	r2, [r3, #3]
 8000a0e:	4b37      	ldr	r3, [pc, #220]	; (8000aec <setDataToBeTransmitted+0x164>)
 8000a10:	70da      	strb	r2, [r3, #3]
	txBuffer[4] = gDate.Month;
 8000a12:	4b38      	ldr	r3, [pc, #224]	; (8000af4 <setDataToBeTransmitted+0x16c>)
 8000a14:	785a      	ldrb	r2, [r3, #1]
 8000a16:	4b35      	ldr	r3, [pc, #212]	; (8000aec <setDataToBeTransmitted+0x164>)
 8000a18:	711a      	strb	r2, [r3, #4]
	txBuffer[5] = gDate.WeekDay;
 8000a1a:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <setDataToBeTransmitted+0x16c>)
 8000a1c:	781a      	ldrb	r2, [r3, #0]
 8000a1e:	4b33      	ldr	r3, [pc, #204]	; (8000aec <setDataToBeTransmitted+0x164>)
 8000a20:	715a      	strb	r2, [r3, #5]
	txBuffer[6] = gTime.Hours;
 8000a22:	4b35      	ldr	r3, [pc, #212]	; (8000af8 <setDataToBeTransmitted+0x170>)
 8000a24:	781a      	ldrb	r2, [r3, #0]
 8000a26:	4b31      	ldr	r3, [pc, #196]	; (8000aec <setDataToBeTransmitted+0x164>)
 8000a28:	719a      	strb	r2, [r3, #6]
	txBuffer[7] = gTime.Minutes;
 8000a2a:	4b33      	ldr	r3, [pc, #204]	; (8000af8 <setDataToBeTransmitted+0x170>)
 8000a2c:	785a      	ldrb	r2, [r3, #1]
 8000a2e:	4b2f      	ldr	r3, [pc, #188]	; (8000aec <setDataToBeTransmitted+0x164>)
 8000a30:	71da      	strb	r2, [r3, #7]
	txBuffer[8] = gTime.Seconds;
 8000a32:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <setDataToBeTransmitted+0x170>)
 8000a34:	789a      	ldrb	r2, [r3, #2]
 8000a36:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <setDataToBeTransmitted+0x164>)
 8000a38:	721a      	strb	r2, [r3, #8]
	int j = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i = 9; i <= 28; i += 2) {
 8000a3e:	2309      	movs	r3, #9
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a42:	e012      	b.n	8000a6a <setDataToBeTransmitted+0xe2>
		txBuffer[i] = 0xDA;
 8000a44:	4a29      	ldr	r2, [pc, #164]	; (8000aec <setDataToBeTransmitted+0x164>)
 8000a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a48:	4413      	add	r3, r2
 8000a4a:	22da      	movs	r2, #218	; 0xda
 8000a4c:	701a      	strb	r2, [r3, #0]
		txBuffer[i + 1] = temp_sensor[j];
 8000a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a50:	3301      	adds	r3, #1
 8000a52:	4639      	mov	r1, r7
 8000a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a56:	440a      	add	r2, r1
 8000a58:	7811      	ldrb	r1, [r2, #0]
 8000a5a:	4a24      	ldr	r2, [pc, #144]	; (8000aec <setDataToBeTransmitted+0x164>)
 8000a5c:	54d1      	strb	r1, [r2, r3]
		j++;
 8000a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a60:	3301      	adds	r3, #1
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i = 9; i <= 28; i += 2) {
 8000a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a66:	3302      	adds	r3, #2
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a6c:	2b1c      	cmp	r3, #28
 8000a6e:	dde9      	ble.n	8000a44 <setDataToBeTransmitted+0xbc>
	}
	uint16_t _HK_SUM = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	857b      	strh	r3, [r7, #42]	; 0x2a
	for (int i = 0; i <= 28; i++) {
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
 8000a78:	e00a      	b.n	8000a90 <setDataToBeTransmitted+0x108>
		_HK_SUM += txBuffer[i];
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <setDataToBeTransmitted+0x164>)
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7e:	4413      	add	r3, r2
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000a86:	4413      	add	r3, r2
 8000a88:	857b      	strh	r3, [r7, #42]	; 0x2a
	for (int i = 0; i <= 28; i++) {
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a92:	2b1c      	cmp	r3, #28
 8000a94:	ddf1      	ble.n	8000a7a <setDataToBeTransmitted+0xf2>
	}
	txBuffer[29] = _HK_SUM >> 8;
 8000a96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <setDataToBeTransmitted+0x164>)
 8000aa0:	775a      	strb	r2, [r3, #29]
	txBuffer[30] = _HK_SUM;
 8000aa2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <setDataToBeTransmitted+0x164>)
 8000aa8:	779a      	strb	r2, [r3, #30]
	txBuffer[31] = 0xFE;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <setDataToBeTransmitted+0x164>)
 8000aac:	22fe      	movs	r2, #254	; 0xfe
 8000aae:	77da      	strb	r2, [r3, #31]
	myPrintf("### Data to be stored:\n");
 8000ab0:	4812      	ldr	r0, [pc, #72]	; (8000afc <setDataToBeTransmitted+0x174>)
 8000ab2:	f7ff fef9 	bl	80008a8 <myPrintf>
	for (int i = 0; i < PayLoadLength; i++) {
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
 8000aba:	e00a      	b.n	8000ad2 <setDataToBeTransmitted+0x14a>
		myPrintf("%x ", txBuffer[i]);
 8000abc:	4a0b      	ldr	r2, [pc, #44]	; (8000aec <setDataToBeTransmitted+0x164>)
 8000abe:	6a3b      	ldr	r3, [r7, #32]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480e      	ldr	r0, [pc, #56]	; (8000b00 <setDataToBeTransmitted+0x178>)
 8000ac8:	f7ff feee 	bl	80008a8 <myPrintf>
	for (int i = 0; i < PayLoadLength; i++) {
 8000acc:	6a3b      	ldr	r3, [r7, #32]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	623b      	str	r3, [r7, #32]
 8000ad2:	6a3b      	ldr	r3, [r7, #32]
 8000ad4:	2b1f      	cmp	r3, #31
 8000ad6:	ddf1      	ble.n	8000abc <setDataToBeTransmitted+0x134>
	}
	myPrintf("\n");
 8000ad8:	480a      	ldr	r0, [pc, #40]	; (8000b04 <setDataToBeTransmitted+0x17c>)
 8000ada:	f7ff fee5 	bl	80008a8 <myPrintf>
}
 8000ade:	bf00      	nop
 8000ae0:	3738      	adds	r7, #56	; 0x38
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200003d4 	.word	0x200003d4
 8000aec:	20000360 	.word	0x20000360
 8000af0:	200003a0 	.word	0x200003a0
 8000af4:	20000418 	.word	0x20000418
 8000af8:	20000404 	.word	0x20000404
 8000afc:	0800800c 	.word	0x0800800c
 8000b00:	08008024 	.word	0x08008024
 8000b04:	08008028 	.word	0x08008028

08000b08 <EOM>:

void EOM() {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
	//add ACK and Latest mission FM address
	END_MSN[0] = 0xBA;
 8000b0e:	4b30      	ldr	r3, [pc, #192]	; (8000bd0 <EOM+0xc8>)
 8000b10:	22ba      	movs	r2, #186	; 0xba
 8000b12:	701a      	strb	r2, [r3, #0]
	END_MSN[1] = MSN_CMP >> 24;
 8000b14:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <EOM+0xcc>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	0e1b      	lsrs	r3, r3, #24
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	4b2c      	ldr	r3, [pc, #176]	; (8000bd0 <EOM+0xc8>)
 8000b1e:	705a      	strb	r2, [r3, #1]
	END_MSN[2] = MSN_CMP >> 16;
 8000b20:	4b2c      	ldr	r3, [pc, #176]	; (8000bd4 <EOM+0xcc>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	0c1b      	lsrs	r3, r3, #16
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <EOM+0xc8>)
 8000b2a:	709a      	strb	r2, [r3, #2]
	;
	END_MSN[3] = MSN_CMP >> 8;
 8000b2c:	4b29      	ldr	r3, [pc, #164]	; (8000bd4 <EOM+0xcc>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <EOM+0xc8>)
 8000b36:	70da      	strb	r2, [r3, #3]
	;
	END_MSN[4] = MSN_CMP;
 8000b38:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <EOM+0xcc>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <EOM+0xc8>)
 8000b40:	711a      	strb	r2, [r3, #4]

	//SEND NEW FM ADDRESS;
	END_MSN[5] = MAIN_ADDR >> 24;
 8000b42:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <EOM+0xd0>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	0e1b      	lsrs	r3, r3, #24
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <EOM+0xc8>)
 8000b4c:	715a      	strb	r2, [r3, #5]
	END_MSN[6] = MAIN_ADDR >> 16;
 8000b4e:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <EOM+0xd0>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	0c1b      	lsrs	r3, r3, #16
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <EOM+0xc8>)
 8000b58:	719a      	strb	r2, [r3, #6]
	END_MSN[7] = MAIN_ADDR >> 8;
 8000b5a:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <EOM+0xd0>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	0a1b      	lsrs	r3, r3, #8
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <EOM+0xc8>)
 8000b64:	71da      	strb	r2, [r3, #7]
	END_MSN[8] = MAIN_ADDR;
 8000b66:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <EOM+0xd0>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <EOM+0xc8>)
 8000b6e:	721a      	strb	r2, [r3, #8]
	END_MSN[9] = 0xFE;
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <EOM+0xc8>)
 8000b72:	22fe      	movs	r2, #254	; 0xfe
 8000b74:	725a      	strb	r2, [r3, #9]

	// END of Mission
	HAL_UART_Transmit(&huart1, END_MSN, 10, 1000);
 8000b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7a:	220a      	movs	r2, #10
 8000b7c:	4914      	ldr	r1, [pc, #80]	; (8000bd0 <EOM+0xc8>)
 8000b7e:	4817      	ldr	r0, [pc, #92]	; (8000bdc <EOM+0xd4>)
 8000b80:	f005 fb03 	bl	800618a <HAL_UART_Transmit>
	myPrintf("### Sent End of mission data: ");
 8000b84:	4816      	ldr	r0, [pc, #88]	; (8000be0 <EOM+0xd8>)
 8000b86:	f7ff fe8f 	bl	80008a8 <myPrintf>
	for (int i = 0; i < 10; i++) {
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	e00a      	b.n	8000ba6 <EOM+0x9e>
		myPrintf("%x", END_MSN[i]);
 8000b90:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <EOM+0xc8>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4812      	ldr	r0, [pc, #72]	; (8000be4 <EOM+0xdc>)
 8000b9c:	f7ff fe84 	bl	80008a8 <myPrintf>
	for (int i = 0; i < 10; i++) {
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b09      	cmp	r3, #9
 8000baa:	ddf1      	ble.n	8000b90 <EOM+0x88>
	}
	myPrintf("\n");
 8000bac:	480e      	ldr	r0, [pc, #56]	; (8000be8 <EOM+0xe0>)
 8000bae:	f7ff fe7b 	bl	80008a8 <myPrintf>
	myPrintf("--> LoRa_Mission_Execution Complete and Packet count is %x\r\n",
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <EOM+0xe4>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <EOM+0xe8>)
 8000bba:	f7ff fe75 	bl	80008a8 <myPrintf>
			pkt_id);
	memset(END_MSN, '\0', 10);
 8000bbe:	220a      	movs	r2, #10
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <EOM+0xc8>)
 8000bc4:	f006 fd94 	bl	80076f0 <memset>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200003bc 	.word	0x200003bc
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	200003e8 	.word	0x200003e8
 8000bdc:	20000238 	.word	0x20000238
 8000be0:	0800802c 	.word	0x0800802c
 8000be4:	0800804c 	.word	0x0800804c
 8000be8:	08008028 	.word	0x08008028
 8000bec:	200003a0 	.word	0x200003a0
 8000bf0:	08008050 	.word	0x08008050

08000bf4 <MSN_Error>:

void MSN_Error() {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
	MSN_ERR[0] = 0xBA;
 8000bfa:	4b2f      	ldr	r3, [pc, #188]	; (8000cb8 <MSN_Error+0xc4>)
 8000bfc:	22ba      	movs	r2, #186	; 0xba
 8000bfe:	701a      	strb	r2, [r3, #0]
	MSN_ERR[1] = NACK >> 24;
 8000c00:	4b2e      	ldr	r3, [pc, #184]	; (8000cbc <MSN_Error+0xc8>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	0e1b      	lsrs	r3, r3, #24
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	4b2b      	ldr	r3, [pc, #172]	; (8000cb8 <MSN_Error+0xc4>)
 8000c0a:	705a      	strb	r2, [r3, #1]
	MSN_ERR[2] = NACK >> 16;
 8000c0c:	4b2b      	ldr	r3, [pc, #172]	; (8000cbc <MSN_Error+0xc8>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	0c1b      	lsrs	r3, r3, #16
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <MSN_Error+0xc4>)
 8000c16:	709a      	strb	r2, [r3, #2]
	;
	MSN_ERR[3] = NACK >> 8;
 8000c18:	4b28      	ldr	r3, [pc, #160]	; (8000cbc <MSN_Error+0xc8>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	4b25      	ldr	r3, [pc, #148]	; (8000cb8 <MSN_Error+0xc4>)
 8000c22:	70da      	strb	r2, [r3, #3]
	;
	MSN_ERR[4] = NACK;
 8000c24:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <MSN_Error+0xc8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <MSN_Error+0xc4>)
 8000c2c:	711a      	strb	r2, [r3, #4]

//SEND NEW FM ADDRESS;
	MSN_ERR[5] = MAIN_ADDR >> 24;
 8000c2e:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <MSN_Error+0xcc>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	0e1b      	lsrs	r3, r3, #24
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <MSN_Error+0xc4>)
 8000c38:	715a      	strb	r2, [r3, #5]
	MSN_ERR[6] = MAIN_ADDR >> 16;
 8000c3a:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <MSN_Error+0xcc>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	0c1b      	lsrs	r3, r3, #16
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <MSN_Error+0xc4>)
 8000c44:	719a      	strb	r2, [r3, #6]
	MSN_ERR[7] = MAIN_ADDR >> 8;
 8000c46:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <MSN_Error+0xcc>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	0a1b      	lsrs	r3, r3, #8
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <MSN_Error+0xc4>)
 8000c50:	71da      	strb	r2, [r3, #7]
	MSN_ERR[8] = MAIN_ADDR;
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <MSN_Error+0xcc>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <MSN_Error+0xc4>)
 8000c5a:	721a      	strb	r2, [r3, #8]
	MSN_ERR[9] = 0xFE;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <MSN_Error+0xc4>)
 8000c5e:	22fe      	movs	r2, #254	; 0xfe
 8000c60:	725a      	strb	r2, [r3, #9]

// END of Mission
	HAL_UART_Transmit(&huart1, MSN_ERR, 10, 1000);
 8000c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c66:	220a      	movs	r2, #10
 8000c68:	4913      	ldr	r1, [pc, #76]	; (8000cb8 <MSN_Error+0xc4>)
 8000c6a:	4816      	ldr	r0, [pc, #88]	; (8000cc4 <MSN_Error+0xd0>)
 8000c6c:	f005 fa8d 	bl	800618a <HAL_UART_Transmit>
	myPrintf("### Sent Mission error data: ");
 8000c70:	4815      	ldr	r0, [pc, #84]	; (8000cc8 <MSN_Error+0xd4>)
 8000c72:	f7ff fe19 	bl	80008a8 <myPrintf>
	for (int i = 0; i < 10; i++) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	e00a      	b.n	8000c92 <MSN_Error+0x9e>
		myPrintf("%x", MSN_ERR[i]);
 8000c7c:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <MSN_Error+0xc4>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	4811      	ldr	r0, [pc, #68]	; (8000ccc <MSN_Error+0xd8>)
 8000c88:	f7ff fe0e 	bl	80008a8 <myPrintf>
	for (int i = 0; i < 10; i++) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b09      	cmp	r3, #9
 8000c96:	ddf1      	ble.n	8000c7c <MSN_Error+0x88>
	}
	myPrintf("\n");
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <MSN_Error+0xdc>)
 8000c9a:	f7ff fe05 	bl	80008a8 <myPrintf>
	myPrintf("#### MAIN and LoRa MCU ACK FAILED___ RESET #### \n ");
 8000c9e:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <MSN_Error+0xe0>)
 8000ca0:	f7ff fe02 	bl	80008a8 <myPrintf>
	memset(MSN_ERR, '\0', 10);
 8000ca4:	220a      	movs	r2, #10
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4803      	ldr	r0, [pc, #12]	; (8000cb8 <MSN_Error+0xc4>)
 8000caa:	f006 fd21 	bl	80076f0 <memset>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200003c8 	.word	0x200003c8
 8000cbc:	20000004 	.word	0x20000004
 8000cc0:	200003e8 	.word	0x200003e8
 8000cc4:	20000238 	.word	0x20000238
 8000cc8:	08008090 	.word	0x08008090
 8000ccc:	0800804c 	.word	0x0800804c
 8000cd0:	08008028 	.word	0x08008028
 8000cd4:	080080b0 	.word	0x080080b0

08000cd8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000cd8:	b5b0      	push	{r4, r5, r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cde:	f001 f85f 	bl	8001da0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ce2:	f000 f8eb 	bl	8000ebc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ce6:	f000 fb47 	bl	8001378 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000cea:	f000 faad 	bl	8001248 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000cee:	f000 faf7 	bl	80012e0 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8000cf2:	f000 fa55 	bl	80011a0 <MX_TIM1_Init>
	MX_RTC_Init();
 8000cf6:	f000 f9b1 	bl	800105c <MX_RTC_Init>
	MX_ADC_Init();
 8000cfa:	f000 f947 	bl	8000f8c <MX_ADC_Init>
	MX_SPI2_Init();
 8000cfe:	f000 fa11 	bl	8001124 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8000d02:	4859      	ldr	r0, [pc, #356]	; (8000e68 <main+0x190>)
 8000d04:	f004 ff6a 	bl	8005bdc <HAL_TIM_Base_Start>

	myPrintf("__________LoRa Starting.......###\r\n\n");
 8000d08:	4858      	ldr	r0, [pc, #352]	; (8000e6c <main+0x194>)
 8000d0a:	f7ff fdcd 	bl	80008a8 <myPrintf>
	pkt_id = 0;
 8000d0e:	4b58      	ldr	r3, [pc, #352]	; (8000e70 <main+0x198>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
		delay_us(999);
 8000d14:	f240 30e7 	movw	r0, #999	; 0x3e7
 8000d18:	f7ff fe00 	bl	800091c <delay_us>
		delay_us(999);
 8000d1c:	f240 30e7 	movw	r0, #999	; 0x3e7
 8000d20:	f7ff fdfc 	bl	800091c <delay_us>
		myPrintf("\n### Waiting For HANDSHAKE Command ###\r\n");
 8000d24:	4853      	ldr	r0, [pc, #332]	; (8000e74 <main+0x19c>)
 8000d26:	f7ff fdbf 	bl	80008a8 <myPrintf>
		WAIT_FOR_HANDSHAKE();
 8000d2a:	f000 fb9b 	bl	8001464 <WAIT_FOR_HANDSHAKE>
		myPrintf("### Waiting to receive CMD from OBC.....\n");
 8000d2e:	4852      	ldr	r0, [pc, #328]	; (8000e78 <main+0x1a0>)
 8000d30:	f7ff fdba 	bl	80008a8 <myPrintf>
		Receive_MAIN_CMD();
 8000d34:	f000 fbf8 	bl	8001528 <Receive_MAIN_CMD>
		delay_us(1);
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f7ff fdef 	bl	800091c <delay_us>
		Execute_MAIN_CMD();
 8000d3e:	f000 fc4b 	bl	80015d8 <Execute_MAIN_CMD>
		delay_us(1);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f7ff fdea 	bl	800091c <delay_us>
		myPrintf("--> MCU_ID: 0x%x\n", MCU_ID);
 8000d48:	4b4c      	ldr	r3, [pc, #304]	; (8000e7c <main+0x1a4>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	484c      	ldr	r0, [pc, #304]	; (8000e80 <main+0x1a8>)
 8000d50:	f7ff fdaa 	bl	80008a8 <myPrintf>
		myPrintf("--> Flash address: 0x%x\n", MAIN_ADDR);
 8000d54:	4b4b      	ldr	r3, [pc, #300]	; (8000e84 <main+0x1ac>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	484b      	ldr	r0, [pc, #300]	; (8000e88 <main+0x1b0>)
 8000d5c:	f7ff fda4 	bl	80008a8 <myPrintf>
		myPrintf("--> Mission Time %d/%d/%d %d:%d:%d \n", MAIN_CMD[8],
 8000d60:	4b4a      	ldr	r3, [pc, #296]	; (8000e8c <main+0x1b4>)
 8000d62:	7a1b      	ldrb	r3, [r3, #8]
 8000d64:	4618      	mov	r0, r3
				MAIN_CMD[9], MAIN_CMD[10], MAIN_CMD[11], MAIN_CMD[12],
 8000d66:	4b49      	ldr	r3, [pc, #292]	; (8000e8c <main+0x1b4>)
 8000d68:	7a5b      	ldrb	r3, [r3, #9]
		myPrintf("--> Mission Time %d/%d/%d %d:%d:%d \n", MAIN_CMD[8],
 8000d6a:	461c      	mov	r4, r3
				MAIN_CMD[9], MAIN_CMD[10], MAIN_CMD[11], MAIN_CMD[12],
 8000d6c:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <main+0x1b4>)
 8000d6e:	7a9b      	ldrb	r3, [r3, #10]
		myPrintf("--> Mission Time %d/%d/%d %d:%d:%d \n", MAIN_CMD[8],
 8000d70:	461d      	mov	r5, r3
				MAIN_CMD[9], MAIN_CMD[10], MAIN_CMD[11], MAIN_CMD[12],
 8000d72:	4b46      	ldr	r3, [pc, #280]	; (8000e8c <main+0x1b4>)
 8000d74:	7adb      	ldrb	r3, [r3, #11]
		myPrintf("--> Mission Time %d/%d/%d %d:%d:%d \n", MAIN_CMD[8],
 8000d76:	461a      	mov	r2, r3
				MAIN_CMD[9], MAIN_CMD[10], MAIN_CMD[11], MAIN_CMD[12],
 8000d78:	4b44      	ldr	r3, [pc, #272]	; (8000e8c <main+0x1b4>)
 8000d7a:	7b1b      	ldrb	r3, [r3, #12]
		myPrintf("--> Mission Time %d/%d/%d %d:%d:%d \n", MAIN_CMD[8],
 8000d7c:	4619      	mov	r1, r3
				MAIN_CMD[13]);
 8000d7e:	4b43      	ldr	r3, [pc, #268]	; (8000e8c <main+0x1b4>)
 8000d80:	7b5b      	ldrb	r3, [r3, #13]
		myPrintf("--> Mission Time %d/%d/%d %d:%d:%d \n", MAIN_CMD[8],
 8000d82:	9302      	str	r3, [sp, #8]
 8000d84:	9101      	str	r1, [sp, #4]
 8000d86:	9200      	str	r2, [sp, #0]
 8000d88:	462b      	mov	r3, r5
 8000d8a:	4622      	mov	r2, r4
 8000d8c:	4601      	mov	r1, r0
 8000d8e:	4840      	ldr	r0, [pc, #256]	; (8000e90 <main+0x1b8>)
 8000d90:	f7ff fd8a 	bl	80008a8 <myPrintf>

		setDataToBeTransmitted();
 8000d94:	f7ff fdf8 	bl	8000988 <setDataToBeTransmitted>

		Read_ID(&hspi2, &FM_ID);
 8000d98:	493e      	ldr	r1, [pc, #248]	; (8000e94 <main+0x1bc>)
 8000d9a:	483f      	ldr	r0, [pc, #252]	; (8000e98 <main+0x1c0>)
 8000d9c:	f000 fcae 	bl	80016fc <Read_ID>
		delay_us(1);
 8000da0:	2001      	movs	r0, #1
 8000da2:	f7ff fdbb 	bl	800091c <delay_us>

		present_address = MAIN_ADDR;
 8000da6:	4b37      	ldr	r3, [pc, #220]	; (8000e84 <main+0x1ac>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a3c      	ldr	r2, [pc, #240]	; (8000e9c <main+0x1c4>)
 8000dac:	6013      	str	r3, [r2, #0]

		myPrintf("### Storing HK Data in : 0x%x \n", present_address);
 8000dae:	4b3b      	ldr	r3, [pc, #236]	; (8000e9c <main+0x1c4>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4619      	mov	r1, r3
 8000db4:	483a      	ldr	r0, [pc, #232]	; (8000ea0 <main+0x1c8>)
 8000db6:	f7ff fd77 	bl	80008a8 <myPrintf>
		Page_Write(&hspi2, present_address, txBuffer, PayLoadLength);
 8000dba:	4b38      	ldr	r3, [pc, #224]	; (8000e9c <main+0x1c4>)
 8000dbc:	6819      	ldr	r1, [r3, #0]
 8000dbe:	2320      	movs	r3, #32
 8000dc0:	4a38      	ldr	r2, [pc, #224]	; (8000ea4 <main+0x1cc>)
 8000dc2:	4835      	ldr	r0, [pc, #212]	; (8000e98 <main+0x1c0>)
 8000dc4:	f000 fcf3 	bl	80017ae <Page_Write>
		delay_us(1);
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f7ff fda7 	bl	800091c <delay_us>
		myPrintf("### Checking if data is stored or not, in : 0x%x \n",
 8000dce:	4b33      	ldr	r3, [pc, #204]	; (8000e9c <main+0x1c4>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4834      	ldr	r0, [pc, #208]	; (8000ea8 <main+0x1d0>)
 8000dd6:	f7ff fd67 	bl	80008a8 <myPrintf>
				present_address);
		myPrintf("--> Stored Data : \n");
 8000dda:	4834      	ldr	r0, [pc, #208]	; (8000eac <main+0x1d4>)
 8000ddc:	f7ff fd64 	bl	80008a8 <myPrintf>
		Bulk_Read(&hspi2, present_address, rxData, PayLoadLength);
 8000de0:	4b2e      	ldr	r3, [pc, #184]	; (8000e9c <main+0x1c4>)
 8000de2:	6819      	ldr	r1, [r3, #0]
 8000de4:	2320      	movs	r3, #32
 8000de6:	4a32      	ldr	r2, [pc, #200]	; (8000eb0 <main+0x1d8>)
 8000de8:	482b      	ldr	r0, [pc, #172]	; (8000e98 <main+0x1c0>)
 8000dea:	f000 fd79 	bl	80018e0 <Bulk_Read>
		delay_us(1);
 8000dee:	2001      	movs	r0, #1
 8000df0:	f7ff fd94 	bl	800091c <delay_us>
		for (int i = 0; i < PayLoadLength; i++) {
 8000df4:	2300      	movs	r3, #0
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	e00a      	b.n	8000e10 <main+0x138>
			myPrintf("%x ", rxData[i]);
 8000dfa:	4a2d      	ldr	r2, [pc, #180]	; (8000eb0 <main+0x1d8>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4413      	add	r3, r2
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	4619      	mov	r1, r3
 8000e04:	482b      	ldr	r0, [pc, #172]	; (8000eb4 <main+0x1dc>)
 8000e06:	f7ff fd4f 	bl	80008a8 <myPrintf>
		for (int i = 0; i < PayLoadLength; i++) {
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b1f      	cmp	r3, #31
 8000e14:	ddf1      	ble.n	8000dfa <main+0x122>
		}
		myPrintf("\n");
 8000e16:	4828      	ldr	r0, [pc, #160]	; (8000eb8 <main+0x1e0>)
 8000e18:	f7ff fd46 	bl	80008a8 <myPrintf>
		MAIN_ADDR += 32;
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <main+0x1ac>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3320      	adds	r3, #32
 8000e22:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <main+0x1ac>)
 8000e24:	6013      	str	r3, [r2, #0]
		pkt_id++;
 8000e26:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <main+0x198>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <main+0x198>)
 8000e30:	701a      	strb	r2, [r3, #0]
		EOM();
 8000e32:	f7ff fe69 	bl	8000b08 <EOM>
		memset(txBuffer, '\0', PayLoadLength);
 8000e36:	2220      	movs	r2, #32
 8000e38:	2100      	movs	r1, #0
 8000e3a:	481a      	ldr	r0, [pc, #104]	; (8000ea4 <main+0x1cc>)
 8000e3c:	f006 fc58 	bl	80076f0 <memset>
		memset(rxData, '\0', PayLoadLength);
 8000e40:	2220      	movs	r2, #32
 8000e42:	2100      	movs	r1, #0
 8000e44:	481a      	ldr	r0, [pc, #104]	; (8000eb0 <main+0x1d8>)
 8000e46:	f006 fc53 	bl	80076f0 <memset>
		memset(MAIN_CMD, '\0', 15);
 8000e4a:	220f      	movs	r2, #15
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	480f      	ldr	r0, [pc, #60]	; (8000e8c <main+0x1b4>)
 8000e50:	f006 fc4e 	bl	80076f0 <memset>
		delay_us(999);
 8000e54:	f240 30e7 	movw	r0, #999	; 0x3e7
 8000e58:	f7ff fd60 	bl	800091c <delay_us>
		delay_us(999);
 8000e5c:	f240 30e7 	movw	r0, #999	; 0x3e7
 8000e60:	f7ff fd5c 	bl	800091c <delay_us>
		delay_us(999);
 8000e64:	e756      	b.n	8000d14 <main+0x3c>
 8000e66:	bf00      	nop
 8000e68:	200001ec 	.word	0x200001ec
 8000e6c:	080080e4 	.word	0x080080e4
 8000e70:	200003a0 	.word	0x200003a0
 8000e74:	0800810c 	.word	0x0800810c
 8000e78:	08008138 	.word	0x08008138
 8000e7c:	200003e3 	.word	0x200003e3
 8000e80:	08008164 	.word	0x08008164
 8000e84:	200003e8 	.word	0x200003e8
 8000e88:	08008178 	.word	0x08008178
 8000e8c:	200003d4 	.word	0x200003d4
 8000e90:	08008194 	.word	0x08008194
 8000e94:	200003a4 	.word	0x200003a4
 8000e98:	20000188 	.word	0x20000188
 8000e9c:	200003b8 	.word	0x200003b8
 8000ea0:	080081bc 	.word	0x080081bc
 8000ea4:	20000360 	.word	0x20000360
 8000ea8:	080081dc 	.word	0x080081dc
 8000eac:	08008210 	.word	0x08008210
 8000eb0:	20000380 	.word	0x20000380
 8000eb4:	08008024 	.word	0x08008024
 8000eb8:	08008028 	.word	0x08008028

08000ebc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b09a      	sub	sp, #104	; 0x68
 8000ec0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ec2:	f107 0320 	add.w	r3, r7, #32
 8000ec6:	2248      	movs	r2, #72	; 0x48
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f006 fc10 	bl	80076f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]
 8000ede:	615a      	str	r2, [r3, #20]
 8000ee0:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee2:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <SystemClock_Config+0xcc>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000eea:	4a27      	ldr	r2, [pc, #156]	; (8000f88 <SystemClock_Config+0xcc>)
 8000eec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <SystemClock_Config+0xcc>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000efe:	230b      	movs	r3, #11
 8000f00:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8000f02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f0c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f0e:	2340      	movs	r3, #64	; 0x40
 8000f10:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f22:	2303      	movs	r3, #3
 8000f24:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000f26:	2310      	movs	r3, #16
 8000f28:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 6;
 8000f2a:	2306      	movs	r3, #6
 8000f2c:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f32:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f34:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f38:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f3e:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f40:	f107 0320 	add.w	r3, r7, #32
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 f981 	bl	800324c <HAL_RCC_OscConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0x98>
		Error_Handler();
 8000f50:	f000 fa80 	bl	8001454 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 8000f54:	234f      	movs	r3, #79	; 0x4f
 8000f56:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2102      	movs	r1, #2
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 fced 	bl	8003950 <HAL_RCC_ClockConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0xc4>
		Error_Handler();
 8000f7c:	f000 fa6a 	bl	8001454 <Error_Handler>
	}
}
 8000f80:	bf00      	nop
 8000f82:	3768      	adds	r7, #104	; 0x68
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	58000400 	.word	0x58000400

08000f8c <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC;
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <MX_ADC_Init+0xc4>)
 8000f9e:	4a2d      	ldr	r2, [pc, #180]	; (8001054 <MX_ADC_Init+0xc8>)
 8000fa0:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <MX_ADC_Init+0xc4>)
 8000fa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fa8:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000faa:	4b29      	ldr	r3, [pc, #164]	; (8001050 <MX_ADC_Init+0xc4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb0:	4b27      	ldr	r3, [pc, #156]	; (8001050 <MX_ADC_Init+0xc4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fb6:	4b26      	ldr	r3, [pc, #152]	; (8001050 <MX_ADC_Init+0xc4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fbc:	4b24      	ldr	r3, [pc, #144]	; (8001050 <MX_ADC_Init+0xc4>)
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <MX_ADC_Init+0xc4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	761a      	strb	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000fc8:	4b21      	ldr	r3, [pc, #132]	; (8001050 <MX_ADC_Init+0xc4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	765a      	strb	r2, [r3, #25]
	hadc.Init.ContinuousConvMode = DISABLE;
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <MX_ADC_Init+0xc4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	769a      	strb	r2, [r3, #26]
	hadc.Init.NbrOfConversion = 1;
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <MX_ADC_Init+0xc4>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	61da      	str	r2, [r3, #28]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <MX_ADC_Init+0xc4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2020 	strb.w	r2, [r3, #32]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fe2:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <MX_ADC_Init+0xc4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fe8:	4b19      	ldr	r3, [pc, #100]	; (8001050 <MX_ADC_Init+0xc4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DMAContinuousRequests = DISABLE;
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <MX_ADC_Init+0xc4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <MX_ADC_Init+0xc4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_ADC_Init+0xc4>)
 8000ffe:	2207      	movs	r2, #7
 8001000:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <MX_ADC_Init+0xc4>)
 8001004:	2200      	movs	r2, #0
 8001006:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.OversamplingMode = DISABLE;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_ADC_Init+0xc4>)
 800100a:	2200      	movs	r2, #0
 800100c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_ADC_Init+0xc4>)
 8001012:	2200      	movs	r2, #0
 8001014:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8001016:	480e      	ldr	r0, [pc, #56]	; (8001050 <MX_ADC_Init+0xc4>)
 8001018:	f001 f83a 	bl	8002090 <HAL_ADC_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_ADC_Init+0x9a>
		Error_Handler();
 8001022:	f000 fa17 	bl	8001454 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_ADC_Init+0xcc>)
 8001028:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	4619      	mov	r1, r3
 8001036:	4806      	ldr	r0, [pc, #24]	; (8001050 <MX_ADC_Init+0xc4>)
 8001038:	f001 f9be 	bl	80023b8 <HAL_ADC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC_Init+0xba>
		Error_Handler();
 8001042:	f000 fa07 	bl	8001454 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200000ec 	.word	0x200000ec
 8001054:	40012400 	.word	0x40012400
 8001058:	b0001000 	.word	0xb0001000

0800105c <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8001070:	2300      	movs	r3, #0
 8001072:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001074:	4b29      	ldr	r3, [pc, #164]	; (800111c <MX_RTC_Init+0xc0>)
 8001076:	4a2a      	ldr	r2, [pc, #168]	; (8001120 <MX_RTC_Init+0xc4>)
 8001078:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800107a:	4b28      	ldr	r3, [pc, #160]	; (800111c <MX_RTC_Init+0xc0>)
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001080:	4b26      	ldr	r3, [pc, #152]	; (800111c <MX_RTC_Init+0xc0>)
 8001082:	227f      	movs	r2, #127	; 0x7f
 8001084:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <MX_RTC_Init+0xc0>)
 8001088:	22ff      	movs	r2, #255	; 0xff
 800108a:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800108c:	4b23      	ldr	r3, [pc, #140]	; (800111c <MX_RTC_Init+0xc0>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001092:	4b22      	ldr	r3, [pc, #136]	; (800111c <MX_RTC_Init+0xc0>)
 8001094:	2200      	movs	r2, #0
 8001096:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <MX_RTC_Init+0xc0>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <MX_RTC_Init+0xc0>)
 80010a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a4:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	; (800111c <MX_RTC_Init+0xc0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	621a      	str	r2, [r3, #32]
	hrtc.Init.BinMode = RTC_BINARY_NONE;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <MX_RTC_Init+0xc0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80010b2:	481a      	ldr	r0, [pc, #104]	; (800111c <MX_RTC_Init+0xc0>)
 80010b4:	f003 f926 	bl	8004304 <HAL_RTC_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_RTC_Init+0x66>
		Error_Handler();
 80010be:	f000 f9c9 	bl	8001454 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2201      	movs	r2, #1
 80010da:	4619      	mov	r1, r3
 80010dc:	480f      	ldr	r0, [pc, #60]	; (800111c <MX_RTC_Init+0xc0>)
 80010de:	f003 f993 	bl	8004408 <HAL_RTC_SetTime>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_RTC_Init+0x90>
		Error_Handler();
 80010e8:	f000 f9b4 	bl	8001454 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80010ec:	2307      	movs	r3, #7
 80010ee:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_OCTOBER;
 80010f0:	2310      	movs	r3, #16
 80010f2:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x22;
 80010f4:	2322      	movs	r3, #34	; 0x22
 80010f6:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x23;
 80010f8:	2323      	movs	r3, #35	; 0x23
 80010fa:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 80010fc:	463b      	mov	r3, r7
 80010fe:	2201      	movs	r2, #1
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	; (800111c <MX_RTC_Init+0xc0>)
 8001104:	f003 fa7e 	bl	8004604 <HAL_RTC_SetDate>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_RTC_Init+0xb6>
		Error_Handler();
 800110e:	f000 f9a1 	bl	8001454 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000150 	.word	0x20000150
 8001120:	40002800 	.word	0x40002800

08001124 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_SPI2_Init+0x74>)
 800112a:	4a1c      	ldr	r2, [pc, #112]	; (800119c <MX_SPI2_Init+0x78>)
 800112c:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_SPI2_Init+0x74>)
 8001130:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001134:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_SPI2_Init+0x74>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_SPI2_Init+0x74>)
 800113e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001142:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_SPI2_Init+0x74>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <MX_SPI2_Init+0x74>)
 800114c:	2200      	movs	r2, #0
 800114e:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_SPI2_Init+0x74>)
 8001152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001156:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_SPI2_Init+0x74>)
 800115a:	2238      	movs	r2, #56	; 0x38
 800115c:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_SPI2_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_SPI2_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <MX_SPI2_Init+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_SPI2_Init+0x74>)
 8001172:	2207      	movs	r2, #7
 8001174:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <MX_SPI2_Init+0x74>)
 8001178:	2200      	movs	r2, #0
 800117a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_SPI2_Init+0x74>)
 800117e:	2208      	movs	r2, #8
 8001180:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_SPI2_Init+0x74>)
 8001184:	f003 fbe4 	bl	8004950 <HAL_SPI_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_SPI2_Init+0x6e>
		Error_Handler();
 800118e:	f000 f961 	bl	8001454 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000188 	.word	0x20000188
 800119c:	40003800 	.word	0x40003800

080011a0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <MX_TIM1_Init+0xa0>)
 80011c0:	4a20      	ldr	r2, [pc, #128]	; (8001244 <MX_TIM1_Init+0xa4>)
 80011c2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 48 - 1;
 80011c4:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <MX_TIM1_Init+0xa0>)
 80011c6:	222f      	movs	r2, #47	; 0x2f
 80011c8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ca:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <MX_TIM1_Init+0xa0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <MX_TIM1_Init+0xa0>)
 80011d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011d6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <MX_TIM1_Init+0xa0>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80011de:	4b18      	ldr	r3, [pc, #96]	; (8001240 <MX_TIM1_Init+0xa0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <MX_TIM1_Init+0xa0>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80011ea:	4815      	ldr	r0, [pc, #84]	; (8001240 <MX_TIM1_Init+0xa0>)
 80011ec:	f004 fc9e 	bl	8005b2c <HAL_TIM_Base_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0x5a>
		Error_Handler();
 80011f6:	f000 f92d 	bl	8001454 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fe:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	4619      	mov	r1, r3
 8001206:	480e      	ldr	r0, [pc, #56]	; (8001240 <MX_TIM1_Init+0xa0>)
 8001208:	f004 fd2c 	bl	8005c64 <HAL_TIM_ConfigClockSource>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM1_Init+0x76>
		Error_Handler();
 8001212:	f000 f91f 	bl	8001454 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4619      	mov	r1, r3
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <MX_TIM1_Init+0xa0>)
 8001228:	f004 fee0 	bl	8005fec <HAL_TIMEx_MasterConfigSynchronization>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8001232:	f000 f90f 	bl	8001454 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	3720      	adds	r7, #32
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200001ec 	.word	0x200001ec
 8001244:	40012c00 	.word	0x40012c00

08001248 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800124c:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 800124e:	4a23      	ldr	r2, [pc, #140]	; (80012dc <MX_USART1_UART_Init+0x94>)
 8001250:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001252:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 8001254:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001258:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001266:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001290:	4811      	ldr	r0, [pc, #68]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 8001292:	f004 ff2a 	bl	80060ea <HAL_UART_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 800129c:	f000 f8da 	bl	8001454 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 80012a0:	2100      	movs	r1, #0
 80012a2:	480d      	ldr	r0, [pc, #52]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 80012a4:	f006 f922 	bl	80074ec <HAL_UARTEx_SetTxFifoThreshold>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80012ae:	f000 f8d1 	bl	8001454 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 80012b2:	2100      	movs	r1, #0
 80012b4:	4808      	ldr	r0, [pc, #32]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 80012b6:	f006 f957 	bl	8007568 <HAL_UARTEx_SetRxFifoThreshold>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80012c0:	f000 f8c8 	bl	8001454 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 80012c4:	4804      	ldr	r0, [pc, #16]	; (80012d8 <MX_USART1_UART_Init+0x90>)
 80012c6:	f006 f8d9 	bl	800747c <HAL_UARTEx_DisableFifoMode>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 80012d0:	f000 f8c0 	bl	8001454 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000238 	.word	0x20000238
 80012dc:	40013800 	.word	0x40013800

080012e0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80012e4:	4b22      	ldr	r3, [pc, #136]	; (8001370 <MX_USART2_UART_Init+0x90>)
 80012e6:	4a23      	ldr	r2, [pc, #140]	; (8001374 <MX_USART2_UART_Init+0x94>)
 80012e8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <MX_USART2_UART_Init+0x90>)
 80012ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012f0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <MX_USART2_UART_Init+0x90>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_USART2_UART_Init+0x90>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <MX_USART2_UART_Init+0x90>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_USART2_UART_Init+0x90>)
 8001306:	220c      	movs	r2, #12
 8001308:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <MX_USART2_UART_Init+0x90>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001310:	4b17      	ldr	r3, [pc, #92]	; (8001370 <MX_USART2_UART_Init+0x90>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001316:	4b16      	ldr	r3, [pc, #88]	; (8001370 <MX_USART2_UART_Init+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <MX_USART2_UART_Init+0x90>)
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001322:	4b13      	ldr	r3, [pc, #76]	; (8001370 <MX_USART2_UART_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001328:	4811      	ldr	r0, [pc, #68]	; (8001370 <MX_USART2_UART_Init+0x90>)
 800132a:	f004 fede 	bl	80060ea <HAL_UART_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8001334:	f000 f88e 	bl	8001454 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8001338:	2100      	movs	r1, #0
 800133a:	480d      	ldr	r0, [pc, #52]	; (8001370 <MX_USART2_UART_Init+0x90>)
 800133c:	f006 f8d6 	bl	80074ec <HAL_UARTEx_SetTxFifoThreshold>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001346:	f000 f885 	bl	8001454 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 800134a:	2100      	movs	r1, #0
 800134c:	4808      	ldr	r0, [pc, #32]	; (8001370 <MX_USART2_UART_Init+0x90>)
 800134e:	f006 f90b 	bl	8007568 <HAL_UARTEx_SetRxFifoThreshold>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001358:	f000 f87c 	bl	8001454 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 800135c:	4804      	ldr	r0, [pc, #16]	; (8001370 <MX_USART2_UART_Init+0x90>)
 800135e:	f006 f88d 	bl	800747c <HAL_UARTEx_DisableFifoMode>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 8001368:	f000 f874 	bl	8001454 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200002cc 	.word	0x200002cc
 8001374:	40004400 	.word	0x40004400

08001378 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800138c:	2002      	movs	r0, #2
 800138e:	f7ff fae3 	bl	8000958 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001392:	2004      	movs	r0, #4
 8001394:	f7ff fae0 	bl	8000958 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	2001      	movs	r0, #1
 800139a:	f7ff fadd 	bl	8000958 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80013a4:	4829      	ldr	r0, [pc, #164]	; (800144c <MX_GPIO_Init+0xd4>)
 80013a6:	f001 fc67 	bl	8002c78 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin,
 80013aa:	2200      	movs	r2, #0
 80013ac:	2138      	movs	r1, #56	; 0x38
 80013ae:	4828      	ldr	r0, [pc, #160]	; (8001450 <MX_GPIO_Init+0xd8>)
 80013b0:	f001 fc62 	bl	8002c78 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2101      	movs	r1, #1
 80013b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013bc:	f001 fc5c 	bl	8002c78 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED2_Pin | LED3_Pin;
 80013c0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80013c4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ce:	2302      	movs	r3, #2
 80013d0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	4619      	mov	r1, r3
 80013d6:	481d      	ldr	r0, [pc, #116]	; (800144c <MX_GPIO_Init+0xd4>)
 80013d8:	f001 faee 	bl	80029b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
	GPIO_InitStruct.Pin = FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin;
 80013dc:	2338      	movs	r3, #56	; 0x38
 80013de:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	4817      	ldr	r0, [pc, #92]	; (8001450 <MX_GPIO_Init+0xd8>)
 80013f2:	f001 fae1 	bl	80029b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI2_CS_Pin */
	GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80013f6:	2301      	movs	r3, #1
 80013f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	4619      	mov	r1, r3
 800140a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140e:	f001 fad3 	bl	80029b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : B3_Pin */
	GPIO_InitStruct.Pin = B3_Pin;
 8001412:	2340      	movs	r3, #64	; 0x40
 8001414:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001416:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800141a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800141c:	2301      	movs	r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	4619      	mov	r1, r3
 8001424:	480a      	ldr	r0, [pc, #40]	; (8001450 <MX_GPIO_Init+0xd8>)
 8001426:	f001 fac7 	bl	80029b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : B2_Pin */
	GPIO_InitStruct.Pin = B2_Pin;
 800142a:	2302      	movs	r3, #2
 800142c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800142e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001432:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001434:	2301      	movs	r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	4619      	mov	r1, r3
 800143c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001440:	f001 faba 	bl	80029b8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001444:	bf00      	nop
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	48000400 	.word	0x48000400
 8001450:	48000800 	.word	0x48000800

08001454 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	MSN_Error();
 8001458:	f7ff fbcc 	bl	8000bf4 <MSN_Error>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800145c:	b672      	cpsid	i
}
 800145e:	bf00      	nop
	__disable_irq();
	while (1) {
 8001460:	e7fe      	b.n	8001460 <Error_Handler+0xc>
	...

08001464 <WAIT_FOR_HANDSHAKE>:
uint8_t MCU_ID;

uint32_t MSN_CMD;
uint32_t MAIN_ADDR;

void WAIT_FOR_HANDSHAKE() {
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
	uint8_t MainCMDHs[5];
	if (HAL_UART_Receive(&huart1, MainCMDHs, 5, 7000) == HAL_OK) {
 800146a:	1d39      	adds	r1, r7, #4
 800146c:	f641 3358 	movw	r3, #7000	; 0x1b58
 8001470:	2205      	movs	r2, #5
 8001472:	4826      	ldr	r0, [pc, #152]	; (800150c <WAIT_FOR_HANDSHAKE+0xa8>)
 8001474:	f004 ff0f 	bl	8006296 <HAL_UART_Receive>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d13c      	bne.n	80014f8 <WAIT_FOR_HANDSHAKE+0x94>
		myPrintf("--> HandShake command received: 0x");
 800147e:	4824      	ldr	r0, [pc, #144]	; (8001510 <WAIT_FOR_HANDSHAKE+0xac>)
 8001480:	f7ff fa12 	bl	80008a8 <myPrintf>
		for (int i = 0; i < 5; i++) {
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	e00a      	b.n	80014a0 <WAIT_FOR_HANDSHAKE+0x3c>
			myPrintf("%x", MainCMDHs[i]);
 800148a:	1d3a      	adds	r2, r7, #4
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	4619      	mov	r1, r3
 8001494:	481f      	ldr	r0, [pc, #124]	; (8001514 <WAIT_FOR_HANDSHAKE+0xb0>)
 8001496:	f7ff fa07 	bl	80008a8 <myPrintf>
		for (int i = 0; i < 5; i++) {
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3301      	adds	r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	ddf1      	ble.n	800148a <WAIT_FOR_HANDSHAKE+0x26>
		}
		myPrintf("\n");
 80014a6:	481c      	ldr	r0, [pc, #112]	; (8001518 <WAIT_FOR_HANDSHAKE+0xb4>)
 80014a8:	f7ff f9fe 	bl	80008a8 <myPrintf>
		delay_us(1);
 80014ac:	2001      	movs	r0, #1
 80014ae:	f7ff fa35 	bl	800091c <delay_us>
		if (MainCMDHs[0] == 0x04 && MainCMDHs[4] == 0xFE) {
 80014b2:	793b      	ldrb	r3, [r7, #4]
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d116      	bne.n	80014e6 <WAIT_FOR_HANDSHAKE+0x82>
 80014b8:	7a3b      	ldrb	r3, [r7, #8]
 80014ba:	2bfe      	cmp	r3, #254	; 0xfe
 80014bc:	d113      	bne.n	80014e6 <WAIT_FOR_HANDSHAKE+0x82>
			myPrintf("--> Command Acknowledged!\n");
 80014be:	4817      	ldr	r0, [pc, #92]	; (800151c <WAIT_FOR_HANDSHAKE+0xb8>)
 80014c0:	f7ff f9f2 	bl	80008a8 <myPrintf>
			if (HAL_UART_Transmit(&huart1, MainCMDHs, 5, 2000) == HAL_OK) {
 80014c4:	1d39      	adds	r1, r7, #4
 80014c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80014ca:	2205      	movs	r2, #5
 80014cc:	480f      	ldr	r0, [pc, #60]	; (800150c <WAIT_FOR_HANDSHAKE+0xa8>)
 80014ce:	f004 fe5c 	bl	800618a <HAL_UART_Transmit>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d115      	bne.n	8001504 <WAIT_FOR_HANDSHAKE+0xa0>
				myPrintf("--> HandShake ACK sent to MAIN\n");
 80014d8:	4811      	ldr	r0, [pc, #68]	; (8001520 <WAIT_FOR_HANDSHAKE+0xbc>)
 80014da:	f7ff f9e5 	bl	80008a8 <myPrintf>
				delay_us(1);
 80014de:	2001      	movs	r0, #1
 80014e0:	f7ff fa1c 	bl	800091c <delay_us>
			if (HAL_UART_Transmit(&huart1, MainCMDHs, 5, 2000) == HAL_OK) {
 80014e4:	e00e      	b.n	8001504 <WAIT_FOR_HANDSHAKE+0xa0>
			}
		} else {
			myPrintf("*** Unknown handshake command received\n");
 80014e6:	480f      	ldr	r0, [pc, #60]	; (8001524 <WAIT_FOR_HANDSHAKE+0xc0>)
 80014e8:	f7ff f9de 	bl	80008a8 <myPrintf>
			delay_us(1);
 80014ec:	2001      	movs	r0, #1
 80014ee:	f7ff fa15 	bl	800091c <delay_us>
			WAIT_FOR_HANDSHAKE();
 80014f2:	f7ff ffb7 	bl	8001464 <WAIT_FOR_HANDSHAKE>
		}
	} else {
		delay_us(1);
		WAIT_FOR_HANDSHAKE();
	}
}
 80014f6:	e005      	b.n	8001504 <WAIT_FOR_HANDSHAKE+0xa0>
		delay_us(1);
 80014f8:	2001      	movs	r0, #1
 80014fa:	f7ff fa0f 	bl	800091c <delay_us>
		WAIT_FOR_HANDSHAKE();
 80014fe:	f7ff ffb1 	bl	8001464 <WAIT_FOR_HANDSHAKE>
}
 8001502:	e7ff      	b.n	8001504 <WAIT_FOR_HANDSHAKE+0xa0>
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000238 	.word	0x20000238
 8001510:	08008224 	.word	0x08008224
 8001514:	08008248 	.word	0x08008248
 8001518:	0800824c 	.word	0x0800824c
 800151c:	08008250 	.word	0x08008250
 8001520:	0800826c 	.word	0x0800826c
 8001524:	0800828c 	.word	0x0800828c

08001528 <Receive_MAIN_CMD>:

void Receive_MAIN_CMD() {
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive(&huart1, MAIN_CMD, 15, 7000) == HAL_OK) {
 800152e:	f641 3358 	movw	r3, #7000	; 0x1b58
 8001532:	220f      	movs	r2, #15
 8001534:	4920      	ldr	r1, [pc, #128]	; (80015b8 <Receive_MAIN_CMD+0x90>)
 8001536:	4821      	ldr	r0, [pc, #132]	; (80015bc <Receive_MAIN_CMD+0x94>)
 8001538:	f004 fead 	bl	8006296 <HAL_UART_Receive>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d12e      	bne.n	80015a0 <Receive_MAIN_CMD+0x78>
		myPrintf("--> Command received from OBC: 0x");
 8001542:	481f      	ldr	r0, [pc, #124]	; (80015c0 <Receive_MAIN_CMD+0x98>)
 8001544:	f7ff f9b0 	bl	80008a8 <myPrintf>
		for (int i = 0; i < 15; i++) {
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	e00a      	b.n	8001564 <Receive_MAIN_CMD+0x3c>
			myPrintf("%x\r", MAIN_CMD[i]);
 800154e:	4a1a      	ldr	r2, [pc, #104]	; (80015b8 <Receive_MAIN_CMD+0x90>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	4619      	mov	r1, r3
 8001558:	481a      	ldr	r0, [pc, #104]	; (80015c4 <Receive_MAIN_CMD+0x9c>)
 800155a:	f7ff f9a5 	bl	80008a8 <myPrintf>
		for (int i = 0; i < 15; i++) {
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3301      	adds	r3, #1
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b0e      	cmp	r3, #14
 8001568:	ddf1      	ble.n	800154e <Receive_MAIN_CMD+0x26>
		}
		myPrintf("\n");
 800156a:	4817      	ldr	r0, [pc, #92]	; (80015c8 <Receive_MAIN_CMD+0xa0>)
 800156c:	f7ff f99c 	bl	80008a8 <myPrintf>
		delay_us(1);
 8001570:	2001      	movs	r0, #1
 8001572:	f7ff f9d3 	bl	800091c <delay_us>
		if (MAIN_CMD[0] == 0x01 && MAIN_CMD[14] == 0xFE) {
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <Receive_MAIN_CMD+0x90>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d107      	bne.n	800158e <Receive_MAIN_CMD+0x66>
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <Receive_MAIN_CMD+0x90>)
 8001580:	7b9b      	ldrb	r3, [r3, #14]
 8001582:	2bfe      	cmp	r3, #254	; 0xfe
 8001584:	d103      	bne.n	800158e <Receive_MAIN_CMD+0x66>
			myPrintf("--> Correct command received from OBC\n");
 8001586:	4811      	ldr	r0, [pc, #68]	; (80015cc <Receive_MAIN_CMD+0xa4>)
 8001588:	f7ff f98e 	bl	80008a8 <myPrintf>
	} else {
		myPrintf("*** Command receive failed\n");
		delay_us(1);
		Receive_MAIN_CMD();
	}
}
 800158c:	e010      	b.n	80015b0 <Receive_MAIN_CMD+0x88>
			myPrintf("*** Incorrect command received from OBC\n");
 800158e:	4810      	ldr	r0, [pc, #64]	; (80015d0 <Receive_MAIN_CMD+0xa8>)
 8001590:	f7ff f98a 	bl	80008a8 <myPrintf>
			delay_us(1);
 8001594:	2001      	movs	r0, #1
 8001596:	f7ff f9c1 	bl	800091c <delay_us>
			Receive_MAIN_CMD();
 800159a:	f7ff ffc5 	bl	8001528 <Receive_MAIN_CMD>
}
 800159e:	e007      	b.n	80015b0 <Receive_MAIN_CMD+0x88>
		myPrintf("*** Command receive failed\n");
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <Receive_MAIN_CMD+0xac>)
 80015a2:	f7ff f981 	bl	80008a8 <myPrintf>
		delay_us(1);
 80015a6:	2001      	movs	r0, #1
 80015a8:	f7ff f9b8 	bl	800091c <delay_us>
		Receive_MAIN_CMD();
 80015ac:	f7ff ffbc 	bl	8001528 <Receive_MAIN_CMD>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200003d4 	.word	0x200003d4
 80015bc:	20000238 	.word	0x20000238
 80015c0:	080082b4 	.word	0x080082b4
 80015c4:	080082d8 	.word	0x080082d8
 80015c8:	0800824c 	.word	0x0800824c
 80015cc:	080082dc 	.word	0x080082dc
 80015d0:	08008304 	.word	0x08008304
 80015d4:	08008330 	.word	0x08008330

080015d8 <Execute_MAIN_CMD>:

void Execute_MAIN_CMD() {
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	myPrintf("### Fetching received CMD from OBC.....\n");
 80015dc:	4815      	ldr	r0, [pc, #84]	; (8001634 <Execute_MAIN_CMD+0x5c>)
 80015de:	f7ff f963 	bl	80008a8 <myPrintf>
	MCU_ID = MAIN_CMD[0];
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <Execute_MAIN_CMD+0x60>)
 80015e4:	781a      	ldrb	r2, [r3, #0]
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <Execute_MAIN_CMD+0x64>)
 80015e8:	701a      	strb	r2, [r3, #0]
	MSN_CMD = MAIN_CMD[0] << 24 | MAIN_CMD[1] << 16 | MAIN_CMD[2] << 8
 80015ea:	4b13      	ldr	r3, [pc, #76]	; (8001638 <Execute_MAIN_CMD+0x60>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	061a      	lsls	r2, r3, #24
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <Execute_MAIN_CMD+0x60>)
 80015f2:	785b      	ldrb	r3, [r3, #1]
 80015f4:	041b      	lsls	r3, r3, #16
 80015f6:	431a      	orrs	r2, r3
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <Execute_MAIN_CMD+0x60>)
 80015fa:	789b      	ldrb	r3, [r3, #2]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	4313      	orrs	r3, r2
			| MAIN_CMD[3];
 8001600:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <Execute_MAIN_CMD+0x60>)
 8001602:	78d2      	ldrb	r2, [r2, #3]
 8001604:	4313      	orrs	r3, r2
 8001606:	461a      	mov	r2, r3
	MSN_CMD = MAIN_CMD[0] << 24 | MAIN_CMD[1] << 16 | MAIN_CMD[2] << 8
 8001608:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <Execute_MAIN_CMD+0x68>)
 800160a:	601a      	str	r2, [r3, #0]
	MAIN_ADDR = MAIN_CMD[4] << 24 | MAIN_CMD[5] << 16 | MAIN_CMD[6] << 8
 800160c:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <Execute_MAIN_CMD+0x60>)
 800160e:	791b      	ldrb	r3, [r3, #4]
 8001610:	061a      	lsls	r2, r3, #24
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <Execute_MAIN_CMD+0x60>)
 8001614:	795b      	ldrb	r3, [r3, #5]
 8001616:	041b      	lsls	r3, r3, #16
 8001618:	431a      	orrs	r2, r3
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <Execute_MAIN_CMD+0x60>)
 800161c:	799b      	ldrb	r3, [r3, #6]
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	4313      	orrs	r3, r2
			| MAIN_CMD[7];
 8001622:	4a05      	ldr	r2, [pc, #20]	; (8001638 <Execute_MAIN_CMD+0x60>)
 8001624:	79d2      	ldrb	r2, [r2, #7]
 8001626:	4313      	orrs	r3, r2
 8001628:	461a      	mov	r2, r3
	MAIN_ADDR = MAIN_CMD[4] << 24 | MAIN_CMD[5] << 16 | MAIN_CMD[6] << 8
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <Execute_MAIN_CMD+0x6c>)
 800162c:	601a      	str	r2, [r3, #0]
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	0800834c 	.word	0x0800834c
 8001638:	200003d4 	.word	0x200003d4
 800163c:	200003e3 	.word	0x200003e3
 8001640:	200003e4 	.word	0x200003e4
 8001644:	200003e8 	.word	0x200003e8

08001648 <setTime>:

RTC_TimeTypeDef gTime;
RTC_DateTypeDef gDate;

void setTime(uint8_t year, uint8_t month, uint8_t weekDay, uint8_t hour,
		uint8_t min, uint8_t sec) {
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4604      	mov	r4, r0
 8001650:	4608      	mov	r0, r1
 8001652:	4611      	mov	r1, r2
 8001654:	461a      	mov	r2, r3
 8001656:	4623      	mov	r3, r4
 8001658:	71fb      	strb	r3, [r7, #7]
 800165a:	4603      	mov	r3, r0
 800165c:	71bb      	strb	r3, [r7, #6]
 800165e:	460b      	mov	r3, r1
 8001660:	717b      	strb	r3, [r7, #5]
 8001662:	4613      	mov	r3, r2
 8001664:	713b      	strb	r3, [r7, #4]

	sTime.Hours = hour;
 8001666:	4a18      	ldr	r2, [pc, #96]	; (80016c8 <setTime+0x80>)
 8001668:	793b      	ldrb	r3, [r7, #4]
 800166a:	7013      	strb	r3, [r2, #0]
	sTime.Minutes = min;
 800166c:	4a16      	ldr	r2, [pc, #88]	; (80016c8 <setTime+0x80>)
 800166e:	7e3b      	ldrb	r3, [r7, #24]
 8001670:	7053      	strb	r3, [r2, #1]
	sTime.Seconds = sec;
 8001672:	4a15      	ldr	r2, [pc, #84]	; (80016c8 <setTime+0x80>)
 8001674:	7f3b      	ldrb	r3, [r7, #28]
 8001676:	7093      	strb	r3, [r2, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <setTime+0x80>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <setTime+0x80>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001684:	2201      	movs	r2, #1
 8001686:	4910      	ldr	r1, [pc, #64]	; (80016c8 <setTime+0x80>)
 8001688:	4810      	ldr	r0, [pc, #64]	; (80016cc <setTime+0x84>)
 800168a:	f002 febd 	bl	8004408 <HAL_RTC_SetTime>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <setTime+0x50>
		Error_Handler();
 8001694:	f7ff fede 	bl	8001454 <Error_Handler>

	sDate.Month = month;
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <setTime+0x88>)
 800169a:	79bb      	ldrb	r3, [r7, #6]
 800169c:	7053      	strb	r3, [r2, #1]
	sDate.Year = year;
 800169e:	4a0c      	ldr	r2, [pc, #48]	; (80016d0 <setTime+0x88>)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	70d3      	strb	r3, [r2, #3]
	sDate.WeekDay = weekDay;
 80016a4:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <setTime+0x88>)
 80016a6:	797b      	ldrb	r3, [r7, #5]
 80016a8:	7013      	strb	r3, [r2, #0]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80016aa:	2201      	movs	r2, #1
 80016ac:	4908      	ldr	r1, [pc, #32]	; (80016d0 <setTime+0x88>)
 80016ae:	4807      	ldr	r0, [pc, #28]	; (80016cc <setTime+0x84>)
 80016b0:	f002 ffa8 	bl	8004604 <HAL_RTC_SetDate>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <setTime+0x76>
		Error_Handler();
 80016ba:	f7ff fecb 	bl	8001454 <Error_Handler>

	//HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);

}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd90      	pop	{r4, r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200003ec 	.word	0x200003ec
 80016cc:	20000150 	.word	0x20000150
 80016d0:	20000400 	.word	0x20000400

080016d4 <getTime>:

void getTime() {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80016d8:	2200      	movs	r2, #0
 80016da:	4905      	ldr	r1, [pc, #20]	; (80016f0 <getTime+0x1c>)
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <getTime+0x20>)
 80016de:	f002 ff2f 	bl	8004540 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80016e2:	2200      	movs	r2, #0
 80016e4:	4904      	ldr	r1, [pc, #16]	; (80016f8 <getTime+0x24>)
 80016e6:	4803      	ldr	r0, [pc, #12]	; (80016f4 <getTime+0x20>)
 80016e8:	f003 f812 	bl	8004710 <HAL_RTC_GetDate>

}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000404 	.word	0x20000404
 80016f4:	20000150 	.word	0x20000150
 80016f8:	20000418 	.word	0x20000418

080016fc <Read_ID>:
 */

#include "main.h"
#include "s_flash_mem.h"

void Read_ID(SPI_HandleTypeDef *SPI, DEVICE_ID *FM_ID) {
 80016fc:	b5b0      	push	{r4, r5, r7, lr}
 80016fe:	b08e      	sub	sp, #56	; 0x38
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
	uint8_t cmd = READ_ID;
 8001706:	239e      	movs	r3, #158	; 0x9e
 8001708:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	DEVICE_ID buff;
	uint8_t data[20];
	int i;
	FM_Enable(SPI);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f915 	bl	800193c <FM_Enable>
	delay_us(1);
 8001712:	2001      	movs	r0, #1
 8001714:	f7ff f902 	bl	800091c <delay_us>
	HAL_SPI_Transmit(SPI, &cmd, 1, 300);
 8001718:	f107 0133 	add.w	r1, r7, #51	; 0x33
 800171c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001720:	2201      	movs	r2, #1
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f003 f9e8 	bl	8004af8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, data, 20, 1000);
 8001728:	f107 0108 	add.w	r1, r7, #8
 800172c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001730:	2214      	movs	r2, #20
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f003 fb70 	bl	8004e18 <HAL_SPI_Receive>
	delay_us(1);
 8001738:	2001      	movs	r0, #1
 800173a:	f7ff f8ef 	bl	800091c <delay_us>
	FM_Disable(SPI);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f90d 	bl	800195e <FM_Disable>
	delay_us(500);
 8001744:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001748:	f7ff f8e8 	bl	800091c <delay_us>
	buff.MAN_ID = data[0];
 800174c:	7a3b      	ldrb	r3, [r7, #8]
 800174e:	773b      	strb	r3, [r7, #28]
	buff.M_TYPE = data[1];
 8001750:	7a7b      	ldrb	r3, [r7, #9]
 8001752:	777b      	strb	r3, [r7, #29]
	buff.M_CAP = data[2];
 8001754:	7abb      	ldrb	r3, [r7, #10]
 8001756:	77bb      	strb	r3, [r7, #30]
	buff.REM_BYTES = data[3];
 8001758:	7afb      	ldrb	r3, [r7, #11]
 800175a:	77fb      	strb	r3, [r7, #31]
	buff.EXT_ID = data[4];
 800175c:	7b3b      	ldrb	r3, [r7, #12]
 800175e:	f887 3020 	strb.w	r3, [r7, #32]
	buff.DEV_INFO = data[5];
 8001762:	7b7b      	ldrb	r3, [r7, #13]
 8001764:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	for (i = 6; i < 20; i++) {
 8001768:	2306      	movs	r3, #6
 800176a:	637b      	str	r3, [r7, #52]	; 0x34
 800176c:	e00d      	b.n	800178a <Read_ID+0x8e>
		buff.UID[i] = data[i];
 800176e:	f107 0208 	add.w	r2, r7, #8
 8001772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001774:	4413      	add	r3, r2
 8001776:	7819      	ldrb	r1, [r3, #0]
 8001778:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800177c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177e:	4413      	add	r3, r2
 8001780:	460a      	mov	r2, r1
 8001782:	701a      	strb	r2, [r3, #0]
	for (i = 6; i < 20; i++) {
 8001784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001786:	3301      	adds	r3, #1
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
 800178a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178c:	2b13      	cmp	r3, #19
 800178e:	ddee      	ble.n	800176e <Read_ID+0x72>
	}
	*FM_ID = buff;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	461d      	mov	r5, r3
 8001794:	f107 041c 	add.w	r4, r7, #28
 8001798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800179a:	6028      	str	r0, [r5, #0]
 800179c:	6069      	str	r1, [r5, #4]
 800179e:	60aa      	str	r2, [r5, #8]
 80017a0:	60eb      	str	r3, [r5, #12]
 80017a2:	6820      	ldr	r0, [r4, #0]
 80017a4:	6128      	str	r0, [r5, #16]
	return;
 80017a6:	bf00      	nop
}
 80017a8:	3738      	adds	r7, #56	; 0x38
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bdb0      	pop	{r4, r5, r7, pc}

080017ae <Page_Write>:
 * 			*data		data to be written into the address
 * 			size		size of the data
 *@retval	none
 */
void Page_Write(SPI_HandleTypeDef *SPI, uint32_t address, uint8_t *data,
		uint16_t size) {
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	807b      	strh	r3, [r7, #2]
	uint8_t cmd = PAGE_PROGRAM;
 80017bc:	2302      	movs	r3, #2
 80017be:	75fb      	strb	r3, [r7, #23]
	uint8_t command[3];
	while (size > PAGE_SIZE) {
 80017c0:	e03a      	b.n	8001838 <Page_Write+0x8a>
		command[0] = (uint8_t) (address >> 16 & 0xff);
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	0c1b      	lsrs	r3, r3, #16
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	753b      	strb	r3, [r7, #20]
		command[1] = (uint8_t) (address >> 8 & 0xff);
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	757b      	strb	r3, [r7, #21]
		command[2] = (uint8_t) (address & 0xff);
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	75bb      	strb	r3, [r7, #22]
		Write_Enable(SPI);
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f000 f863 	bl	80018a4 <Write_Enable>
		FM_Enable(SPI);
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f000 f8ac 	bl	800193c <FM_Enable>
		delay_us(1);
 80017e4:	2001      	movs	r0, #1
 80017e6:	f7ff f899 	bl	800091c <delay_us>
		HAL_SPI_Transmit(SPI, &cmd, 1, 100);
 80017ea:	f107 0117 	add.w	r1, r7, #23
 80017ee:	2364      	movs	r3, #100	; 0x64
 80017f0:	2201      	movs	r2, #1
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f003 f980 	bl	8004af8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(SPI, command, 3, 200);
 80017f8:	f107 0114 	add.w	r1, r7, #20
 80017fc:	23c8      	movs	r3, #200	; 0xc8
 80017fe:	2203      	movs	r2, #3
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f003 f979 	bl	8004af8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(SPI, data, PAGE_SIZE, 200);
 8001806:	23c8      	movs	r3, #200	; 0xc8
 8001808:	f44f 7280 	mov.w	r2, #256	; 0x100
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f003 f972 	bl	8004af8 <HAL_SPI_Transmit>
		FM_Disable(SPI);
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f000 f8a2 	bl	800195e <FM_Disable>
		delay_us(5);
 800181a:	2005      	movs	r0, #5
 800181c:	f7ff f87e 	bl	800091c <delay_us>
		size = size - PAGE_SIZE;
 8001820:	887b      	ldrh	r3, [r7, #2]
 8001822:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001826:	807b      	strh	r3, [r7, #2]
		data = data + 256;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800182e:	607b      	str	r3, [r7, #4]
		address = address + 256;
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001836:	60bb      	str	r3, [r7, #8]
	while (size > PAGE_SIZE) {
 8001838:	887b      	ldrh	r3, [r7, #2]
 800183a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800183e:	d8c0      	bhi.n	80017c2 <Page_Write+0x14>
	}
	command[0] = (uint8_t) (address >> 16 & 0xff);
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	0c1b      	lsrs	r3, r3, #16
 8001844:	b2db      	uxtb	r3, r3
 8001846:	753b      	strb	r3, [r7, #20]
	command[1] = (uint8_t) (address >> 8 & 0xff);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	b2db      	uxtb	r3, r3
 800184e:	757b      	strb	r3, [r7, #21]
	command[2] = (uint8_t) (address & 0xff);
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	75bb      	strb	r3, [r7, #22]
	Write_Enable(SPI);
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 f824 	bl	80018a4 <Write_Enable>
	FM_Enable(SPI);
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f000 f86d 	bl	800193c <FM_Enable>
	delay_us(1);
 8001862:	2001      	movs	r0, #1
 8001864:	f7ff f85a 	bl	800091c <delay_us>
	HAL_SPI_Transmit(SPI, &cmd, 1, 100);
 8001868:	f107 0117 	add.w	r1, r7, #23
 800186c:	2364      	movs	r3, #100	; 0x64
 800186e:	2201      	movs	r2, #1
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f003 f941 	bl	8004af8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI, command, 3, 200);
 8001876:	f107 0114 	add.w	r1, r7, #20
 800187a:	23c8      	movs	r3, #200	; 0xc8
 800187c:	2203      	movs	r2, #3
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f003 f93a 	bl	8004af8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI, data, size, 200);
 8001884:	887a      	ldrh	r2, [r7, #2]
 8001886:	23c8      	movs	r3, #200	; 0xc8
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f003 f934 	bl	8004af8 <HAL_SPI_Transmit>
	FM_Disable(SPI);
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f000 f864 	bl	800195e <FM_Disable>
	delay_us(5);
 8001896:	2005      	movs	r0, #5
 8001898:	f7ff f840 	bl	800091c <delay_us>
	return;
 800189c:	bf00      	nop
}
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <Write_Enable>:
	default:
		return 0;
	}
}

void Write_Enable(SPI_HandleTypeDef *SPI) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	uint8_t cmd = WRITE_ENABLE;
 80018ac:	2306      	movs	r3, #6
 80018ae:	73fb      	strb	r3, [r7, #15]
	FM_Enable(SPI);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f843 	bl	800193c <FM_Enable>
	delay_us(1);
 80018b6:	2001      	movs	r0, #1
 80018b8:	f7ff f830 	bl	800091c <delay_us>
	HAL_SPI_Transmit(SPI, &cmd, 1, 500);
 80018bc:	f107 010f 	add.w	r1, r7, #15
 80018c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018c4:	2201      	movs	r2, #1
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f003 f916 	bl	8004af8 <HAL_SPI_Transmit>
	FM_Disable(SPI);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f846 	bl	800195e <FM_Disable>
	delay_us(10);
 80018d2:	200a      	movs	r0, #10
 80018d4:	f7ff f822 	bl	800091c <delay_us>
}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <Bulk_Read>:
 * @param	address		address from which the data is to be read
 * 			*data		pointer to store the data which is read from the corresponding address
 * 			size		size of the data to be read
 */
void Bulk_Read(SPI_HandleTypeDef *SPI, uint32_t address, uint8_t *data,
		uint16_t size) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
 80018ec:	807b      	strh	r3, [r7, #2]
	uint8_t cmd[4];
	cmd[0] = READ;
 80018ee:	2303      	movs	r3, #3
 80018f0:	753b      	strb	r3, [r7, #20]
	cmd[1] = (uint8_t) (address >> 16 & 0xff);
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	0c1b      	lsrs	r3, r3, #16
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	757b      	strb	r3, [r7, #21]
	cmd[2] = (uint8_t) (address >> 8 & 0xff);
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (uint8_t) (address & 0xff);
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	75fb      	strb	r3, [r7, #23]
	FM_Enable(SPI);
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f000 f817 	bl	800193c <FM_Enable>
	HAL_SPI_Transmit(SPI, cmd, 4, 100);
 800190e:	f107 0114 	add.w	r1, r7, #20
 8001912:	2364      	movs	r3, #100	; 0x64
 8001914:	2204      	movs	r2, #4
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f003 f8ee 	bl	8004af8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, data, size, 200);
 800191c:	887a      	ldrh	r2, [r7, #2]
 800191e:	23c8      	movs	r3, #200	; 0xc8
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f003 fa78 	bl	8004e18 <HAL_SPI_Receive>
	FM_Disable(SPI);
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 f818 	bl	800195e <FM_Disable>
	delay_us(5);
 800192e:	2005      	movs	r0, #5
 8001930:	f7fe fff4 	bl	800091c <delay_us>
	return;
 8001934:	bf00      	nop
}
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <FM_Enable>:

void FM_Enable(SPI_HandleTypeDef *SPI) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	2101      	movs	r1, #1
 8001948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194c:	f001 f994 	bl	8002c78 <HAL_GPIO_WritePin>
	delay_us(1);
 8001950:	2001      	movs	r0, #1
 8001952:	f7fe ffe3 	bl	800091c <delay_us>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <FM_Disable>:

void FM_Disable(SPI_HandleTypeDef *SPI) {
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, SET);
 8001966:	2201      	movs	r2, #1
 8001968:	2101      	movs	r1, #1
 800196a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196e:	f001 f983 	bl	8002c78 <HAL_GPIO_WritePin>
	delay_us(1);
 8001972:	2001      	movs	r0, #1
 8001974:	f7fe ffd2 	bl	800091c <delay_us>
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <LL_AHB2_GRP1_EnableClock>:
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4013      	ands	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019c4:	68fb      	ldr	r3, [r7, #12]
}
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4013      	ands	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019f4:	68fb      	ldr	r3, [r7, #12]
}
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4013      	ands	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a24:	68fb      	ldr	r3, [r7, #12]
}
 8001a26:	bf00      	nop
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <HAL_ADC_MspInit+0x24>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d103      	bne.n	8001a56 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a52:	f7ff ffd5 	bl	8001a00 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40012400 	.word	0x40012400

08001a64 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b090      	sub	sp, #64	; 0x40
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a6c:	f107 0308 	add.w	r3, r7, #8
 8001a70:	2238      	movs	r2, #56	; 0x38
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f005 fe3b 	bl	80076f0 <memset>
  if(hrtc->Instance==RTC)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a0e      	ldr	r2, [pc, #56]	; (8001ab8 <HAL_RTC_MspInit+0x54>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d115      	bne.n	8001ab0 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a88:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a8e:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	4618      	mov	r0, r3
 8001a96:	f002 fb1b 	bl	80040d0 <HAL_RCCEx_PeriphCLKConfig>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001aa0:	f7ff fcd8 	bl	8001454 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001aa4:	f7ff ff6c 	bl	8001980 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001aa8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001aac:	f7ff ff90 	bl	80019d0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ab0:	bf00      	nop
 8001ab2:	3740      	adds	r7, #64	; 0x40
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40002800 	.word	0x40002800

08001abc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b096      	sub	sp, #88	; 0x58
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	2238      	movs	r2, #56	; 0x38
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f005 fe07 	bl	80076f0 <memset>
  if(hspi->Instance==SPI2)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a17      	ldr	r2, [pc, #92]	; (8001b44 <HAL_SPI_MspInit+0x88>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d126      	bne.n	8001b3a <HAL_SPI_MspInit+0x7e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8001aec:	2310      	movs	r3, #16
 8001aee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8001af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001af4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af6:	f107 030c 	add.w	r3, r7, #12
 8001afa:	4618      	mov	r0, r3
 8001afc:	f002 fae8 	bl	80040d0 <HAL_RCCEx_PeriphCLKConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001b06:	f7ff fca5 	bl	8001454 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b0a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b0e:	f7ff ff5f 	bl	80019d0 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	2002      	movs	r0, #2
 8001b14:	f7ff ff44 	bl	80019a0 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13;
 8001b18:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b1c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b2a:	2305      	movs	r3, #5
 8001b2c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b32:	4619      	mov	r1, r3
 8001b34:	4804      	ldr	r0, [pc, #16]	; (8001b48 <HAL_SPI_MspInit+0x8c>)
 8001b36:	f000 ff3f 	bl	80029b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b3a:	bf00      	nop
 8001b3c:	3758      	adds	r7, #88	; 0x58
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40003800 	.word	0x40003800
 8001b48:	48000400 	.word	0x48000400

08001b4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <HAL_TIM_Base_MspInit+0x24>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d103      	bne.n	8001b66 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b5e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b62:	f7ff ff4d 	bl	8001a00 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40012c00 	.word	0x40012c00

08001b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b096      	sub	sp, #88	; 0x58
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	2238      	movs	r2, #56	; 0x38
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f005 fdab 	bl	80076f0 <memset>
  if(huart->Instance==USART1)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a32      	ldr	r2, [pc, #200]	; (8001c68 <HAL_UART_MspInit+0xf4>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d130      	bne.n	8001c06 <HAL_UART_MspInit+0x92>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ba8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001bac:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bae:	f107 030c 	add.w	r3, r7, #12
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f002 fa8c 	bl	80040d0 <HAL_RCCEx_PeriphCLKConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001bbe:	f7ff fc49 	bl	8001454 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bc2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001bc6:	f7ff ff1b 	bl	8001a00 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f7ff fee8 	bl	80019a0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001bd0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bd4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2300      	movs	r3, #0
 8001be0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001be2:	2307      	movs	r3, #7
 8001be4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bea:	4619      	mov	r1, r3
 8001bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf0:	f000 fee2 	bl	80029b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2024      	movs	r0, #36	; 0x24
 8001bfa:	f000 fdec 	bl	80027d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bfe:	2024      	movs	r0, #36	; 0x24
 8001c00:	f000 fe03 	bl	800280a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c04:	e02b      	b.n	8001c5e <HAL_UART_MspInit+0xea>
  else if(huart->Instance==USART2)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a18      	ldr	r2, [pc, #96]	; (8001c6c <HAL_UART_MspInit+0xf8>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d126      	bne.n	8001c5e <HAL_UART_MspInit+0xea>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c10:	2302      	movs	r3, #2
 8001c12:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c14:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001c18:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f002 fa56 	bl	80040d0 <HAL_RCCEx_PeriphCLKConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_UART_MspInit+0xba>
      Error_Handler();
 8001c2a:	f7ff fc13 	bl	8001454 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c2e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001c32:	f7ff fecd 	bl	80019d0 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	2001      	movs	r0, #1
 8001c38:	f7ff feb2 	bl	80019a0 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001c3c:	230c      	movs	r3, #12
 8001c3e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c4c:	2307      	movs	r3, #7
 8001c4e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c54:	4619      	mov	r1, r3
 8001c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c5a:	f000 fead 	bl	80029b8 <HAL_GPIO_Init>
}
 8001c5e:	bf00      	nop
 8001c60:	3758      	adds	r7, #88	; 0x58
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40013800 	.word	0x40013800
 8001c6c:	40004400 	.word	0x40004400

08001c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <NMI_Handler+0x4>

08001c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <HardFault_Handler+0x4>

08001c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <MemManage_Handler+0x4>

08001c82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <BusFault_Handler+0x4>

08001c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <UsageFault_Handler+0x4>

08001c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr

08001c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr

08001ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb6:	f000 f8cd 	bl	8001e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <USART1_IRQHandler+0x10>)
 8001cc6:	f004 fbab 	bl	8006420 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000238 	.word	0x20000238

08001cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cdc:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <_sbrk+0x5c>)
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <_sbrk+0x60>)
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <_sbrk+0x64>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <_sbrk+0x68>)
 8001cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d207      	bcs.n	8001d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d04:	f005 fcfc 	bl	8007700 <__errno>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d12:	e009      	b.n	8001d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <_sbrk+0x64>)
 8001d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20010000 	.word	0x20010000
 8001d34:	00000400 	.word	0x00000400
 8001d38:	2000041c 	.word	0x2000041c
 8001d3c:	20000570 	.word	0x20000570

08001d40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d4c:	480d      	ldr	r0, [pc, #52]	; (8001d84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d4e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d50:	f7ff fff6 	bl	8001d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d56:	490d      	ldr	r1, [pc, #52]	; (8001d8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d58:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <LoopForever+0xe>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d5c:	e002      	b.n	8001d64 <LoopCopyDataInit>

08001d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d62:	3304      	adds	r3, #4

08001d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d68:	d3f9      	bcc.n	8001d5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d6c:	4c0a      	ldr	r4, [pc, #40]	; (8001d98 <LoopForever+0x16>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d70:	e001      	b.n	8001d76 <LoopFillZerobss>

08001d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d74:	3204      	adds	r2, #4

08001d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d78:	d3fb      	bcc.n	8001d72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d7a:	f005 fcc7 	bl	800770c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d7e:	f7fe ffab 	bl	8000cd8 <main>

08001d82 <LoopForever>:

LoopForever:
    b LoopForever
 8001d82:	e7fe      	b.n	8001d82 <LoopForever>
  ldr   r0, =_estack
 8001d84:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d8c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001d90:	080084a0 	.word	0x080084a0
  ldr r2, =_sbss
 8001d94:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001d98:	2000056c 	.word	0x2000056c

08001d9c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d9c:	e7fe      	b.n	8001d9c <ADC_IRQHandler>
	...

08001da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001daa:	2003      	movs	r0, #3
 8001dac:	f000 fd08 	bl	80027c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001db0:	f001 ffb0 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <HAL_Init+0x3c>)
 8001db8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f000 f810 	bl	8001de0 <HAL_InitTick>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d002      	beq.n	8001dcc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	71fb      	strb	r3, [r7, #7]
 8001dca:	e001      	b.n	8001dd0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dcc:	f7ff fe30 	bl	8001a30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2000000c 	.word	0x2000000c

08001de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <HAL_InitTick+0x6c>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d024      	beq.n	8001e3e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001df4:	f001 ff8e 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <HAL_InitTick+0x6c>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e04:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 fd0a 	bl	8002826 <HAL_SYSTICK_Config>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10f      	bne.n	8001e38 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b0f      	cmp	r3, #15
 8001e1c:	d809      	bhi.n	8001e32 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e26:	f000 fcd6 	bl	80027d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e2a:	4a09      	ldr	r2, [pc, #36]	; (8001e50 <HAL_InitTick+0x70>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	e007      	b.n	8001e42 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	e004      	b.n	8001e42 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
 8001e3c:	e001      	b.n	8001e42 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000014 	.word	0x20000014
 8001e50:	20000010 	.word	0x20000010

08001e54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_IncTick+0x1c>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_IncTick+0x20>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	4a03      	ldr	r2, [pc, #12]	; (8001e74 <HAL_IncTick+0x20>)
 8001e66:	6013      	str	r3, [r2, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	20000014 	.word	0x20000014
 8001e74:	20000420 	.word	0x20000420

08001e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e7c:	4b02      	ldr	r3, [pc, #8]	; (8001e88 <HAL_GetTick+0x10>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr
 8001e88:	20000420 	.word	0x20000420

08001e8c <LL_ADC_SetCommonPathInternalCh>:
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	601a      	str	r2, [r3, #0]
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_GetCommonPathInternalCh>:
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr

08001eca <LL_ADC_SetSamplingTimeCommonChannels>:
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b085      	sub	sp, #20
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2107      	movs	r1, #7
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	401a      	ands	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	615a      	str	r2, [r3, #20]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <LL_ADC_GetSamplingTimeCommonChannels>:
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	2107      	movs	r1, #7
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr

08001f36 <LL_ADC_REG_SetSequencerRanks>:
{
 8001f36:	b480      	push	{r7}
 8001f38:	b085      	sub	sp, #20
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CHSELR,
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	210f      	movs	r1, #15
 8001f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	401a      	ands	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	0e9b      	lsrs	r3, r3, #26
 8001f5a:	f003 010f 	and.w	r1, r3, #15
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <LL_ADC_REG_SetSequencerChAdd>:
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <LL_ADC_REG_SetSequencerChRem>:
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <LL_ADC_SetChannelSamplingTime>:
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b085      	sub	sp, #20
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	401a      	ands	r2, r3
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	0219      	lsls	r1, r3, #8
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	400b      	ands	r3, r1
 8001fe2:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8001fe6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fea:	431a      	orrs	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	615a      	str	r2, [r3, #20]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <LL_ADC_EnableInternalRegulator>:
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800200a:	f023 0317 	bic.w	r3, r3, #23
 800200e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	609a      	str	r2, [r3, #8]
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <LL_ADC_IsInternalRegulatorEnabled>:
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002030:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002034:	d101      	bne.n	800203a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr

08002046 <LL_ADC_IsEnabled>:
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <LL_ADC_IsEnabled+0x18>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <LL_ADC_IsEnabled+0x1a>
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr

0800206a <LL_ADC_REG_IsConversionOngoing>:
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	2b04      	cmp	r3, #4
 800207c:	d101      	bne.n	8002082 <LL_ADC_REG_IsConversionOngoing+0x18>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
	...

08002090 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 800209c:	2300      	movs	r3, #0
 800209e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e17e      	b.n	80023b0 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d109      	bne.n	80020d4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff fcbb 	bl	8001a3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ffa1 	bl	8002020 <LL_ADC_IsInternalRegulatorEnabled>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d115      	bne.n	8002110 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff86 	bl	8001ffa <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020ee:	4b9e      	ldr	r3, [pc, #632]	; (8002368 <HAL_ADC_Init+0x2d8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	099b      	lsrs	r3, r3, #6
 80020f4:	4a9d      	ldr	r2, [pc, #628]	; (800236c <HAL_ADC_Init+0x2dc>)
 80020f6:	fba2 2303 	umull	r2, r3, r2, r3
 80020fa:	099b      	lsrs	r3, r3, #6
 80020fc:	3301      	adds	r3, #1
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002102:	e002      	b.n	800210a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	3b01      	subs	r3, #1
 8002108:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1f9      	bne.n	8002104 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff83 	bl	8002020 <LL_ADC_IsInternalRegulatorEnabled>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10d      	bne.n	800213c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	f043 0210 	orr.w	r2, r3, #16
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002130:	f043 0201 	orr.w	r2, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff92 	bl	800206a <LL_ADC_REG_IsConversionOngoing>
 8002146:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214c:	f003 0310 	and.w	r3, r3, #16
 8002150:	2b00      	cmp	r3, #0
 8002152:	f040 8124 	bne.w	800239e <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	f040 8120 	bne.w	800239e <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002166:	f043 0202 	orr.w	r2, r3, #2
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff67 	bl	8002046 <LL_ADC_IsEnabled>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	f040 80a7 	bne.w	80022ce <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	7e1b      	ldrb	r3, [r3, #24]
 8002188:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800218a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	7e5b      	ldrb	r3, [r3, #25]
 8002190:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002192:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	7e9b      	ldrb	r3, [r3, #26]
 8002198:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800219a:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d002      	beq.n	80021aa <HAL_ADC_Init+0x11a>
 80021a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021a8:	e000      	b.n	80021ac <HAL_ADC_Init+0x11c>
 80021aa:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80021ac:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80021b2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	da04      	bge.n	80021c6 <HAL_ADC_Init+0x136>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021c4:	e001      	b.n	80021ca <HAL_ADC_Init+0x13a>
 80021c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 80021ca:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80021d2:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80021d4:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d114      	bne.n	8002210 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	7e9b      	ldrb	r3, [r3, #26]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d104      	bne.n	80021f8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	e00b      	b.n	8002210 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	f043 0220 	orr.w	r2, r3, #32
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002208:	f043 0201 	orr.w	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	2b00      	cmp	r3, #0
 8002216:	d009      	beq.n	800222c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002224:	4313      	orrs	r3, r2
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002236:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	69b9      	ldr	r1, [r7, #24]
 8002240:	430b      	orrs	r3, r1
 8002242:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002250:	4313      	orrs	r3, r2
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	4313      	orrs	r3, r2
 8002256:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800225e:	2b01      	cmp	r3, #1
 8002260:	d111      	bne.n	8002286 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800226e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002274:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800227a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	4313      	orrs	r3, r2
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	4b38      	ldr	r3, [pc, #224]	; (8002370 <HAL_ADC_Init+0x2e0>)
 800228e:	4013      	ands	r3, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	6979      	ldr	r1, [r7, #20]
 8002296:	430b      	orrs	r3, r1
 8002298:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80022a2:	d014      	beq.n	80022ce <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80022a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ac:	d00f      	beq.n	80022ce <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80022b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022b6:	d00a      	beq.n	80022ce <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80022b8:	4b2e      	ldr	r3, [pc, #184]	; (8002374 <HAL_ADC_Init+0x2e4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022c8:	492a      	ldr	r1, [pc, #168]	; (8002374 <HAL_ADC_Init+0x2e4>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d6:	461a      	mov	r2, r3
 80022d8:	2100      	movs	r1, #0
 80022da:	f7ff fdf6 	bl	8001eca <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e6:	461a      	mov	r2, r3
 80022e8:	4923      	ldr	r1, [pc, #140]	; (8002378 <HAL_ADC_Init+0x2e8>)
 80022ea:	f7ff fdee 	bl	8001eca <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d108      	bne.n	8002308 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f062 020f 	orn	r2, r2, #15
 8002304:	629a      	str	r2, [r3, #40]	; 0x28
 8002306:	e017      	b.n	8002338 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002310:	d112      	bne.n	8002338 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	3b01      	subs	r3, #1
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	f003 031c 	and.w	r3, r3, #28
 8002324:	f06f 020f 	mvn.w	r2, #15
 8002328:	fa02 f103 	lsl.w	r1, r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fde1 	bl	8001f06 <LL_ADC_GetSamplingTimeCommonChannels>
 8002344:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800234a:	429a      	cmp	r2, r3
 800234c:	d116      	bne.n	800237c <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	f023 0303 	bic.w	r3, r3, #3
 800235c:	f043 0201 	orr.w	r2, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002364:	e023      	b.n	80023ae <HAL_ADC_Init+0x31e>
 8002366:	bf00      	nop
 8002368:	2000000c 	.word	0x2000000c
 800236c:	053e2d63 	.word	0x053e2d63
 8002370:	1ffffc02 	.word	0x1ffffc02
 8002374:	40012708 	.word	0x40012708
 8002378:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	f023 0312 	bic.w	r3, r3, #18
 8002384:	f043 0210 	orr.w	r2, r3, #16
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002390:	f043 0201 	orr.w	r2, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800239c:	e007      	b.n	80023ae <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a2:	f043 0210 	orr.w	r2, r3, #16
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80023ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3720      	adds	r7, #32
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x28>
 80023dc:	2302      	movs	r3, #2
 80023de:	e110      	b.n	8002602 <HAL_ADC_ConfigChannel+0x24a>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fe3c 	bl	800206a <LL_ADC_REG_IsConversionOngoing>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f040 80f7 	bne.w	80025e8 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	f000 80b1 	beq.w	8002566 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800240c:	d004      	beq.n	8002418 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002412:	4a7e      	ldr	r2, [pc, #504]	; (800260c <HAL_ADC_ConfigChannel+0x254>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d108      	bne.n	800242a <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4619      	mov	r1, r3
 8002422:	4610      	mov	r0, r2
 8002424:	f7ff fda8 	bl	8001f78 <LL_ADC_REG_SetSequencerChAdd>
 8002428:	e041      	b.n	80024ae <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	210f      	movs	r1, #15
 8002438:	fa01 f303 	lsl.w	r3, r1, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	401a      	ands	r2, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002448:	2b00      	cmp	r3, #0
 800244a:	d105      	bne.n	8002458 <HAL_ADC_ConfigChannel+0xa0>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	0e9b      	lsrs	r3, r3, #26
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	e011      	b.n	800247c <HAL_ADC_ConfigChannel+0xc4>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8002470:	2320      	movs	r3, #32
 8002472:	e003      	b.n	800247c <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	6839      	ldr	r1, [r7, #0]
 800247e:	6849      	ldr	r1, [r1, #4]
 8002480:	f001 011f 	and.w	r1, r1, #31
 8002484:	408b      	lsls	r3, r1
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	089b      	lsrs	r3, r3, #2
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	429a      	cmp	r2, r3
 800249a:	d808      	bhi.n	80024ae <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	6859      	ldr	r1, [r3, #4]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	f7ff fd44 	bl	8001f36 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6819      	ldr	r1, [r3, #0]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	461a      	mov	r2, r3
 80024bc:	f7ff fd81 	bl	8001fc2 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f280 8097 	bge.w	80025f8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024ca:	4851      	ldr	r0, [pc, #324]	; (8002610 <HAL_ADC_ConfigChannel+0x258>)
 80024cc:	f7ff fcf0 	bl	8001eb0 <LL_ADC_GetCommonPathInternalCh>
 80024d0:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a4f      	ldr	r2, [pc, #316]	; (8002614 <HAL_ADC_ConfigChannel+0x25c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d120      	bne.n	800251e <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d11b      	bne.n	800251e <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024ec:	4619      	mov	r1, r3
 80024ee:	4848      	ldr	r0, [pc, #288]	; (8002610 <HAL_ADC_ConfigChannel+0x258>)
 80024f0:	f7ff fccc 	bl	8001e8c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024f4:	4b48      	ldr	r3, [pc, #288]	; (8002618 <HAL_ADC_ConfigChannel+0x260>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	099b      	lsrs	r3, r3, #6
 80024fa:	4a48      	ldr	r2, [pc, #288]	; (800261c <HAL_ADC_ConfigChannel+0x264>)
 80024fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002500:	099b      	lsrs	r3, r3, #6
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	4613      	mov	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800250e:	e002      	b.n	8002516 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	3b01      	subs	r3, #1
 8002514:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f9      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800251c:	e06c      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a3f      	ldr	r2, [pc, #252]	; (8002620 <HAL_ADC_ConfigChannel+0x268>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d10c      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d107      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002538:	4619      	mov	r1, r3
 800253a:	4835      	ldr	r0, [pc, #212]	; (8002610 <HAL_ADC_ConfigChannel+0x258>)
 800253c:	f7ff fca6 	bl	8001e8c <LL_ADC_SetCommonPathInternalCh>
 8002540:	e05a      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a37      	ldr	r2, [pc, #220]	; (8002624 <HAL_ADC_ConfigChannel+0x26c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d155      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002552:	2b00      	cmp	r3, #0
 8002554:	d150      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800255c:	4619      	mov	r1, r3
 800255e:	482c      	ldr	r0, [pc, #176]	; (8002610 <HAL_ADC_ConfigChannel+0x258>)
 8002560:	f7ff fc94 	bl	8001e8c <LL_ADC_SetCommonPathInternalCh>
 8002564:	e048      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800256e:	d004      	beq.n	800257a <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002574:	4a25      	ldr	r2, [pc, #148]	; (800260c <HAL_ADC_ConfigChannel+0x254>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d107      	bne.n	800258a <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4619      	mov	r1, r3
 8002584:	4610      	mov	r0, r2
 8002586:	f7ff fd09 	bl	8001f9c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	da32      	bge.n	80025f8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002592:	481f      	ldr	r0, [pc, #124]	; (8002610 <HAL_ADC_ConfigChannel+0x258>)
 8002594:	f7ff fc8c 	bl	8001eb0 <LL_ADC_GetCommonPathInternalCh>
 8002598:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a1d      	ldr	r2, [pc, #116]	; (8002614 <HAL_ADC_ConfigChannel+0x25c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d107      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80025aa:	4619      	mov	r1, r3
 80025ac:	4818      	ldr	r0, [pc, #96]	; (8002610 <HAL_ADC_ConfigChannel+0x258>)
 80025ae:	f7ff fc6d 	bl	8001e8c <LL_ADC_SetCommonPathInternalCh>
 80025b2:	e021      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a19      	ldr	r2, [pc, #100]	; (8002620 <HAL_ADC_ConfigChannel+0x268>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d107      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025c4:	4619      	mov	r1, r3
 80025c6:	4812      	ldr	r0, [pc, #72]	; (8002610 <HAL_ADC_ConfigChannel+0x258>)
 80025c8:	f7ff fc60 	bl	8001e8c <LL_ADC_SetCommonPathInternalCh>
 80025cc:	e014      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a14      	ldr	r2, [pc, #80]	; (8002624 <HAL_ADC_ConfigChannel+0x26c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d10f      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80025de:	4619      	mov	r1, r3
 80025e0:	480b      	ldr	r0, [pc, #44]	; (8002610 <HAL_ADC_ConfigChannel+0x258>)
 80025e2:	f7ff fc53 	bl	8001e8c <LL_ADC_SetCommonPathInternalCh>
 80025e6:	e007      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ec:	f043 0220 	orr.w	r2, r3, #32
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002600:	7ffb      	ldrb	r3, [r7, #31]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3720      	adds	r7, #32
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	80000004 	.word	0x80000004
 8002610:	40012708 	.word	0x40012708
 8002614:	b0001000 	.word	0xb0001000
 8002618:	2000000c 	.word	0x2000000c
 800261c:	053e2d63 	.word	0x053e2d63
 8002620:	b8004000 	.word	0xb8004000
 8002624:	b4002000 	.word	0xb4002000

08002628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <__NVIC_SetPriorityGrouping+0x44>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002644:	4013      	ands	r3, r2
 8002646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800265a:	4a04      	ldr	r2, [pc, #16]	; (800266c <__NVIC_SetPriorityGrouping+0x44>)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	60d3      	str	r3, [r2, #12]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <__NVIC_GetPriorityGrouping+0x18>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	0a1b      	lsrs	r3, r3, #8
 800267a:	f003 0307 	and.w	r3, r3, #7
}
 800267e:	4618      	mov	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	2b00      	cmp	r3, #0
 800269c:	db0b      	blt.n	80026b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	f003 021f 	and.w	r2, r3, #31
 80026a4:	4906      	ldr	r1, [pc, #24]	; (80026c0 <__NVIC_EnableIRQ+0x34>)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	2001      	movs	r0, #1
 80026ae:	fa00 f202 	lsl.w	r2, r0, r2
 80026b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	e000e100 	.word	0xe000e100

080026c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	db0a      	blt.n	80026ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	490c      	ldr	r1, [pc, #48]	; (8002710 <__NVIC_SetPriority+0x4c>)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	0112      	lsls	r2, r2, #4
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	440b      	add	r3, r1
 80026e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026ec:	e00a      	b.n	8002704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4908      	ldr	r1, [pc, #32]	; (8002714 <__NVIC_SetPriority+0x50>)
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	3b04      	subs	r3, #4
 80026fc:	0112      	lsls	r2, r2, #4
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	440b      	add	r3, r1
 8002702:	761a      	strb	r2, [r3, #24]
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e000e100 	.word	0xe000e100
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002718:	b480      	push	{r7}
 800271a:	b089      	sub	sp, #36	; 0x24
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f1c3 0307 	rsb	r3, r3, #7
 8002732:	2b04      	cmp	r3, #4
 8002734:	bf28      	it	cs
 8002736:	2304      	movcs	r3, #4
 8002738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3304      	adds	r3, #4
 800273e:	2b06      	cmp	r3, #6
 8002740:	d902      	bls.n	8002748 <NVIC_EncodePriority+0x30>
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3b03      	subs	r3, #3
 8002746:	e000      	b.n	800274a <NVIC_EncodePriority+0x32>
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800274c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43da      	mvns	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	401a      	ands	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002760:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	fa01 f303 	lsl.w	r3, r1, r3
 800276a:	43d9      	mvns	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002770:	4313      	orrs	r3, r2
         );
}
 8002772:	4618      	mov	r0, r3
 8002774:	3724      	adds	r7, #36	; 0x24
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3b01      	subs	r3, #1
 8002788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800278c:	d301      	bcc.n	8002792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800278e:	2301      	movs	r3, #1
 8002790:	e00f      	b.n	80027b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002792:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <SysTick_Config+0x40>)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3b01      	subs	r3, #1
 8002798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800279a:	210f      	movs	r1, #15
 800279c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027a0:	f7ff ff90 	bl	80026c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <SysTick_Config+0x40>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027aa:	4b04      	ldr	r3, [pc, #16]	; (80027bc <SysTick_Config+0x40>)
 80027ac:	2207      	movs	r2, #7
 80027ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	e000e010 	.word	0xe000e010

080027c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff ff2d 	bl	8002628 <__NVIC_SetPriorityGrouping>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b086      	sub	sp, #24
 80027da:	af00      	add	r7, sp, #0
 80027dc:	4603      	mov	r3, r0
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
 80027e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027e4:	f7ff ff44 	bl	8002670 <__NVIC_GetPriorityGrouping>
 80027e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	6978      	ldr	r0, [r7, #20]
 80027f0:	f7ff ff92 	bl	8002718 <NVIC_EncodePriority>
 80027f4:	4602      	mov	r2, r0
 80027f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff61 	bl	80026c4 <__NVIC_SetPriority>
}
 8002802:	bf00      	nop
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	4603      	mov	r3, r0
 8002812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff37 	bl	800268c <__NVIC_EnableIRQ>
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff ffa4 	bl	800277c <SysTick_Config>
 8002834:	4603      	mov	r3, r0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e04f      	b.n	80028f0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d008      	beq.n	800286e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2204      	movs	r2, #4
 8002860:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e040      	b.n	80028f0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 020e 	bic.w	r2, r2, #14
 800287c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800288c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0201 	bic.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	f003 021c 	and.w	r2, r3, #28
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	2101      	movs	r1, #1
 80028ac:	fa01 f202 	lsl.w	r2, r1, r2
 80028b0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028ba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00c      	beq.n	80028de <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80028dc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr

080028fa <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d005      	beq.n	800291e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2204      	movs	r2, #4
 8002916:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
 800291c:	e047      	b.n	80029ae <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 020e 	bic.w	r2, r2, #14
 800292c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0201 	bic.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800294c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	f003 021c 	and.w	r2, r3, #28
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	2101      	movs	r1, #1
 800295c:	fa01 f202 	lsl.w	r2, r1, r2
 8002960:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800296a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00c      	beq.n	800298e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002982:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800298c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	4798      	blx	r3
    }
  }
  return status;
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c6:	e140      	b.n	8002c4a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	2101      	movs	r1, #1
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	fa01 f303 	lsl.w	r3, r1, r3
 80029d4:	4013      	ands	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 8132 	beq.w	8002c44 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d005      	beq.n	80029f8 <HAL_GPIO_Init+0x40>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d130      	bne.n	8002a5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	2203      	movs	r2, #3
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a2e:	2201      	movs	r2, #1
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	091b      	lsrs	r3, r3, #4
 8002a44:	f003 0201 	and.w	r2, r3, #1
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d017      	beq.n	8002a96 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	2203      	movs	r2, #3
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43db      	mvns	r3, r3
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d123      	bne.n	8002aea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	08da      	lsrs	r2, r3, #3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3208      	adds	r2, #8
 8002aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	220f      	movs	r2, #15
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	08da      	lsrs	r2, r3, #3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3208      	adds	r2, #8
 8002ae4:	6939      	ldr	r1, [r7, #16]
 8002ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	2203      	movs	r2, #3
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4013      	ands	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 0203 	and.w	r2, r3, #3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 808c 	beq.w	8002c44 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002b2c:	4a4e      	ldr	r2, [pc, #312]	; (8002c68 <HAL_GPIO_Init+0x2b0>)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	089b      	lsrs	r3, r3, #2
 8002b32:	3302      	adds	r3, #2
 8002b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	2207      	movs	r2, #7
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b56:	d00d      	beq.n	8002b74 <HAL_GPIO_Init+0x1bc>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a44      	ldr	r2, [pc, #272]	; (8002c6c <HAL_GPIO_Init+0x2b4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d007      	beq.n	8002b70 <HAL_GPIO_Init+0x1b8>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a43      	ldr	r2, [pc, #268]	; (8002c70 <HAL_GPIO_Init+0x2b8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d101      	bne.n	8002b6c <HAL_GPIO_Init+0x1b4>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e004      	b.n	8002b76 <HAL_GPIO_Init+0x1be>
 8002b6c:	2307      	movs	r3, #7
 8002b6e:	e002      	b.n	8002b76 <HAL_GPIO_Init+0x1be>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <HAL_GPIO_Init+0x1be>
 8002b74:	2300      	movs	r3, #0
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	f002 0203 	and.w	r2, r2, #3
 8002b7c:	0092      	lsls	r2, r2, #2
 8002b7e:	4093      	lsls	r3, r2
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b86:	4938      	ldr	r1, [pc, #224]	; (8002c68 <HAL_GPIO_Init+0x2b0>)
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	089b      	lsrs	r3, r3, #2
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b94:	4b37      	ldr	r3, [pc, #220]	; (8002c74 <HAL_GPIO_Init+0x2bc>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bb8:	4a2e      	ldr	r2, [pc, #184]	; (8002c74 <HAL_GPIO_Init+0x2bc>)
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002bbe:	4b2d      	ldr	r3, [pc, #180]	; (8002c74 <HAL_GPIO_Init+0x2bc>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002be2:	4a24      	ldr	r2, [pc, #144]	; (8002c74 <HAL_GPIO_Init+0x2bc>)
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002be8:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <HAL_GPIO_Init+0x2bc>)
 8002bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bee:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002c0e:	4a19      	ldr	r2, [pc, #100]	; (8002c74 <HAL_GPIO_Init+0x2bc>)
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002c16:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <HAL_GPIO_Init+0x2bc>)
 8002c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c1c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4013      	ands	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002c3c:	4a0d      	ldr	r2, [pc, #52]	; (8002c74 <HAL_GPIO_Init+0x2bc>)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	3301      	adds	r3, #1
 8002c48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f47f aeb7 	bne.w	80029c8 <HAL_GPIO_Init+0x10>
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40010000 	.word	0x40010000
 8002c6c:	48000400 	.word	0x48000400
 8002c70:	48000800 	.word	0x48000800
 8002c74:	58000800 	.word	0x58000800

08002c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	807b      	strh	r3, [r7, #2]
 8002c84:	4613      	mov	r3, r2
 8002c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c88:	787b      	ldrb	r3, [r7, #1]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c8e:	887a      	ldrh	r2, [r7, #2]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c94:	e002      	b.n	8002c9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c96:	887a      	ldrh	r2, [r7, #2]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr
	...

08002ca8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cac:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a03      	ldr	r2, [pc, #12]	; (8002cc0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb6:	6013      	str	r3, [r2, #0]
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	58000400 	.word	0x58000400

08002cc4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <HAL_PWREx_GetVoltageRange+0x14>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	58000400 	.word	0x58000400

08002cdc <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cec:	d101      	bne.n	8002cf2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	58000400 	.word	0x58000400

08002d00 <LL_RCC_HSE_EnableTcxo>:
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d12:	6013      	str	r3, [r2, #0]
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <LL_RCC_HSE_DisableTcxo>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d2e:	6013      	str	r3, [r2, #0]
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d4a:	d101      	bne.n	8002d50 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <LL_RCC_HSE_Enable>:
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
}
 8002d6e:	bf00      	nop
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <LL_RCC_HSE_Disable>:
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d88:	6013      	str	r3, [r2, #0]
}
 8002d8a:	bf00      	nop
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr

08002d92 <LL_RCC_HSE_IsReady>:
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002da4:	d101      	bne.n	8002daa <LL_RCC_HSE_IsReady+0x18>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <LL_RCC_HSE_IsReady+0x1a>
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <LL_RCC_HSI_Enable>:
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc6:	6013      	str	r3, [r2, #0]
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <LL_RCC_HSI_Disable>:
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002de2:	6013      	str	r3, [r2, #0]
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <LL_RCC_HSI_IsReady>:
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfe:	d101      	bne.n	8002e04 <LL_RCC_HSI_IsReady+0x18>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <LL_RCC_HSI_IsReady+0x1a>
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <LL_RCC_HSI_SetCalibTrimming>:
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	061b      	lsls	r3, r3, #24
 8002e24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	604b      	str	r3, [r1, #4]
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr

08002e36 <LL_RCC_LSE_IsReady>:
{
 8002e36:	b480      	push	{r7}
 8002e38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d101      	bne.n	8002e4e <LL_RCC_LSE_IsReady+0x18>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <LL_RCC_LSE_IsReady+0x1a>
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <LL_RCC_LSI_Enable>:
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <LL_RCC_LSI_Disable>:
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e88:	f023 0301 	bic.w	r3, r3, #1
 8002e8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002e90:	bf00      	nop
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr

08002e98 <LL_RCC_LSI_IsReady>:
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d101      	bne.n	8002eb0 <LL_RCC_LSI_IsReady+0x18>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <LL_RCC_LSI_IsReady+0x1a>
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr

08002eba <LL_RCC_MSI_Enable>:
{
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	6013      	str	r3, [r2, #0]
}
 8002ece:	bf00      	nop
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <LL_RCC_MSI_Disable>:
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	6013      	str	r3, [r2, #0]
}
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr

08002ef2 <LL_RCC_MSI_IsReady>:
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d101      	bne.n	8002f08 <LL_RCC_MSI_IsReady+0x16>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <LL_RCC_MSI_IsReady+0x18>
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002f12:	b480      	push	{r7}
 8002f14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d101      	bne.n	8002f28 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr

08002f32 <LL_RCC_MSI_GetRange>:
{
 8002f32:	b480      	push	{r7}
 8002f34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	604b      	str	r3, [r1, #4]
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr

08002f88 <LL_RCC_SetSysClkSource>:
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f023 0203 	bic.w	r2, r3, #3
 8002f9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	608b      	str	r3, [r1, #8]
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <LL_RCC_GetSysClkSource>:
{
 8002fae:	b480      	push	{r7}
 8002fb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 030c 	and.w	r3, r3, #12
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <LL_RCC_SetAHBPrescaler>:
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	608b      	str	r3, [r1, #8]
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr

08002fea <LL_C2_RCC_SetAHBPrescaler>:
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ffa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <LL_RCC_SetAHB3Prescaler>:
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800301c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003020:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003024:	f023 020f 	bic.w	r2, r3, #15
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	091b      	lsrs	r3, r3, #4
 800302c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <LL_RCC_SetAPB1Prescaler>:
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4313      	orrs	r3, r2
 800305a:	608b      	str	r3, [r1, #8]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr

08003066 <LL_RCC_SetAPB2Prescaler>:
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800306e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003078:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4313      	orrs	r3, r2
 8003080:	608b      	str	r3, [r1, #8]
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <LL_RCC_GetAHBPrescaler>:
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800309a:	4618      	mov	r0, r3
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr

080030a2 <LL_RCC_GetAHB3Prescaler>:
{
 80030a2:	b480      	push	{r7}
 80030a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80030a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <LL_RCC_GetAPB1Prescaler>:
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80030c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr

080030d2 <LL_RCC_GetAPB2Prescaler>:
{
 80030d2:	b480      	push	{r7}
 80030d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80030d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr

080030e8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80030ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030fa:	6013      	str	r3, [r2, #0]
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003116:	6013      	str	r3, [r2, #0]
}
 8003118:	bf00      	nop
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr

08003120 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003132:	d101      	bne.n	8003138 <LL_RCC_PLL_IsReady+0x18>
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <LL_RCC_PLL_IsReady+0x1a>
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr

08003142 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003142:	b480      	push	{r7}
 8003144:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003152:	4618      	mov	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800315a:	b480      	push	{r7}
 800315c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800315e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003168:	4618      	mov	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800317e:	4618      	mov	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr

08003186 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003186:	b480      	push	{r7}
 8003188:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800318a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0303 	and.w	r3, r3, #3
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80031a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ae:	d101      	bne.n	80031b4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80031be:	b480      	push	{r7}
 80031c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80031c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031d2:	d101      	bne.n	80031d8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr

080031e2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80031e2:	b480      	push	{r7}
 80031e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80031e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f6:	d101      	bne.n	80031fc <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr

08003206 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800320a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003214:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003218:	d101      	bne.n	800321e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800322c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003236:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800323a:	d101      	bne.n	8003240 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr
	...

0800324c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e36f      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800325e:	f7ff fea6 	bl	8002fae <LL_RCC_GetSysClkSource>
 8003262:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003264:	f7ff ff8f 	bl	8003186 <LL_RCC_PLL_GetMainSource>
 8003268:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80c4 	beq.w	8003400 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_RCC_OscConfig+0x3e>
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	2b0c      	cmp	r3, #12
 8003282:	d176      	bne.n	8003372 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d173      	bne.n	8003372 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e353      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800329a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0308 	and.w	r3, r3, #8
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_OscConfig+0x68>
 80032a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032b2:	e006      	b.n	80032c2 <HAL_RCC_OscConfig+0x76>
 80032b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d222      	bcs.n	800330c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fd5a 	bl	8003d84 <RCC_SetFlashLatencyFromMSIRange>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e331      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032e4:	f043 0308 	orr.w	r3, r3, #8
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032fc:	4313      	orrs	r3, r2
 80032fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff fe2b 	bl	8002f60 <LL_RCC_MSI_SetCalibTrimming>
 800330a:	e021      	b.n	8003350 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800330c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003316:	f043 0308 	orr.w	r3, r3, #8
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800332e:	4313      	orrs	r3, r2
 8003330:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff fe12 	bl	8002f60 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fd1f 	bl	8003d84 <RCC_SetFlashLatencyFromMSIRange>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e2f6      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003350:	f000 fce0 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8003354:	4603      	mov	r3, r0
 8003356:	4aa7      	ldr	r2, [pc, #668]	; (80035f4 <HAL_RCC_OscConfig+0x3a8>)
 8003358:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800335a:	4ba7      	ldr	r3, [pc, #668]	; (80035f8 <HAL_RCC_OscConfig+0x3ac>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe fd3e 	bl	8001de0 <HAL_InitTick>
 8003364:	4603      	mov	r3, r0
 8003366:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d047      	beq.n	80033fe <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800336e:	7cfb      	ldrb	r3, [r7, #19]
 8003370:	e2e5      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d02c      	beq.n	80033d4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800337a:	f7ff fd9e 	bl	8002eba <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800337e:	f7fe fd7b 	bl	8001e78 <HAL_GetTick>
 8003382:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003386:	f7fe fd77 	bl	8001e78 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e2d2      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003398:	f7ff fdab 	bl	8002ef2 <LL_RCC_MSI_IsReady>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f1      	beq.n	8003386 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033ac:	f043 0308 	orr.w	r3, r3, #8
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033c4:	4313      	orrs	r3, r2
 80033c6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fdc7 	bl	8002f60 <LL_RCC_MSI_SetCalibTrimming>
 80033d2:	e015      	b.n	8003400 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033d4:	f7ff fd7f 	bl	8002ed6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033d8:	f7fe fd4e 	bl	8001e78 <HAL_GetTick>
 80033dc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033e0:	f7fe fd4a 	bl	8001e78 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e2a5      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80033f2:	f7ff fd7e 	bl	8002ef2 <LL_RCC_MSI_IsReady>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1f1      	bne.n	80033e0 <HAL_RCC_OscConfig+0x194>
 80033fc:	e000      	b.n	8003400 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80033fe:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d058      	beq.n	80034be <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	2b08      	cmp	r3, #8
 8003410:	d005      	beq.n	800341e <HAL_RCC_OscConfig+0x1d2>
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	2b0c      	cmp	r3, #12
 8003416:	d108      	bne.n	800342a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	2b03      	cmp	r3, #3
 800341c:	d105      	bne.n	800342a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d14b      	bne.n	80034be <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e289      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800342a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800343c:	4313      	orrs	r3, r2
 800343e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003448:	d102      	bne.n	8003450 <HAL_RCC_OscConfig+0x204>
 800344a:	f7ff fc86 	bl	8002d5a <LL_RCC_HSE_Enable>
 800344e:	e00d      	b.n	800346c <HAL_RCC_OscConfig+0x220>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003458:	d104      	bne.n	8003464 <HAL_RCC_OscConfig+0x218>
 800345a:	f7ff fc51 	bl	8002d00 <LL_RCC_HSE_EnableTcxo>
 800345e:	f7ff fc7c 	bl	8002d5a <LL_RCC_HSE_Enable>
 8003462:	e003      	b.n	800346c <HAL_RCC_OscConfig+0x220>
 8003464:	f7ff fc87 	bl	8002d76 <LL_RCC_HSE_Disable>
 8003468:	f7ff fc58 	bl	8002d1c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d012      	beq.n	800349a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7fe fd00 	bl	8001e78 <HAL_GetTick>
 8003478:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800347c:	f7fe fcfc 	bl	8001e78 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b64      	cmp	r3, #100	; 0x64
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e257      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800348e:	f7ff fc80 	bl	8002d92 <LL_RCC_HSE_IsReady>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f1      	beq.n	800347c <HAL_RCC_OscConfig+0x230>
 8003498:	e011      	b.n	80034be <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349a:	f7fe fced 	bl	8001e78 <HAL_GetTick>
 800349e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a2:	f7fe fce9 	bl	8001e78 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b64      	cmp	r3, #100	; 0x64
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e244      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80034b4:	f7ff fc6d 	bl	8002d92 <LL_RCC_HSE_IsReady>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f1      	bne.n	80034a2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d046      	beq.n	8003558 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_OscConfig+0x290>
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	2b0c      	cmp	r3, #12
 80034d4:	d10e      	bne.n	80034f4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d10b      	bne.n	80034f4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e22a      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fc8e 	bl	8002e0e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80034f2:	e031      	b.n	8003558 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d019      	beq.n	8003530 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034fc:	f7ff fc5a 	bl	8002db4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fe fcba 	bl	8001e78 <HAL_GetTick>
 8003504:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003508:	f7fe fcb6 	bl	8001e78 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e211      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800351a:	f7ff fc67 	bl	8002dec <LL_RCC_HSI_IsReady>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f1      	beq.n	8003508 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff fc70 	bl	8002e0e <LL_RCC_HSI_SetCalibTrimming>
 800352e:	e013      	b.n	8003558 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003530:	f7ff fc4e 	bl	8002dd0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7fe fca0 	bl	8001e78 <HAL_GetTick>
 8003538:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800353c:	f7fe fc9c 	bl	8001e78 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e1f7      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800354e:	f7ff fc4d 	bl	8002dec <LL_RCC_HSI_IsReady>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1f1      	bne.n	800353c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b00      	cmp	r3, #0
 8003562:	d06e      	beq.n	8003642 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d056      	beq.n	800361a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800356c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003574:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69da      	ldr	r2, [r3, #28]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	429a      	cmp	r2, r3
 8003582:	d031      	beq.n	80035e8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d006      	beq.n	800359c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e1d0      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d013      	beq.n	80035ce <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80035a6:	f7ff fc67 	bl	8002e78 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035aa:	f7fe fc65 	bl	8001e78 <HAL_GetTick>
 80035ae:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b2:	f7fe fc61 	bl	8001e78 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b11      	cmp	r3, #17
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e1bc      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80035c4:	f7ff fc68 	bl	8002e98 <LL_RCC_LSI_IsReady>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f1      	bne.n	80035b2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80035ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d6:	f023 0210 	bic.w	r2, r3, #16
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035e8:	f7ff fc36 	bl	8002e58 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ec:	f7fe fc44 	bl	8001e78 <HAL_GetTick>
 80035f0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80035f2:	e00c      	b.n	800360e <HAL_RCC_OscConfig+0x3c2>
 80035f4:	2000000c 	.word	0x2000000c
 80035f8:	20000010 	.word	0x20000010
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035fc:	f7fe fc3c 	bl	8001e78 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b11      	cmp	r3, #17
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e197      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800360e:	f7ff fc43 	bl	8002e98 <LL_RCC_LSI_IsReady>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f1      	beq.n	80035fc <HAL_RCC_OscConfig+0x3b0>
 8003618:	e013      	b.n	8003642 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800361a:	f7ff fc2d 	bl	8002e78 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361e:	f7fe fc2b 	bl	8001e78 <HAL_GetTick>
 8003622:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003626:	f7fe fc27 	bl	8001e78 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b11      	cmp	r3, #17
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e182      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003638:	f7ff fc2e 	bl	8002e98 <LL_RCC_LSI_IsReady>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f1      	bne.n	8003626 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 80d8 	beq.w	8003800 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003650:	f7ff fb44 	bl	8002cdc <LL_PWR_IsEnabledBkUpAccess>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d113      	bne.n	8003682 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800365a:	f7ff fb25 	bl	8002ca8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800365e:	f7fe fc0b 	bl	8001e78 <HAL_GetTick>
 8003662:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003666:	f7fe fc07 	bl	8001e78 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e162      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003678:	f7ff fb30 	bl	8002cdc <LL_PWR_IsEnabledBkUpAccess>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f1      	beq.n	8003666 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d07b      	beq.n	8003782 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2b85      	cmp	r3, #133	; 0x85
 8003690:	d003      	beq.n	800369a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	2b05      	cmp	r3, #5
 8003698:	d109      	bne.n	80036ae <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800369a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036a6:	f043 0304 	orr.w	r3, r3, #4
 80036aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ae:	f7fe fbe3 	bl	8001e78 <HAL_GetTick>
 80036b2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ca:	f7fe fbd5 	bl	8001e78 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e12e      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80036e0:	f7ff fba9 	bl	8002e36 <LL_RCC_LSE_IsReady>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0ef      	beq.n	80036ca <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	2b81      	cmp	r3, #129	; 0x81
 80036f0:	d003      	beq.n	80036fa <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2b85      	cmp	r3, #133	; 0x85
 80036f8:	d121      	bne.n	800373e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fa:	f7fe fbbd 	bl	8001e78 <HAL_GetTick>
 80036fe:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003708:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800370c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003714:	e00a      	b.n	800372c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003716:	f7fe fbaf 	bl	8001e78 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	f241 3288 	movw	r2, #5000	; 0x1388
 8003724:	4293      	cmp	r3, r2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e108      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800372c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0ec      	beq.n	8003716 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800373c:	e060      	b.n	8003800 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373e:	f7fe fb9b 	bl	8001e78 <HAL_GetTick>
 8003742:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003758:	e00a      	b.n	8003770 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375a:	f7fe fb8d 	bl	8001e78 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	f241 3288 	movw	r2, #5000	; 0x1388
 8003768:	4293      	cmp	r3, r2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e0e6      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1ec      	bne.n	800375a <HAL_RCC_OscConfig+0x50e>
 8003780:	e03e      	b.n	8003800 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003782:	f7fe fb79 	bl	8001e78 <HAL_GetTick>
 8003786:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003790:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800379c:	e00a      	b.n	80037b4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379e:	f7fe fb6b 	bl	8001e78 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e0c4      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80037b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1ec      	bne.n	800379e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c4:	f7fe fb58 	bl	8001e78 <HAL_GetTick>
 80037c8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037d6:	f023 0301 	bic.w	r3, r3, #1
 80037da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e0:	f7fe fb4a 	bl	8001e78 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e0a3      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80037f6:	f7ff fb1e 	bl	8002e36 <LL_RCC_LSE_IsReady>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1ef      	bne.n	80037e0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 8099 	beq.w	800393c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	2b0c      	cmp	r3, #12
 800380e:	d06c      	beq.n	80038ea <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	2b02      	cmp	r3, #2
 8003816:	d14b      	bne.n	80038b0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003818:	f7ff fc74 	bl	8003104 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fe fb2c 	bl	8001e78 <HAL_GetTick>
 8003820:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003824:	f7fe fb28 	bl	8001e78 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b0a      	cmp	r3, #10
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e083      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003836:	f7ff fc73 	bl	8003120 <LL_RCC_PLL_IsReady>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1f1      	bne.n	8003824 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	4b40      	ldr	r3, [pc, #256]	; (8003948 <HAL_RCC_OscConfig+0x6fc>)
 8003848:	4013      	ands	r3, r2
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003852:	4311      	orrs	r1, r2
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003858:	0212      	lsls	r2, r2, #8
 800385a:	4311      	orrs	r1, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003860:	4311      	orrs	r1, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003866:	4311      	orrs	r1, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800386c:	430a      	orrs	r2, r1
 800386e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003872:	4313      	orrs	r3, r2
 8003874:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003876:	f7ff fc37 	bl	80030e8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800387a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003888:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388a:	f7fe faf5 	bl	8001e78 <HAL_GetTick>
 800388e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003892:	f7fe faf1 	bl	8001e78 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b0a      	cmp	r3, #10
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e04c      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80038a4:	f7ff fc3c 	bl	8003120 <LL_RCC_PLL_IsReady>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0f1      	beq.n	8003892 <HAL_RCC_OscConfig+0x646>
 80038ae:	e045      	b.n	800393c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b0:	f7ff fc28 	bl	8003104 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b4:	f7fe fae0 	bl	8001e78 <HAL_GetTick>
 80038b8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038bc:	f7fe fadc 	bl	8001e78 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b0a      	cmp	r3, #10
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e037      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80038ce:	f7ff fc27 	bl	8003120 <LL_RCC_PLL_IsReady>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1f1      	bne.n	80038bc <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80038d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038e2:	4b1a      	ldr	r3, [pc, #104]	; (800394c <HAL_RCC_OscConfig+0x700>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	60cb      	str	r3, [r1, #12]
 80038e8:	e028      	b.n	800393c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e023      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	f003 0203 	and.w	r2, r3, #3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003908:	429a      	cmp	r2, r3
 800390a:	d115      	bne.n	8003938 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003916:	429a      	cmp	r2, r3
 8003918:	d10e      	bne.n	8003938 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	021b      	lsls	r3, r3, #8
 8003926:	429a      	cmp	r2, r3
 8003928:	d106      	bne.n	8003938 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003934:	429a      	cmp	r2, r3
 8003936:	d001      	beq.n	800393c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3720      	adds	r7, #32
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	11c1808c 	.word	0x11c1808c
 800394c:	eefefffc 	.word	0xeefefffc

08003950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e12c      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003964:	4b98      	ldr	r3, [pc, #608]	; (8003bc8 <HAL_RCC_ClockConfig+0x278>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d91b      	bls.n	80039aa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003972:	4b95      	ldr	r3, [pc, #596]	; (8003bc8 <HAL_RCC_ClockConfig+0x278>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 0207 	bic.w	r2, r3, #7
 800397a:	4993      	ldr	r1, [pc, #588]	; (8003bc8 <HAL_RCC_ClockConfig+0x278>)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	4313      	orrs	r3, r2
 8003980:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003982:	f7fe fa79 	bl	8001e78 <HAL_GetTick>
 8003986:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003988:	e008      	b.n	800399c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800398a:	f7fe fa75 	bl	8001e78 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e110      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399c:	4b8a      	ldr	r3, [pc, #552]	; (8003bc8 <HAL_RCC_ClockConfig+0x278>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d1ef      	bne.n	800398a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d016      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff fb02 	bl	8002fc4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039c0:	f7fe fa5a 	bl	8001e78 <HAL_GetTick>
 80039c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80039c6:	e008      	b.n	80039da <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039c8:	f7fe fa56 	bl	8001e78 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e0f1      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80039da:	f7ff fbdf 	bl	800319c <LL_RCC_IsActiveFlag_HPRE>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0f1      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d016      	beq.n	8003a1e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff faf8 	bl	8002fea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039fa:	f7fe fa3d 	bl	8001e78 <HAL_GetTick>
 80039fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a02:	f7fe fa39 	bl	8001e78 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e0d4      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003a14:	f7ff fbd3 	bl	80031be <LL_RCC_IsActiveFlag_C2HPRE>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f1      	beq.n	8003a02 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d016      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff faf0 	bl	8003014 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a34:	f7fe fa20 	bl	8001e78 <HAL_GetTick>
 8003a38:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a3c:	f7fe fa1c 	bl	8001e78 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e0b7      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a4e:	f7ff fbc8 	bl	80031e2 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f1      	beq.n	8003a3c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d016      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff fae9 	bl	8003040 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a6e:	f7fe fa03 	bl	8001e78 <HAL_GetTick>
 8003a72:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a76:	f7fe f9ff 	bl	8001e78 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e09a      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003a88:	f7ff fbbd 	bl	8003206 <LL_RCC_IsActiveFlag_PPRE1>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f1      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d017      	beq.n	8003ace <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fade 	bl	8003066 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003aaa:	f7fe f9e5 	bl	8001e78 <HAL_GetTick>
 8003aae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ab2:	f7fe f9e1 	bl	8001e78 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e07c      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003ac4:	f7ff fbb0 	bl	8003228 <LL_RCC_IsActiveFlag_PPRE2>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f1      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d043      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d106      	bne.n	8003af0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003ae2:	f7ff f956 	bl	8002d92 <LL_RCC_HSE_IsReady>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d11e      	bne.n	8003b2a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e066      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d106      	bne.n	8003b06 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003af8:	f7ff fb12 	bl	8003120 <LL_RCC_PLL_IsReady>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d113      	bne.n	8003b2a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e05b      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003b0e:	f7ff f9f0 	bl	8002ef2 <LL_RCC_MSI_IsReady>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d108      	bne.n	8003b2a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e050      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003b1c:	f7ff f966 	bl	8002dec <LL_RCC_HSI_IsReady>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e049      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fa2a 	bl	8002f88 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b34:	f7fe f9a0 	bl	8001e78 <HAL_GetTick>
 8003b38:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b3c:	f7fe f99c 	bl	8001e78 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e035      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b52:	f7ff fa2c 	bl	8002fae <LL_RCC_GetSysClkSource>
 8003b56:	4602      	mov	r2, r0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d1ec      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b62:	4b19      	ldr	r3, [pc, #100]	; (8003bc8 <HAL_RCC_ClockConfig+0x278>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d21b      	bcs.n	8003ba8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b70:	4b15      	ldr	r3, [pc, #84]	; (8003bc8 <HAL_RCC_ClockConfig+0x278>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f023 0207 	bic.w	r2, r3, #7
 8003b78:	4913      	ldr	r1, [pc, #76]	; (8003bc8 <HAL_RCC_ClockConfig+0x278>)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b80:	f7fe f97a 	bl	8001e78 <HAL_GetTick>
 8003b84:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003b88:	f7fe f976 	bl	8001e78 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e011      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9a:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_RCC_ClockConfig+0x278>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d1ef      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003ba8:	f000 f8b4 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8003bac:	4603      	mov	r3, r0
 8003bae:	4a07      	ldr	r2, [pc, #28]	; (8003bcc <HAL_RCC_ClockConfig+0x27c>)
 8003bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003bb2:	4b07      	ldr	r3, [pc, #28]	; (8003bd0 <HAL_RCC_ClockConfig+0x280>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fe f912 	bl	8001de0 <HAL_InitTick>
 8003bbc:	4603      	mov	r3, r0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	58004000 	.word	0x58004000
 8003bcc:	2000000c 	.word	0x2000000c
 8003bd0:	20000010 	.word	0x20000010

08003bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd4:	b590      	push	{r4, r7, lr}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003be2:	f7ff f9e4 	bl	8002fae <LL_RCC_GetSysClkSource>
 8003be6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003be8:	f7ff facd 	bl	8003186 <LL_RCC_PLL_GetMainSource>
 8003bec:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_GetSysClockFreq+0x2c>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	d139      	bne.n	8003c6e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d136      	bne.n	8003c6e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003c00:	f7ff f987 	bl	8002f12 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d115      	bne.n	8003c36 <HAL_RCC_GetSysClockFreq+0x62>
 8003c0a:	f7ff f982 	bl	8002f12 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d106      	bne.n	8003c22 <HAL_RCC_GetSysClockFreq+0x4e>
 8003c14:	f7ff f98d 	bl	8002f32 <LL_RCC_MSI_GetRange>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	0a1b      	lsrs	r3, r3, #8
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	e005      	b.n	8003c2e <HAL_RCC_GetSysClockFreq+0x5a>
 8003c22:	f7ff f991 	bl	8002f48 <LL_RCC_MSI_GetRangeAfterStandby>
 8003c26:	4603      	mov	r3, r0
 8003c28:	0a1b      	lsrs	r3, r3, #8
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	4a36      	ldr	r2, [pc, #216]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x134>)
 8003c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c34:	e014      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x8c>
 8003c36:	f7ff f96c 	bl	8002f12 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d106      	bne.n	8003c4e <HAL_RCC_GetSysClockFreq+0x7a>
 8003c40:	f7ff f977 	bl	8002f32 <LL_RCC_MSI_GetRange>
 8003c44:	4603      	mov	r3, r0
 8003c46:	091b      	lsrs	r3, r3, #4
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	e005      	b.n	8003c5a <HAL_RCC_GetSysClockFreq+0x86>
 8003c4e:	f7ff f97b 	bl	8002f48 <LL_RCC_MSI_GetRangeAfterStandby>
 8003c52:	4603      	mov	r3, r0
 8003c54:	091b      	lsrs	r3, r3, #4
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	4a2b      	ldr	r2, [pc, #172]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x134>)
 8003c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c60:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d115      	bne.n	8003c94 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c6c:	e012      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d102      	bne.n	8003c7a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c74:	4b25      	ldr	r3, [pc, #148]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x138>)
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	e00c      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d109      	bne.n	8003c94 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003c80:	f7ff f85a 	bl	8002d38 <LL_RCC_HSE_IsEnabledDiv2>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d102      	bne.n	8003c90 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003c8a:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x138>)
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	e001      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003c90:	4b1f      	ldr	r3, [pc, #124]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003c92:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c94:	f7ff f98b 	bl	8002fae <LL_RCC_GetSysClkSource>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b0c      	cmp	r3, #12
 8003c9c:	d12f      	bne.n	8003cfe <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003c9e:	f7ff fa72 	bl	8003186 <LL_RCC_PLL_GetMainSource>
 8003ca2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d003      	beq.n	8003cb2 <HAL_RCC_GetSysClockFreq+0xde>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b03      	cmp	r3, #3
 8003cae:	d003      	beq.n	8003cb8 <HAL_RCC_GetSysClockFreq+0xe4>
 8003cb0:	e00d      	b.n	8003cce <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003cb2:	4b16      	ldr	r3, [pc, #88]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x138>)
 8003cb4:	60fb      	str	r3, [r7, #12]
        break;
 8003cb6:	e00d      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003cb8:	f7ff f83e 	bl	8002d38 <LL_RCC_HSE_IsEnabledDiv2>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d102      	bne.n	8003cc8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003cc2:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x138>)
 8003cc4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003cc6:	e005      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003cc8:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003cca:	60fb      	str	r3, [r7, #12]
        break;
 8003ccc:	e002      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	60fb      	str	r3, [r7, #12]
        break;
 8003cd2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003cd4:	f7ff fa35 	bl	8003142 <LL_RCC_PLL_GetN>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	fb03 f402 	mul.w	r4, r3, r2
 8003ce0:	f7ff fa46 	bl	8003170 <LL_RCC_PLL_GetDivider>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	091b      	lsrs	r3, r3, #4
 8003ce8:	3301      	adds	r3, #1
 8003cea:	fbb4 f4f3 	udiv	r4, r4, r3
 8003cee:	f7ff fa34 	bl	800315a <LL_RCC_PLL_GetR>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	0f5b      	lsrs	r3, r3, #29
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	fbb4 f3f3 	udiv	r3, r4, r3
 8003cfc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003cfe:	697b      	ldr	r3, [r7, #20]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd90      	pop	{r4, r7, pc}
 8003d08:	080083f4 	.word	0x080083f4
 8003d0c:	00f42400 	.word	0x00f42400
 8003d10:	01e84800 	.word	0x01e84800

08003d14 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d14:	b598      	push	{r3, r4, r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003d18:	f7ff ff5c 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8003d1c:	4604      	mov	r4, r0
 8003d1e:	f7ff f9b5 	bl	800308c <LL_RCC_GetAHBPrescaler>
 8003d22:	4603      	mov	r3, r0
 8003d24:	091b      	lsrs	r3, r3, #4
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	4a03      	ldr	r2, [pc, #12]	; (8003d38 <HAL_RCC_GetHCLKFreq+0x24>)
 8003d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d30:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	bd98      	pop	{r3, r4, r7, pc}
 8003d38:	08008394 	.word	0x08008394

08003d3c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d3c:	b598      	push	{r3, r4, r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003d40:	f7ff ffe8 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8003d44:	4604      	mov	r4, r0
 8003d46:	f7ff f9b9 	bl	80030bc <LL_RCC_GetAPB1Prescaler>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	0a1b      	lsrs	r3, r3, #8
 8003d4e:	4a03      	ldr	r2, [pc, #12]	; (8003d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d54:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	bd98      	pop	{r3, r4, r7, pc}
 8003d5c:	080083d4 	.word	0x080083d4

08003d60 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d60:	b598      	push	{r3, r4, r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003d64:	f7ff ffd6 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8003d68:	4604      	mov	r4, r0
 8003d6a:	f7ff f9b2 	bl	80030d2 <LL_RCC_GetAPB2Prescaler>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	0adb      	lsrs	r3, r3, #11
 8003d72:	4a03      	ldr	r2, [pc, #12]	; (8003d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d78:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	bd98      	pop	{r3, r4, r7, pc}
 8003d80:	080083d4 	.word	0x080083d4

08003d84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003d84:	b590      	push	{r4, r7, lr}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	091b      	lsrs	r3, r3, #4
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	4a10      	ldr	r2, [pc, #64]	; (8003dd8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d9a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003d9c:	f7ff f981 	bl	80030a2 <LL_RCC_GetAHB3Prescaler>
 8003da0:	4603      	mov	r3, r0
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	4a0c      	ldr	r2, [pc, #48]	; (8003ddc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	4a09      	ldr	r2, [pc, #36]	; (8003de0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003dba:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbe:	0c9c      	lsrs	r4, r3, #18
 8003dc0:	f7fe ff80 	bl	8002cc4 <HAL_PWREx_GetVoltageRange>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f000 f80b 	bl	8003de4 <RCC_SetFlashLatency>
 8003dce:	4603      	mov	r3, r0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd90      	pop	{r4, r7, pc}
 8003dd8:	080083f4 	.word	0x080083f4
 8003ddc:	08008394 	.word	0x08008394
 8003de0:	431bde83 	.word	0x431bde83

08003de4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08e      	sub	sp, #56	; 0x38
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003dee:	4a3a      	ldr	r2, [pc, #232]	; (8003ed8 <RCC_SetFlashLatency+0xf4>)
 8003df0:	f107 0320 	add.w	r3, r7, #32
 8003df4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003df8:	6018      	str	r0, [r3, #0]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003dfe:	4a37      	ldr	r2, [pc, #220]	; (8003edc <RCC_SetFlashLatency+0xf8>)
 8003e00:	f107 0318 	add.w	r3, r7, #24
 8003e04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e08:	6018      	str	r0, [r3, #0]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003e0e:	4a34      	ldr	r2, [pc, #208]	; (8003ee0 <RCC_SetFlashLatency+0xfc>)
 8003e10:	f107 030c 	add.w	r3, r7, #12
 8003e14:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e16:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e24:	d11b      	bne.n	8003e5e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	633b      	str	r3, [r7, #48]	; 0x30
 8003e2a:	e014      	b.n	8003e56 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	3338      	adds	r3, #56	; 0x38
 8003e32:	443b      	add	r3, r7
 8003e34:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d807      	bhi.n	8003e50 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	3338      	adds	r3, #56	; 0x38
 8003e46:	443b      	add	r3, r7
 8003e48:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003e4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e4e:	e021      	b.n	8003e94 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e52:	3301      	adds	r3, #1
 8003e54:	633b      	str	r3, [r7, #48]	; 0x30
 8003e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d9e7      	bls.n	8003e2c <RCC_SetFlashLatency+0x48>
 8003e5c:	e01a      	b.n	8003e94 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003e5e:	2300      	movs	r3, #0
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e62:	e014      	b.n	8003e8e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	3338      	adds	r3, #56	; 0x38
 8003e6a:	443b      	add	r3, r7
 8003e6c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003e70:	461a      	mov	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d807      	bhi.n	8003e88 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	3338      	adds	r3, #56	; 0x38
 8003e7e:	443b      	add	r3, r7
 8003e80:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003e84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e86:	e005      	b.n	8003e94 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d9e7      	bls.n	8003e64 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e94:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <RCC_SetFlashLatency+0x100>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f023 0207 	bic.w	r2, r3, #7
 8003e9c:	4911      	ldr	r1, [pc, #68]	; (8003ee4 <RCC_SetFlashLatency+0x100>)
 8003e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003ea4:	f7fd ffe8 	bl	8001e78 <HAL_GetTick>
 8003ea8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003eaa:	e008      	b.n	8003ebe <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003eac:	f7fd ffe4 	bl	8001e78 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e007      	b.n	8003ece <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003ebe:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <RCC_SetFlashLatency+0x100>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d1ef      	bne.n	8003eac <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3738      	adds	r7, #56	; 0x38
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	08008378 	.word	0x08008378
 8003edc:	08008380 	.word	0x08008380
 8003ee0:	08008388 	.word	0x08008388
 8003ee4:	58004000 	.word	0x58004000

08003ee8 <LL_RCC_LSE_IsReady>:
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d101      	bne.n	8003f00 <LL_RCC_LSE_IsReady+0x18>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <LL_RCC_LSE_IsReady+0x1a>
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bc80      	pop	{r7}
 8003f08:	4770      	bx	lr

08003f0a <LL_RCC_SetUSARTClockSource>:
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	401a      	ands	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc80      	pop	{r7}
 8003f38:	4770      	bx	lr

08003f3a <LL_RCC_SetI2SClockSource>:
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr

08003f64 <LL_RCC_SetLPUARTClockSource>:
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	4770      	bx	lr

08003f8e <LL_RCC_SetI2CClockSource>:
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	091b      	lsrs	r3, r3, #4
 8003fa2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	401a      	ands	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003fb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <LL_RCC_SetLPTIMClockSource>:
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	0c1b      	lsrs	r3, r3, #16
 8003fda:	041b      	lsls	r3, r3, #16
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	401a      	ands	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	041b      	lsls	r3, r3, #16
 8003fe4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr

08003ff8 <LL_RCC_SetRNGClockSource>:
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004008:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800400c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr

08004022 <LL_RCC_SetADCClockSource>:
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800402a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800402e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004032:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004036:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <LL_RCC_SetRTCClockSource>:
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004060:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	bc80      	pop	{r7}
 8004074:	4770      	bx	lr

08004076 <LL_RCC_GetRTCClockSource>:
{
 8004076:	b480      	push	{r7}
 8004078:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800407a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004086:	4618      	mov	r0, r3
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr

0800408e <LL_RCC_ForceBackupDomainReset>:
{
 800408e:	b480      	push	{r7}
 8004090:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800409e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040a6:	bf00      	nop
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr

080040ae <LL_RCC_ReleaseBackupDomainReset>:
{
 80040ae:	b480      	push	{r7}
 80040b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80040b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040c6:	bf00      	nop
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr
	...

080040d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80040dc:	2300      	movs	r3, #0
 80040de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80040e0:	2300      	movs	r3, #0
 80040e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d058      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80040f0:	f7fe fdda 	bl	8002ca8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040f4:	f7fd fec0 	bl	8001e78 <HAL_GetTick>
 80040f8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80040fa:	e009      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040fc:	f7fd febc 	bl	8001e78 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d902      	bls.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	74fb      	strb	r3, [r7, #19]
        break;
 800410e:	e006      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004110:	4b7b      	ldr	r3, [pc, #492]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800411c:	d1ee      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800411e:	7cfb      	ldrb	r3, [r7, #19]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d13c      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004124:	f7ff ffa7 	bl	8004076 <LL_RCC_GetRTCClockSource>
 8004128:	4602      	mov	r2, r0
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412e:	429a      	cmp	r2, r3
 8004130:	d00f      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800413e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004140:	f7ff ffa5 	bl	800408e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004144:	f7ff ffb3 	bl	80040ae <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004148:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d014      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415c:	f7fd fe8c 	bl	8001e78 <HAL_GetTick>
 8004160:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004162:	e00b      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004164:	f7fd fe88 	bl	8001e78 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004172:	4293      	cmp	r3, r2
 8004174:	d902      	bls.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	74fb      	strb	r3, [r7, #19]
            break;
 800417a:	e004      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800417c:	f7ff feb4 	bl	8003ee8 <LL_RCC_LSE_IsReady>
 8004180:	4603      	mov	r3, r0
 8004182:	2b01      	cmp	r3, #1
 8004184:	d1ee      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8004186:	7cfb      	ldrb	r3, [r7, #19]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d105      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff ff5b 	bl	800404c <LL_RCC_SetRTCClockSource>
 8004196:	e004      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	74bb      	strb	r3, [r7, #18]
 800419c:	e001      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419e:	7cfb      	ldrb	r3, [r7, #19]
 80041a0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d004      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff fea9 	bl	8003f0a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d004      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff fe9e 	bl	8003f0a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d004      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fec0 	bl	8003f64 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d004      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff fee6 	bl	8003fc6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004202:	2b00      	cmp	r3, #0
 8004204:	d004      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff fedb 	bl	8003fc6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004218:	2b00      	cmp	r3, #0
 800421a:	d004      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff fed0 	bl	8003fc6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	d004      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff fea9 	bl	8003f8e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004244:	2b00      	cmp	r3, #0
 8004246:	d004      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fe9e 	bl	8003f8e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d004      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fe93 	bl	8003f8e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b00      	cmp	r3, #0
 8004272:	d011      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fe5e 	bl	8003f3a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004286:	d107      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004296:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d010      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fea5 	bl	8003ff8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d107      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80042b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042c4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d011      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff fea3 	bl	8004022 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042e4:	d107      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80042f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	58000400 	.word	0x58000400

08004304 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d071      	beq.n	80043fa <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fd fb9a 	bl	8001a64 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004338:	4b32      	ldr	r3, [pc, #200]	; (8004404 <HAL_RTC_Init+0x100>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f003 0310 	and.w	r3, r3, #16
 8004340:	2b10      	cmp	r3, #16
 8004342:	d051      	beq.n	80043e8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004344:	4b2f      	ldr	r3, [pc, #188]	; (8004404 <HAL_RTC_Init+0x100>)
 8004346:	22ca      	movs	r2, #202	; 0xca
 8004348:	625a      	str	r2, [r3, #36]	; 0x24
 800434a:	4b2e      	ldr	r3, [pc, #184]	; (8004404 <HAL_RTC_Init+0x100>)
 800434c:	2253      	movs	r2, #83	; 0x53
 800434e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fa51 	bl	80047f8 <RTC_EnterInitMode>
 8004356:	4603      	mov	r3, r0
 8004358:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d13f      	bne.n	80043e0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004360:	4b28      	ldr	r3, [pc, #160]	; (8004404 <HAL_RTC_Init+0x100>)
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	4a27      	ldr	r2, [pc, #156]	; (8004404 <HAL_RTC_Init+0x100>)
 8004366:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800436a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800436e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004370:	4b24      	ldr	r3, [pc, #144]	; (8004404 <HAL_RTC_Init+0x100>)
 8004372:	699a      	ldr	r2, [r3, #24]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6859      	ldr	r1, [r3, #4]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	4319      	orrs	r1, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	430b      	orrs	r3, r1
 8004384:	491f      	ldr	r1, [pc, #124]	; (8004404 <HAL_RTC_Init+0x100>)
 8004386:	4313      	orrs	r3, r2
 8004388:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	041b      	lsls	r3, r3, #16
 8004394:	491b      	ldr	r1, [pc, #108]	; (8004404 <HAL_RTC_Init+0x100>)
 8004396:	4313      	orrs	r3, r2
 8004398:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800439a:	4b1a      	ldr	r3, [pc, #104]	; (8004404 <HAL_RTC_Init+0x100>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	430b      	orrs	r3, r1
 80043ac:	4915      	ldr	r1, [pc, #84]	; (8004404 <HAL_RTC_Init+0x100>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fa54 	bl	8004860 <RTC_ExitInitMode>
 80043b8:	4603      	mov	r3, r0
 80043ba:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10e      	bne.n	80043e0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80043c2:	4b10      	ldr	r3, [pc, #64]	; (8004404 <HAL_RTC_Init+0x100>)
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a19      	ldr	r1, [r3, #32]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	4319      	orrs	r1, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	430b      	orrs	r3, r1
 80043da:	490a      	ldr	r1, [pc, #40]	; (8004404 <HAL_RTC_Init+0x100>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043e0:	4b08      	ldr	r3, [pc, #32]	; (8004404 <HAL_RTC_Init+0x100>)
 80043e2:	22ff      	movs	r2, #255	; 0xff
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24
 80043e6:	e001      	b.n	80043ec <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d103      	bne.n	80043fa <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	40002800 	.word	0x40002800

08004408 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004408:	b590      	push	{r4, r7, lr}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_RTC_SetTime+0x1a>
 800441e:	2302      	movs	r3, #2
 8004420:	e088      	b.n	8004534 <HAL_RTC_SetTime+0x12c>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2202      	movs	r2, #2
 800442e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004432:	4b42      	ldr	r3, [pc, #264]	; (800453c <HAL_RTC_SetTime+0x134>)
 8004434:	22ca      	movs	r2, #202	; 0xca
 8004436:	625a      	str	r2, [r3, #36]	; 0x24
 8004438:	4b40      	ldr	r3, [pc, #256]	; (800453c <HAL_RTC_SetTime+0x134>)
 800443a:	2253      	movs	r2, #83	; 0x53
 800443c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 f9da 	bl	80047f8 <RTC_EnterInitMode>
 8004444:	4603      	mov	r3, r0
 8004446:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004448:	7cfb      	ldrb	r3, [r7, #19]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d15e      	bne.n	800450c <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800444e:	4b3b      	ldr	r3, [pc, #236]	; (800453c <HAL_RTC_SetTime+0x134>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800445a:	d057      	beq.n	800450c <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d125      	bne.n	80044ae <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004462:	4b36      	ldr	r3, [pc, #216]	; (800453c <HAL_RTC_SetTime+0x134>)
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2200      	movs	r2, #0
 8004472:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fa2f 	bl	80048dc <RTC_ByteToBcd2>
 800447e:	4603      	mov	r3, r0
 8004480:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	785b      	ldrb	r3, [r3, #1]
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fa28 	bl	80048dc <RTC_ByteToBcd2>
 800448c:	4603      	mov	r3, r0
 800448e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004490:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	789b      	ldrb	r3, [r3, #2]
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fa20 	bl	80048dc <RTC_ByteToBcd2>
 800449c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800449e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	78db      	ldrb	r3, [r3, #3]
 80044a6:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	e017      	b.n	80044de <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80044ae:	4b23      	ldr	r3, [pc, #140]	; (800453c <HAL_RTC_SetTime+0x134>)
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d102      	bne.n	80044c0 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2200      	movs	r2, #0
 80044be:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	785b      	ldrb	r3, [r3, #1]
 80044ca:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044cc:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044d2:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	78db      	ldrb	r3, [r3, #3]
 80044d8:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80044de:	4a17      	ldr	r2, [pc, #92]	; (800453c <HAL_RTC_SetTime+0x134>)
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80044e6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80044ea:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80044ec:	4b13      	ldr	r3, [pc, #76]	; (800453c <HAL_RTC_SetTime+0x134>)
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	4a12      	ldr	r2, [pc, #72]	; (800453c <HAL_RTC_SetTime+0x134>)
 80044f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044f6:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80044f8:	4b10      	ldr	r3, [pc, #64]	; (800453c <HAL_RTC_SetTime+0x134>)
 80044fa:	699a      	ldr	r2, [r3, #24]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	68d9      	ldr	r1, [r3, #12]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	430b      	orrs	r3, r1
 8004506:	490d      	ldr	r1, [pc, #52]	; (800453c <HAL_RTC_SetTime+0x134>)
 8004508:	4313      	orrs	r3, r2
 800450a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 f9a7 	bl	8004860 <RTC_ExitInitMode>
 8004512:	4603      	mov	r3, r0
 8004514:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004516:	4b09      	ldr	r3, [pc, #36]	; (800453c <HAL_RTC_SetTime+0x134>)
 8004518:	22ff      	movs	r2, #255	; 0xff
 800451a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800451c:	7cfb      	ldrb	r3, [r7, #19]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d103      	bne.n	800452a <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8004532:	7cfb      	ldrb	r3, [r7, #19]
}
 8004534:	4618      	mov	r0, r3
 8004536:	371c      	adds	r7, #28
 8004538:	46bd      	mov	sp, r7
 800453a:	bd90      	pop	{r4, r7, pc}
 800453c:	40002800 	.word	0x40002800

08004540 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800454c:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <HAL_RTC_GetTime+0xc0>)
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8004554:	4b2a      	ldr	r3, [pc, #168]	; (8004600 <HAL_RTC_GetTime+0xc0>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004560:	d049      	beq.n	80045f6 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8004562:	4b27      	ldr	r3, [pc, #156]	; (8004600 <HAL_RTC_GetTime+0xc0>)
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800456e:	4b24      	ldr	r3, [pc, #144]	; (8004600 <HAL_RTC_GetTime+0xc0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004576:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800457a:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	0c1b      	lsrs	r3, r3, #16
 8004580:	b2db      	uxtb	r3, r3
 8004582:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004586:	b2da      	uxtb	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	0a1b      	lsrs	r3, r3, #8
 8004590:	b2db      	uxtb	r3, r3
 8004592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004596:	b2da      	uxtb	r2, r3
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	0d9b      	lsrs	r3, r3, #22
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d11a      	bne.n	80045f6 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 f9a8 	bl	800491a <RTC_Bcd2ToByte>
 80045ca:	4603      	mov	r3, r0
 80045cc:	461a      	mov	r2, r3
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	785b      	ldrb	r3, [r3, #1]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 f99f 	bl	800491a <RTC_Bcd2ToByte>
 80045dc:	4603      	mov	r3, r0
 80045de:	461a      	mov	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	789b      	ldrb	r3, [r3, #2]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 f996 	bl	800491a <RTC_Bcd2ToByte>
 80045ee:	4603      	mov	r3, r0
 80045f0:	461a      	mov	r2, r3
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40002800 	.word	0x40002800

08004604 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004604:	b590      	push	{r4, r7, lr}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_RTC_SetDate+0x1a>
 800461a:	2302      	movs	r3, #2
 800461c:	e071      	b.n	8004702 <HAL_RTC_SetDate+0xfe>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2202      	movs	r2, #2
 800462a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10e      	bne.n	8004652 <HAL_RTC_SetDate+0x4e>
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	785b      	ldrb	r3, [r3, #1]
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	2b00      	cmp	r3, #0
 800463e:	d008      	beq.n	8004652 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	785b      	ldrb	r3, [r3, #1]
 8004644:	f023 0310 	bic.w	r3, r3, #16
 8004648:	b2db      	uxtb	r3, r3
 800464a:	330a      	adds	r3, #10
 800464c:	b2da      	uxtb	r2, r3
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d11c      	bne.n	8004692 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	78db      	ldrb	r3, [r3, #3]
 800465c:	4618      	mov	r0, r3
 800465e:	f000 f93d 	bl	80048dc <RTC_ByteToBcd2>
 8004662:	4603      	mov	r3, r0
 8004664:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	785b      	ldrb	r3, [r3, #1]
 800466a:	4618      	mov	r0, r3
 800466c:	f000 f936 	bl	80048dc <RTC_ByteToBcd2>
 8004670:	4603      	mov	r3, r0
 8004672:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004674:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	789b      	ldrb	r3, [r3, #2]
 800467a:	4618      	mov	r0, r3
 800467c:	f000 f92e 	bl	80048dc <RTC_ByteToBcd2>
 8004680:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004682:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800468c:	4313      	orrs	r3, r2
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	e00e      	b.n	80046b0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	78db      	ldrb	r3, [r3, #3]
 8004696:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	785b      	ldrb	r3, [r3, #1]
 800469c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800469e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80046a4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046b0:	4b16      	ldr	r3, [pc, #88]	; (800470c <HAL_RTC_SetDate+0x108>)
 80046b2:	22ca      	movs	r2, #202	; 0xca
 80046b4:	625a      	str	r2, [r3, #36]	; 0x24
 80046b6:	4b15      	ldr	r3, [pc, #84]	; (800470c <HAL_RTC_SetDate+0x108>)
 80046b8:	2253      	movs	r2, #83	; 0x53
 80046ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f89b 	bl	80047f8 <RTC_EnterInitMode>
 80046c2:	4603      	mov	r3, r0
 80046c4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80046c6:	7cfb      	ldrb	r3, [r7, #19]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10b      	bne.n	80046e4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80046cc:	4a0f      	ldr	r2, [pc, #60]	; (800470c <HAL_RTC_SetDate+0x108>)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80046d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80046d8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 f8c0 	bl	8004860 <RTC_ExitInitMode>
 80046e0:	4603      	mov	r3, r0
 80046e2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046e4:	4b09      	ldr	r3, [pc, #36]	; (800470c <HAL_RTC_SetDate+0x108>)
 80046e6:	22ff      	movs	r2, #255	; 0xff
 80046e8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80046ea:	7cfb      	ldrb	r3, [r7, #19]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d103      	bne.n	80046f8 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8004700:	7cfb      	ldrb	r3, [r7, #19]
}
 8004702:	4618      	mov	r0, r3
 8004704:	371c      	adds	r7, #28
 8004706:	46bd      	mov	sp, r7
 8004708:	bd90      	pop	{r4, r7, pc}
 800470a:	bf00      	nop
 800470c:	40002800 	.word	0x40002800

08004710 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800471c:	4b22      	ldr	r3, [pc, #136]	; (80047a8 <HAL_RTC_GetDate+0x98>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004724:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004728:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	0c1b      	lsrs	r3, r3, #16
 800472e:	b2da      	uxtb	r2, r3
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	0a1b      	lsrs	r3, r3, #8
 8004738:	b2db      	uxtb	r3, r3
 800473a:	f003 031f 	and.w	r3, r3, #31
 800473e:	b2da      	uxtb	r2, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800474c:	b2da      	uxtb	r2, r3
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	0b5b      	lsrs	r3, r3, #13
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	b2da      	uxtb	r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d11a      	bne.n	800479e <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	78db      	ldrb	r3, [r3, #3]
 800476c:	4618      	mov	r0, r3
 800476e:	f000 f8d4 	bl	800491a <RTC_Bcd2ToByte>
 8004772:	4603      	mov	r3, r0
 8004774:	461a      	mov	r2, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	785b      	ldrb	r3, [r3, #1]
 800477e:	4618      	mov	r0, r3
 8004780:	f000 f8cb 	bl	800491a <RTC_Bcd2ToByte>
 8004784:	4603      	mov	r3, r0
 8004786:	461a      	mov	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	789b      	ldrb	r3, [r3, #2]
 8004790:	4618      	mov	r0, r3
 8004792:	f000 f8c2 	bl	800491a <RTC_Bcd2ToByte>
 8004796:	4603      	mov	r3, r0
 8004798:	461a      	mov	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40002800 	.word	0x40002800

080047ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80047b4:	4b0f      	ldr	r3, [pc, #60]	; (80047f4 <HAL_RTC_WaitForSynchro+0x48>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	4a0e      	ldr	r2, [pc, #56]	; (80047f4 <HAL_RTC_WaitForSynchro+0x48>)
 80047ba:	f023 0320 	bic.w	r3, r3, #32
 80047be:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80047c0:	f7fd fb5a 	bl	8001e78 <HAL_GetTick>
 80047c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80047c6:	e009      	b.n	80047dc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047c8:	f7fd fb56 	bl	8001e78 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047d6:	d901      	bls.n	80047dc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e006      	b.n	80047ea <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <HAL_RTC_WaitForSynchro+0x48>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0320 	and.w	r3, r3, #32
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0ef      	beq.n	80047c8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40002800 	.word	0x40002800

080047f8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004800:	2300      	movs	r3, #0
 8004802:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004804:	4b15      	ldr	r3, [pc, #84]	; (800485c <RTC_EnterInitMode+0x64>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480c:	2b00      	cmp	r3, #0
 800480e:	d120      	bne.n	8004852 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004810:	4b12      	ldr	r3, [pc, #72]	; (800485c <RTC_EnterInitMode+0x64>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4a11      	ldr	r2, [pc, #68]	; (800485c <RTC_EnterInitMode+0x64>)
 8004816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800481a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800481c:	f7fd fb2c 	bl	8001e78 <HAL_GetTick>
 8004820:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004822:	e00d      	b.n	8004840 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004824:	f7fd fb28 	bl	8001e78 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004832:	d905      	bls.n	8004840 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2203      	movs	r2, #3
 800483c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004840:	4b06      	ldr	r3, [pc, #24]	; (800485c <RTC_EnterInitMode+0x64>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d102      	bne.n	8004852 <RTC_EnterInitMode+0x5a>
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	2b03      	cmp	r3, #3
 8004850:	d1e8      	bne.n	8004824 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004852:	7bfb      	ldrb	r3, [r7, #15]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40002800 	.word	0x40002800

08004860 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800486c:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <RTC_ExitInitMode+0x78>)
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	4a19      	ldr	r2, [pc, #100]	; (80048d8 <RTC_ExitInitMode+0x78>)
 8004872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004876:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004878:	4b17      	ldr	r3, [pc, #92]	; (80048d8 <RTC_ExitInitMode+0x78>)
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10c      	bne.n	800489e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff ff91 	bl	80047ac <HAL_RTC_WaitForSynchro>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d01e      	beq.n	80048ce <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2203      	movs	r2, #3
 8004894:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	73fb      	strb	r3, [r7, #15]
 800489c:	e017      	b.n	80048ce <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800489e:	4b0e      	ldr	r3, [pc, #56]	; (80048d8 <RTC_ExitInitMode+0x78>)
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	4a0d      	ldr	r2, [pc, #52]	; (80048d8 <RTC_ExitInitMode+0x78>)
 80048a4:	f023 0320 	bic.w	r3, r3, #32
 80048a8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7ff ff7e 	bl	80047ac <HAL_RTC_WaitForSynchro>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2203      	movs	r2, #3
 80048ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80048c2:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <RTC_ExitInitMode+0x78>)
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	4a04      	ldr	r2, [pc, #16]	; (80048d8 <RTC_ExitInitMode+0x78>)
 80048c8:	f043 0320 	orr.w	r3, r3, #32
 80048cc:	6193      	str	r3, [r2, #24]
  }

  return status;
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40002800 	.word	0x40002800

080048dc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80048ee:	e005      	b.n	80048fc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3301      	adds	r3, #1
 80048f4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80048f6:	7afb      	ldrb	r3, [r7, #11]
 80048f8:	3b0a      	subs	r3, #10
 80048fa:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80048fc:	7afb      	ldrb	r3, [r7, #11]
 80048fe:	2b09      	cmp	r3, #9
 8004900:	d8f6      	bhi.n	80048f0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	b2da      	uxtb	r2, r3
 800490a:	7afb      	ldrb	r3, [r7, #11]
 800490c:	4313      	orrs	r3, r2
 800490e:	b2db      	uxtb	r3, r3
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr

0800491a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	4603      	mov	r3, r0
 8004922:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	091b      	lsrs	r3, r3, #4
 8004928:	b2db      	uxtb	r3, r3
 800492a:	461a      	mov	r2, r3
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	b2da      	uxtb	r2, r3
 800493a:	79fb      	ldrb	r3, [r7, #7]
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	b2db      	uxtb	r3, r3
 8004942:	4413      	add	r3, r2
 8004944:	b2db      	uxtb	r3, r3
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	bc80      	pop	{r7}
 800494e:	4770      	bx	lr

08004950 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e0c6      	b.n	8004af0 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	2b00      	cmp	r3, #0
 8004968:	d108      	bne.n	800497c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004972:	d009      	beq.n	8004988 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	61da      	str	r2, [r3, #28]
 800497a:	e005      	b.n	8004988 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d106      	bne.n	80049a2 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7fd f88d 	bl	8001abc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2202      	movs	r2, #2
 80049a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049c2:	d902      	bls.n	80049ca <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e002      	b.n	80049d0 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80049d8:	d007      	beq.n	80049ea <HAL_SPI_Init+0x9a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049e2:	d002      	beq.n	80049ea <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2c:	ea42 0103 	orr.w	r1, r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a48:	d11b      	bne.n	8004a82 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10b      	bne.n	8004a6a <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a5a:	d903      	bls.n	8004a64 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	631a      	str	r2, [r3, #48]	; 0x30
 8004a62:	e002      	b.n	8004a6a <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d107      	bne.n	8004a82 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a80:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	0c1b      	lsrs	r3, r3, #16
 8004a88:	f003 0204 	and.w	r2, r3, #4
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004aa8:	ea42 0103 	orr.w	r1, r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ac2:	d105      	bne.n	8004ad0 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	b292      	uxth	r2, r2
 8004ace:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	69da      	ldr	r2, [r3, #28]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ade:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	603b      	str	r3, [r7, #0]
 8004b04:	4613      	mov	r3, r2
 8004b06:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d101      	bne.n	8004b1a <HAL_SPI_Transmit+0x22>
 8004b16:	2302      	movs	r3, #2
 8004b18:	e17a      	b.n	8004e10 <HAL_SPI_Transmit+0x318>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b22:	f7fd f9a9 	bl	8001e78 <HAL_GetTick>
 8004b26:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b28:	88fb      	ldrh	r3, [r7, #6]
 8004b2a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d002      	beq.n	8004b3e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b38:	2302      	movs	r3, #2
 8004b3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b3c:	e15f      	b.n	8004dfe <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <HAL_SPI_Transmit+0x52>
 8004b44:	88fb      	ldrh	r3, [r7, #6]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d102      	bne.n	8004b50 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b4e:	e156      	b.n	8004dfe <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2203      	movs	r2, #3
 8004b54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	88fa      	ldrh	r2, [r7, #6]
 8004b68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	88fa      	ldrh	r2, [r7, #6]
 8004b6e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b9a:	d10f      	bne.n	8004bbc <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004baa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bba:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc4:	d10f      	bne.n	8004be6 <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004be4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d007      	beq.n	8004c04 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c0c:	d94b      	bls.n	8004ca6 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <HAL_SPI_Transmit+0x124>
 8004c16:	8afb      	ldrh	r3, [r7, #22]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d13e      	bne.n	8004c9a <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	881a      	ldrh	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	1c9a      	adds	r2, r3, #2
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c40:	e02b      	b.n	8004c9a <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d112      	bne.n	8004c76 <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	881a      	ldrh	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	1c9a      	adds	r2, r3, #2
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c74:	e011      	b.n	8004c9a <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c76:	f7fd f8ff 	bl	8001e78 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d803      	bhi.n	8004c8e <HAL_SPI_Transmit+0x196>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c8c:	d102      	bne.n	8004c94 <HAL_SPI_Transmit+0x19c>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d102      	bne.n	8004c9a <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c98:	e0b1      	b.n	8004dfe <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1ce      	bne.n	8004c42 <HAL_SPI_Transmit+0x14a>
 8004ca4:	e07c      	b.n	8004da0 <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_SPI_Transmit+0x1bc>
 8004cae:	8afb      	ldrh	r3, [r7, #22]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d170      	bne.n	8004d96 <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d912      	bls.n	8004ce4 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	881a      	ldrh	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	1c9a      	adds	r2, r3, #2
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	3b02      	subs	r3, #2
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ce2:	e058      	b.n	8004d96 <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	330c      	adds	r3, #12
 8004cee:	7812      	ldrb	r2, [r2, #0]
 8004cf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d0a:	e044      	b.n	8004d96 <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d12b      	bne.n	8004d72 <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d912      	bls.n	8004d4a <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	881a      	ldrh	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	1c9a      	adds	r2, r3, #2
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b02      	subs	r3, #2
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d48:	e025      	b.n	8004d96 <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	330c      	adds	r3, #12
 8004d54:	7812      	ldrb	r2, [r2, #0]
 8004d56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d70:	e011      	b.n	8004d96 <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d72:	f7fd f881 	bl	8001e78 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d803      	bhi.n	8004d8a <HAL_SPI_Transmit+0x292>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d88:	d102      	bne.n	8004d90 <HAL_SPI_Transmit+0x298>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d102      	bne.n	8004d96 <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d94:	e033      	b.n	8004dfe <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1b5      	bne.n	8004d0c <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004da8:	d107      	bne.n	8004dba <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004db8:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	6839      	ldr	r1, [r7, #0]
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fe6e 	bl	8005aa0 <SPI_EndRxTxTransaction>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dd8:	2300      	movs	r3, #0
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	613b      	str	r3, [r7, #16]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	613b      	str	r3, [r7, #16]
 8004dec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	77fb      	strb	r3, [r7, #31]
 8004dfa:	e000      	b.n	8004dfe <HAL_SPI_Transmit+0x306>
  }

error:
 8004dfc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3720      	adds	r7, #32
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08c      	sub	sp, #48	; 0x30
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	603b      	str	r3, [r7, #0]
 8004e24:	4613      	mov	r3, r2
 8004e26:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e3e:	d112      	bne.n	8004e66 <HAL_SPI_Receive+0x4e>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10e      	bne.n	8004e66 <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2204      	movs	r2, #4
 8004e4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e50:	88fa      	ldrh	r2, [r7, #6]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	4613      	mov	r3, r2
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 f9c4 	bl	80051ea <HAL_SPI_TransmitReceive>
 8004e62:	4603      	mov	r3, r0
 8004e64:	e1bd      	b.n	80051e2 <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d101      	bne.n	8004e74 <HAL_SPI_Receive+0x5c>
 8004e70:	2302      	movs	r3, #2
 8004e72:	e1b6      	b.n	80051e2 <HAL_SPI_Receive+0x3ca>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e7c:	f7fc fffc 	bl	8001e78 <HAL_GetTick>
 8004e80:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d003      	beq.n	8004e96 <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 8004e8e:	2302      	movs	r3, #2
 8004e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8004e94:	e19b      	b.n	80051ce <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <HAL_SPI_Receive+0x8a>
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d103      	bne.n	8004eaa <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8004ea8:	e191      	b.n	80051ce <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2204      	movs	r2, #4
 8004eae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	88fa      	ldrh	r2, [r7, #6]
 8004ec2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	88fa      	ldrh	r2, [r7, #6]
 8004eca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ef4:	d118      	bne.n	8004f28 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f14:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f30:	d908      	bls.n	8004f44 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f40:	605a      	str	r2, [r3, #4]
 8004f42:	e007      	b.n	8004f54 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f52:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f5c:	d10f      	bne.n	8004f7e <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f7c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f88:	2b40      	cmp	r3, #64	; 0x40
 8004f8a:	d007      	beq.n	8004f9c <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f9a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fa4:	d869      	bhi.n	800507a <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004fa6:	e031      	b.n	800500c <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d117      	bne.n	8004fe6 <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f103 020c 	add.w	r2, r3, #12
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	7812      	ldrb	r2, [r2, #0]
 8004fc4:	b2d2      	uxtb	r2, r2
 8004fc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004fe4:	e012      	b.n	800500c <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fe6:	f7fc ff47 	bl	8001e78 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d803      	bhi.n	8004ffe <HAL_SPI_Receive+0x1e6>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ffc:	d102      	bne.n	8005004 <HAL_SPI_Receive+0x1ec>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d103      	bne.n	800500c <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800500a:	e0e0      	b.n	80051ce <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005012:	b29b      	uxth	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1c7      	bne.n	8004fa8 <HAL_SPI_Receive+0x190>
 8005018:	e035      	b.n	8005086 <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b01      	cmp	r3, #1
 8005026:	d115      	bne.n	8005054 <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	b292      	uxth	r2, r2
 8005034:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	1c9a      	adds	r2, r3, #2
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005052:	e012      	b.n	800507a <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005054:	f7fc ff10 	bl	8001e78 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d803      	bhi.n	800506c <HAL_SPI_Receive+0x254>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800506a:	d102      	bne.n	8005072 <HAL_SPI_Receive+0x25a>
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d103      	bne.n	800507a <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005078:	e0a9      	b.n	80051ce <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005080:	b29b      	uxth	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1c9      	bne.n	800501a <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800508e:	d178      	bne.n	8005182 <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800509e:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2201      	movs	r2, #1
 80050a8:	2101      	movs	r1, #1
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 fb82 	bl	80057b4 <SPI_WaitFlagStateUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 80050bc:	e087      	b.n	80051ce <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050c6:	d907      	bls.n	80050d8 <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	b292      	uxth	r2, r2
 80050d4:	801a      	strh	r2, [r3, #0]
 80050d6:	e008      	b.n	80050ea <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f103 020c 	add.w	r2, r3, #12
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e4:	7812      	ldrb	r2, [r2, #0]
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2201      	movs	r2, #1
 80050f2:	2101      	movs	r1, #1
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 fb5d 	bl	80057b4 <SPI_WaitFlagStateUntilTimeout>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d009      	beq.n	8005114 <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005104:	f043 0202 	orr.w	r2, r3, #2
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8005112:	e05c      	b.n	80051ce <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800511c:	d105      	bne.n	800512a <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	e02b      	b.n	8005182 <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	330c      	adds	r3, #12
 8005130:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800513a:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005144:	d11d      	bne.n	8005182 <HAL_SPI_Receive+0x36a>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	2b02      	cmp	r3, #2
 800514c:	d119      	bne.n	8005182 <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2201      	movs	r2, #1
 8005156:	2101      	movs	r1, #1
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 fb2b 	bl	80057b4 <SPI_WaitFlagStateUntilTimeout>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d009      	beq.n	8005178 <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005168:	f043 0202 	orr.w	r2, r3, #2
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005176:	e02a      	b.n	80051ce <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	b2db      	uxtb	r3, r3
 800517e:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8005180:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005182:	6a3a      	ldr	r2, [r7, #32]
 8005184:	6839      	ldr	r1, [r7, #0]
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 fc32 	bl	80059f0 <SPI_EndRxTransaction>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2b10      	cmp	r3, #16
 80051a4:	d10a      	bne.n	80051bc <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051aa:	f043 0202 	orr.w	r2, r3, #2
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80051ba:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80051ca:	e000      	b.n	80051ce <HAL_SPI_Receive+0x3b6>
  }

error :
 80051cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80051de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3728      	adds	r7, #40	; 0x28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b092      	sub	sp, #72	; 0x48
 80051ee:	af02      	add	r7, sp, #8
 80051f0:	60f8      	str	r0, [r7, #12]
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	607a      	str	r2, [r7, #4]
 80051f6:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80051fc:	2300      	movs	r3, #0
 80051fe:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005200:	2301      	movs	r3, #1
 8005202:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005204:	2300      	movs	r3, #0
 8005206:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_SPI_TransmitReceive+0x2e>
 8005214:	2302      	movs	r3, #2
 8005216:	e2c8      	b.n	80057aa <HAL_SPI_TransmitReceive+0x5c0>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005220:	f7fc fe2a 	bl	8001e78 <HAL_GetTick>
 8005224:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800522c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 8005236:	887b      	ldrh	r3, [r7, #2]
 8005238:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 800523a:	887b      	ldrh	r3, [r7, #2]
 800523c:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800524e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005252:	2b01      	cmp	r3, #1
 8005254:	d00f      	beq.n	8005276 <HAL_SPI_TransmitReceive+0x8c>
 8005256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005258:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800525c:	d107      	bne.n	800526e <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d103      	bne.n	800526e <HAL_SPI_TransmitReceive+0x84>
 8005266:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800526a:	2b04      	cmp	r3, #4
 800526c:	d003      	beq.n	8005276 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 800526e:	2302      	movs	r3, #2
 8005270:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8005274:	e28f      	b.n	8005796 <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <HAL_SPI_TransmitReceive+0x9e>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <HAL_SPI_TransmitReceive+0x9e>
 8005282:	887b      	ldrh	r3, [r7, #2]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d103      	bne.n	8005290 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 800528e:	e282      	b.n	8005796 <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b04      	cmp	r3, #4
 800529a:	d003      	beq.n	80052a4 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2205      	movs	r2, #5
 80052a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	887a      	ldrh	r2, [r7, #2]
 80052b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	887a      	ldrh	r2, [r7, #2]
 80052bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	887a      	ldrh	r2, [r7, #2]
 80052ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	887a      	ldrh	r2, [r7, #2]
 80052d0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e6:	d10f      	bne.n	8005308 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005306:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005310:	d802      	bhi.n	8005318 <HAL_SPI_TransmitReceive+0x12e>
 8005312:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005314:	2b01      	cmp	r3, #1
 8005316:	d908      	bls.n	800532a <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005326:	605a      	str	r2, [r3, #4]
 8005328:	e007      	b.n	800533a <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005338:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005344:	2b40      	cmp	r3, #64	; 0x40
 8005346:	d007      	beq.n	8005358 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005356:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005360:	f240 80a4 	bls.w	80054ac <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <HAL_SPI_TransmitReceive+0x18a>
 800536c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800536e:	2b01      	cmp	r3, #1
 8005370:	f040 808e 	bne.w	8005490 <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005378:	881a      	ldrh	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	1c9a      	adds	r2, r3, #2
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800538e:	b29b      	uxth	r3, r3
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005398:	e07a      	b.n	8005490 <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d13f      	bne.n	8005428 <HAL_SPI_TransmitReceive+0x23e>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d03a      	beq.n	8005428 <HAL_SPI_TransmitReceive+0x23e>
 80053b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d137      	bne.n	8005428 <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	881a      	ldrh	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c8:	1c9a      	adds	r2, r3, #2
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d11e      	bne.n	8005428 <HAL_SPI_TransmitReceive+0x23e>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053f2:	d119      	bne.n	8005428 <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	f003 0304 	and.w	r3, r3, #4
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10c      	bne.n	8005418 <HAL_SPI_TransmitReceive+0x22e>
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b00      	cmp	r3, #0
 8005406:	d007      	beq.n	8005418 <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005416:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005426:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b01      	cmp	r3, #1
 8005434:	d11c      	bne.n	8005470 <HAL_SPI_TransmitReceive+0x286>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d016      	beq.n	8005470 <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544c:	b292      	uxth	r2, r2
 800544e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	1c9a      	adds	r2, r3, #2
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005460:	b29b      	uxth	r3, r3
 8005462:	3b01      	subs	r3, #1
 8005464:	b29a      	uxth	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800546c:	2301      	movs	r3, #1
 800546e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005470:	f7fc fd02 	bl	8001e78 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800547c:	429a      	cmp	r2, r3
 800547e:	d807      	bhi.n	8005490 <HAL_SPI_TransmitReceive+0x2a6>
 8005480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005482:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005486:	d003      	beq.n	8005490 <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 800548e:	e182      	b.n	8005796 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005494:	b29b      	uxth	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	f47f af7f 	bne.w	800539a <HAL_SPI_TransmitReceive+0x1b0>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f47f af78 	bne.w	800539a <HAL_SPI_TransmitReceive+0x1b0>
 80054aa:	e103      	b.n	80056b4 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <HAL_SPI_TransmitReceive+0x2d2>
 80054b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	f040 80ef 	bne.w	800569a <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d912      	bls.n	80054ec <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ca:	881a      	ldrh	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d6:	1c9a      	adds	r2, r3, #2
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	3b02      	subs	r3, #2
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054ea:	e0d6      	b.n	800569a <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	330c      	adds	r3, #12
 80054f6:	7812      	ldrb	r2, [r2, #0]
 80054f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005508:	b29b      	uxth	r3, r3
 800550a:	3b01      	subs	r3, #1
 800550c:	b29a      	uxth	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005512:	e0c2      	b.n	800569a <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b02      	cmp	r3, #2
 8005520:	d158      	bne.n	80055d4 <HAL_SPI_TransmitReceive+0x3ea>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d053      	beq.n	80055d4 <HAL_SPI_TransmitReceive+0x3ea>
 800552c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800552e:	2b01      	cmp	r3, #1
 8005530:	d150      	bne.n	80055d4 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005536:	b29b      	uxth	r3, r3
 8005538:	2b01      	cmp	r3, #1
 800553a:	d912      	bls.n	8005562 <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	881a      	ldrh	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	1c9a      	adds	r2, r3, #2
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b02      	subs	r3, #2
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005560:	e012      	b.n	8005588 <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	330c      	adds	r3, #12
 800556c:	7812      	ldrb	r2, [r2, #0]
 800556e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d11e      	bne.n	80055d4 <HAL_SPI_TransmitReceive+0x3ea>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800559e:	d119      	bne.n	80055d4 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	f003 0304 	and.w	r3, r3, #4
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10c      	bne.n	80055c4 <HAL_SPI_TransmitReceive+0x3da>
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	f003 0308 	and.w	r3, r3, #8
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d007      	beq.n	80055c4 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055c2:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055d2:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d148      	bne.n	8005674 <HAL_SPI_TransmitReceive+0x48a>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d042      	beq.n	8005674 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d923      	bls.n	8005642 <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005604:	b292      	uxth	r2, r2
 8005606:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	1c9a      	adds	r2, r3, #2
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005618:	b29b      	uxth	r3, r3
 800561a:	3b02      	subs	r3, #2
 800561c:	b29a      	uxth	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800562a:	b29b      	uxth	r3, r3
 800562c:	2b01      	cmp	r3, #1
 800562e:	d81f      	bhi.n	8005670 <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800563e:	605a      	str	r2, [r3, #4]
 8005640:	e016      	b.n	8005670 <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f103 020c 	add.w	r2, r3, #12
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	7812      	ldrb	r2, [r2, #0]
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005664:	b29b      	uxth	r3, r3
 8005666:	3b01      	subs	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005670:	2301      	movs	r3, #1
 8005672:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005674:	f7fc fc00 	bl	8001e78 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005680:	429a      	cmp	r2, r3
 8005682:	d803      	bhi.n	800568c <HAL_SPI_TransmitReceive+0x4a2>
 8005684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005686:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800568a:	d102      	bne.n	8005692 <HAL_SPI_TransmitReceive+0x4a8>
 800568c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800568e:	2b00      	cmp	r3, #0
 8005690:	d103      	bne.n	800569a <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8005698:	e07d      	b.n	8005796 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800569e:	b29b      	uxth	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f47f af37 	bne.w	8005514 <HAL_SPI_TransmitReceive+0x32a>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f47f af30 	bne.w	8005514 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056bc:	d146      	bne.n	800574c <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80056be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056c4:	2201      	movs	r2, #1
 80056c6:	2101      	movs	r1, #1
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 f873 	bl	80057b4 <SPI_WaitFlagStateUntilTimeout>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d009      	beq.n	80056e8 <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d8:	f043 0202 	orr.w	r2, r3, #2
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 80056e6:	e056      	b.n	8005796 <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80056f0:	d105      	bne.n	80056fe <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	e026      	b.n	800574c <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	330c      	adds	r3, #12
 8005704:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	b2db      	uxtb	r3, r3
 800570c:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800570e:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	2b02      	cmp	r3, #2
 8005716:	d119      	bne.n	800574c <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800571e:	2201      	movs	r2, #1
 8005720:	2101      	movs	r1, #1
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 f846 	bl	80057b4 <SPI_WaitFlagStateUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d009      	beq.n	8005742 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005732:	f043 0202 	orr.w	r2, r3, #2
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8005740:	e029      	b.n	8005796 <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	b2db      	uxtb	r3, r3
 8005748:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 800574a:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 0310 	and.w	r3, r3, #16
 8005756:	2b10      	cmp	r3, #16
 8005758:	d10d      	bne.n	8005776 <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800575e:	f043 0202 	orr.w	r2, r3, #2
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800576e:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005778:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 f990 	bl	8005aa0 <SPI_EndRxTxTransaction>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d006      	beq.n	8005794 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2220      	movs	r2, #32
 8005790:	661a      	str	r2, [r3, #96]	; 0x60
 8005792:	e000      	b.n	8005796 <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 8005794:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80057a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3740      	adds	r7, #64	; 0x40
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b088      	sub	sp, #32
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	603b      	str	r3, [r7, #0]
 80057c0:	4613      	mov	r3, r2
 80057c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80057c4:	f7fc fb58 	bl	8001e78 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057cc:	1a9b      	subs	r3, r3, r2
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	4413      	add	r3, r2
 80057d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80057d4:	f7fc fb50 	bl	8001e78 <HAL_GetTick>
 80057d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057da:	4b39      	ldr	r3, [pc, #228]	; (80058c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	015b      	lsls	r3, r3, #5
 80057e0:	0d1b      	lsrs	r3, r3, #20
 80057e2:	69fa      	ldr	r2, [r7, #28]
 80057e4:	fb02 f303 	mul.w	r3, r2, r3
 80057e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057ea:	e054      	b.n	8005896 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057f2:	d050      	beq.n	8005896 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057f4:	f7fc fb40 	bl	8001e78 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	69fa      	ldr	r2, [r7, #28]
 8005800:	429a      	cmp	r2, r3
 8005802:	d902      	bls.n	800580a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d13d      	bne.n	8005886 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005818:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005822:	d111      	bne.n	8005848 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800582c:	d004      	beq.n	8005838 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005836:	d107      	bne.n	8005848 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005846:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005850:	d10f      	bne.n	8005872 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005870:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e017      	b.n	80058b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	3b01      	subs	r3, #1
 8005894:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4013      	ands	r3, r2
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	bf0c      	ite	eq
 80058a6:	2301      	moveq	r3, #1
 80058a8:	2300      	movne	r3, #0
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	461a      	mov	r2, r3
 80058ae:	79fb      	ldrb	r3, [r7, #7]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d19b      	bne.n	80057ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3720      	adds	r7, #32
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	2000000c 	.word	0x2000000c

080058c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08a      	sub	sp, #40	; 0x28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
 80058d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80058d2:	2300      	movs	r3, #0
 80058d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80058d6:	f7fc facf 	bl	8001e78 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058de:	1a9b      	subs	r3, r3, r2
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	4413      	add	r3, r2
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80058e6:	f7fc fac7 	bl	8001e78 <HAL_GetTick>
 80058ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	330c      	adds	r3, #12
 80058f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80058f4:	4b3d      	ldr	r3, [pc, #244]	; (80059ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	00da      	lsls	r2, r3, #3
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	0d1b      	lsrs	r3, r3, #20
 8005904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005906:	fb02 f303 	mul.w	r3, r2, r3
 800590a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800590c:	e060      	b.n	80059d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005914:	d107      	bne.n	8005926 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005924:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800592c:	d050      	beq.n	80059d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800592e:	f7fc faa3 	bl	8001e78 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800593a:	429a      	cmp	r2, r3
 800593c:	d902      	bls.n	8005944 <SPI_WaitFifoStateUntilTimeout+0x80>
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	2b00      	cmp	r3, #0
 8005942:	d13d      	bne.n	80059c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005952:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800595c:	d111      	bne.n	8005982 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005966:	d004      	beq.n	8005972 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005970:	d107      	bne.n	8005982 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005980:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800598a:	d10f      	bne.n	80059ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e010      	b.n	80059e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	4013      	ands	r3, r2
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d196      	bne.n	800590e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3728      	adds	r7, #40	; 0x28
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	2000000c 	.word	0x2000000c

080059f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af02      	add	r7, sp, #8
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a04:	d111      	bne.n	8005a2a <SPI_EndRxTransaction+0x3a>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a0e:	d004      	beq.n	8005a1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a18:	d107      	bne.n	8005a2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a28:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2200      	movs	r2, #0
 8005a32:	2180      	movs	r1, #128	; 0x80
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f7ff febd 	bl	80057b4 <SPI_WaitFlagStateUntilTimeout>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d007      	beq.n	8005a50 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a44:	f043 0220 	orr.w	r2, r3, #32
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e023      	b.n	8005a98 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a58:	d11d      	bne.n	8005a96 <SPI_EndRxTransaction+0xa6>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a62:	d004      	beq.n	8005a6e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a6c:	d113      	bne.n	8005a96 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f7ff ff22 	bl	80058c4 <SPI_WaitFifoStateUntilTimeout>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d007      	beq.n	8005a96 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a8a:	f043 0220 	orr.w	r2, r3, #32
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e000      	b.n	8005a98 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af02      	add	r7, sp, #8
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f7ff ff03 	bl	80058c4 <SPI_WaitFifoStateUntilTimeout>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d007      	beq.n	8005ad4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac8:	f043 0220 	orr.w	r2, r3, #32
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e027      	b.n	8005b24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2200      	movs	r2, #0
 8005adc:	2180      	movs	r1, #128	; 0x80
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f7ff fe68 	bl	80057b4 <SPI_WaitFlagStateUntilTimeout>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d007      	beq.n	8005afa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aee:	f043 0220 	orr.w	r2, r3, #32
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e014      	b.n	8005b24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f7ff fedc 	bl	80058c4 <SPI_WaitFifoStateUntilTimeout>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d007      	beq.n	8005b22 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b16:	f043 0220 	orr.w	r2, r3, #32
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e000      	b.n	8005b24 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e049      	b.n	8005bd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d106      	bne.n	8005b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7fb fffa 	bl	8001b4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3304      	adds	r3, #4
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	f000 f944 	bl	8005df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d001      	beq.n	8005bf4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e02e      	b.n	8005c52 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a16      	ldr	r2, [pc, #88]	; (8005c5c <HAL_TIM_Base_Start+0x80>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d004      	beq.n	8005c10 <HAL_TIM_Base_Start+0x34>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0e:	d115      	bne.n	8005c3c <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	4b12      	ldr	r3, [pc, #72]	; (8005c60 <HAL_TIM_Base_Start+0x84>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2b06      	cmp	r3, #6
 8005c20:	d015      	beq.n	8005c4e <HAL_TIM_Base_Start+0x72>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c28:	d011      	beq.n	8005c4e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 0201 	orr.w	r2, r2, #1
 8005c38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c3a:	e008      	b.n	8005c4e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0201 	orr.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	e000      	b.n	8005c50 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bc80      	pop	{r7}
 8005c5a:	4770      	bx	lr
 8005c5c:	40012c00 	.word	0x40012c00
 8005c60:	00010007 	.word	0x00010007

08005c64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_TIM_ConfigClockSource+0x1c>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e0b6      	b.n	8005dee <HAL_TIM_ConfigClockSource+0x18a>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005c9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005caa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cbc:	d03e      	beq.n	8005d3c <HAL_TIM_ConfigClockSource+0xd8>
 8005cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cc2:	f200 8087 	bhi.w	8005dd4 <HAL_TIM_ConfigClockSource+0x170>
 8005cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cca:	f000 8086 	beq.w	8005dda <HAL_TIM_ConfigClockSource+0x176>
 8005cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd2:	d87f      	bhi.n	8005dd4 <HAL_TIM_ConfigClockSource+0x170>
 8005cd4:	2b70      	cmp	r3, #112	; 0x70
 8005cd6:	d01a      	beq.n	8005d0e <HAL_TIM_ConfigClockSource+0xaa>
 8005cd8:	2b70      	cmp	r3, #112	; 0x70
 8005cda:	d87b      	bhi.n	8005dd4 <HAL_TIM_ConfigClockSource+0x170>
 8005cdc:	2b60      	cmp	r3, #96	; 0x60
 8005cde:	d050      	beq.n	8005d82 <HAL_TIM_ConfigClockSource+0x11e>
 8005ce0:	2b60      	cmp	r3, #96	; 0x60
 8005ce2:	d877      	bhi.n	8005dd4 <HAL_TIM_ConfigClockSource+0x170>
 8005ce4:	2b50      	cmp	r3, #80	; 0x50
 8005ce6:	d03c      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0xfe>
 8005ce8:	2b50      	cmp	r3, #80	; 0x50
 8005cea:	d873      	bhi.n	8005dd4 <HAL_TIM_ConfigClockSource+0x170>
 8005cec:	2b40      	cmp	r3, #64	; 0x40
 8005cee:	d058      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x13e>
 8005cf0:	2b40      	cmp	r3, #64	; 0x40
 8005cf2:	d86f      	bhi.n	8005dd4 <HAL_TIM_ConfigClockSource+0x170>
 8005cf4:	2b30      	cmp	r3, #48	; 0x30
 8005cf6:	d064      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0x15e>
 8005cf8:	2b30      	cmp	r3, #48	; 0x30
 8005cfa:	d86b      	bhi.n	8005dd4 <HAL_TIM_ConfigClockSource+0x170>
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d060      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0x15e>
 8005d00:	2b20      	cmp	r3, #32
 8005d02:	d867      	bhi.n	8005dd4 <HAL_TIM_ConfigClockSource+0x170>
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d05c      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0x15e>
 8005d08:	2b10      	cmp	r3, #16
 8005d0a:	d05a      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0x15e>
 8005d0c:	e062      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d1e:	f000 f946 	bl	8005fae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	609a      	str	r2, [r3, #8]
      break;
 8005d3a:	e04f      	b.n	8005ddc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d4c:	f000 f92f 	bl	8005fae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689a      	ldr	r2, [r3, #8]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d5e:	609a      	str	r2, [r3, #8]
      break;
 8005d60:	e03c      	b.n	8005ddc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f000 f8a4 	bl	8005ebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2150      	movs	r1, #80	; 0x50
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 f8fb 	bl	8005f76 <TIM_ITRx_SetConfig>
      break;
 8005d80:	e02c      	b.n	8005ddc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f000 f8c2 	bl	8005f18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2160      	movs	r1, #96	; 0x60
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 f8eb 	bl	8005f76 <TIM_ITRx_SetConfig>
      break;
 8005da0:	e01c      	b.n	8005ddc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dae:	461a      	mov	r2, r3
 8005db0:	f000 f884 	bl	8005ebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2140      	movs	r1, #64	; 0x40
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 f8db 	bl	8005f76 <TIM_ITRx_SetConfig>
      break;
 8005dc0:	e00c      	b.n	8005ddc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4610      	mov	r0, r2
 8005dce:	f000 f8d2 	bl	8005f76 <TIM_ITRx_SetConfig>
      break;
 8005dd2:	e003      	b.n	8005ddc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd8:	e000      	b.n	8005ddc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005dda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
	...

08005df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a29      	ldr	r2, [pc, #164]	; (8005eb0 <TIM_Base_SetConfig+0xb8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d003      	beq.n	8005e18 <TIM_Base_SetConfig+0x20>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e16:	d108      	bne.n	8005e2a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a20      	ldr	r2, [pc, #128]	; (8005eb0 <TIM_Base_SetConfig+0xb8>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00b      	beq.n	8005e4a <TIM_Base_SetConfig+0x52>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e38:	d007      	beq.n	8005e4a <TIM_Base_SetConfig+0x52>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a1d      	ldr	r2, [pc, #116]	; (8005eb4 <TIM_Base_SetConfig+0xbc>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d003      	beq.n	8005e4a <TIM_Base_SetConfig+0x52>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a1c      	ldr	r2, [pc, #112]	; (8005eb8 <TIM_Base_SetConfig+0xc0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d108      	bne.n	8005e5c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a0b      	ldr	r2, [pc, #44]	; (8005eb0 <TIM_Base_SetConfig+0xb8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d007      	beq.n	8005e98 <TIM_Base_SetConfig+0xa0>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a0a      	ldr	r2, [pc, #40]	; (8005eb4 <TIM_Base_SetConfig+0xbc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d003      	beq.n	8005e98 <TIM_Base_SetConfig+0xa0>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a09      	ldr	r2, [pc, #36]	; (8005eb8 <TIM_Base_SetConfig+0xc0>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d103      	bne.n	8005ea0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	691a      	ldr	r2, [r3, #16]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	615a      	str	r2, [r3, #20]
}
 8005ea6:	bf00      	nop
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bc80      	pop	{r7}
 8005eae:	4770      	bx	lr
 8005eb0:	40012c00 	.word	0x40012c00
 8005eb4:	40014400 	.word	0x40014400
 8005eb8:	40014800 	.word	0x40014800

08005ebc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	f023 0201 	bic.w	r2, r3, #1
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	011b      	lsls	r3, r3, #4
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f023 030a 	bic.w	r3, r3, #10
 8005ef8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	621a      	str	r2, [r3, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bc80      	pop	{r7}
 8005f16:	4770      	bx	lr

08005f18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	f023 0210 	bic.w	r2, r3, #16
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	031b      	lsls	r3, r3, #12
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	621a      	str	r2, [r3, #32]
}
 8005f6c:	bf00      	nop
 8005f6e:	371c      	adds	r7, #28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr

08005f76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b085      	sub	sp, #20
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	f043 0307 	orr.w	r3, r3, #7
 8005f9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	609a      	str	r2, [r3, #8]
}
 8005fa4:	bf00      	nop
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bc80      	pop	{r7}
 8005fac:	4770      	bx	lr

08005fae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b087      	sub	sp, #28
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	60f8      	str	r0, [r7, #12]
 8005fb6:	60b9      	str	r1, [r7, #8]
 8005fb8:	607a      	str	r2, [r7, #4]
 8005fba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fc8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	021a      	lsls	r2, r3, #8
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	609a      	str	r2, [r3, #8]
}
 8005fe2:	bf00      	nop
 8005fe4:	371c      	adds	r7, #28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bc80      	pop	{r7}
 8005fea:	4770      	bx	lr

08005fec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d101      	bne.n	8006004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006000:	2302      	movs	r3, #2
 8006002:	e04a      	b.n	800609a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a1e      	ldr	r2, [pc, #120]	; (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d108      	bne.n	8006040 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006034:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	4313      	orrs	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006046:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	4313      	orrs	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a11      	ldr	r2, [pc, #68]	; (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d004      	beq.n	800606e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606c:	d10c      	bne.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006074:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	4313      	orrs	r3, r2
 800607e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	bc80      	pop	{r7}
 80060a2:	4770      	bx	lr
 80060a4:	40012c00 	.word	0x40012c00

080060a8 <LL_RCC_GetUSARTClockSource>:
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80060b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	401a      	ands	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	041b      	lsls	r3, r3, #16
 80060c0:	4313      	orrs	r3, r2
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bc80      	pop	{r7}
 80060ca:	4770      	bx	lr

080060cc <LL_RCC_GetLPUARTClockSource>:
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80060d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4013      	ands	r3, r2
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bc80      	pop	{r7}
 80060e8:	4770      	bx	lr

080060ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b082      	sub	sp, #8
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e042      	b.n	8006182 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006102:	2b00      	cmp	r3, #0
 8006104:	d106      	bne.n	8006114 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7fb fd30 	bl	8001b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2224      	movs	r2, #36	; 0x24
 8006118:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 0201 	bic.w	r2, r2, #1
 800612a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fcb9 	bl	8006aa4 <UART_SetConfig>
 8006132:	4603      	mov	r3, r0
 8006134:	2b01      	cmp	r3, #1
 8006136:	d101      	bne.n	800613c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e022      	b.n	8006182 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 ff21 	bl	8006f8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006158:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006168:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f042 0201 	orr.w	r2, r2, #1
 8006178:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 ffa7 	bl	80070ce <UART_CheckIdleState>
 8006180:	4603      	mov	r3, r0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b08a      	sub	sp, #40	; 0x28
 800618e:	af02      	add	r7, sp, #8
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	603b      	str	r3, [r7, #0]
 8006196:	4613      	mov	r3, r2
 8006198:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a0:	2b20      	cmp	r3, #32
 80061a2:	d173      	bne.n	800628c <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <HAL_UART_Transmit+0x26>
 80061aa:	88fb      	ldrh	r3, [r7, #6]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e06c      	b.n	800628e <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2221      	movs	r2, #33	; 0x21
 80061c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061c4:	f7fb fe58 	bl	8001e78 <HAL_GetTick>
 80061c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	88fa      	ldrh	r2, [r7, #6]
 80061ce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	88fa      	ldrh	r2, [r7, #6]
 80061d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e2:	d108      	bne.n	80061f6 <HAL_UART_Transmit+0x6c>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d104      	bne.n	80061f6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80061ec:	2300      	movs	r3, #0
 80061ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	61bb      	str	r3, [r7, #24]
 80061f4:	e003      	b.n	80061fe <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061fa:	2300      	movs	r3, #0
 80061fc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061fe:	e02c      	b.n	800625a <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	2200      	movs	r2, #0
 8006208:	2180      	movs	r1, #128	; 0x80
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 ffad 	bl	800716a <UART_WaitOnFlagUntilTimeout>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e039      	b.n	800628e <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10b      	bne.n	8006238 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	461a      	mov	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800622e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	3302      	adds	r3, #2
 8006234:	61bb      	str	r3, [r7, #24]
 8006236:	e007      	b.n	8006248 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	781a      	ldrb	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	3301      	adds	r3, #1
 8006246:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800624e:	b29b      	uxth	r3, r3
 8006250:	3b01      	subs	r3, #1
 8006252:	b29a      	uxth	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006260:	b29b      	uxth	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1cc      	bne.n	8006200 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2200      	movs	r2, #0
 800626e:	2140      	movs	r1, #64	; 0x40
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 ff7a 	bl	800716a <UART_WaitOnFlagUntilTimeout>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e006      	b.n	800628e <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2220      	movs	r2, #32
 8006284:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006288:	2300      	movs	r3, #0
 800628a:	e000      	b.n	800628e <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800628c:	2302      	movs	r3, #2
  }
}
 800628e:	4618      	mov	r0, r3
 8006290:	3720      	adds	r7, #32
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b08a      	sub	sp, #40	; 0x28
 800629a:	af02      	add	r7, sp, #8
 800629c:	60f8      	str	r0, [r7, #12]
 800629e:	60b9      	str	r1, [r7, #8]
 80062a0:	603b      	str	r3, [r7, #0]
 80062a2:	4613      	mov	r3, r2
 80062a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	f040 80b1 	bne.w	8006414 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <HAL_UART_Receive+0x28>
 80062b8:	88fb      	ldrh	r3, [r7, #6]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e0a9      	b.n	8006416 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2222      	movs	r2, #34	; 0x22
 80062ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062d8:	f7fb fdce 	bl	8001e78 <HAL_GetTick>
 80062dc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	88fa      	ldrh	r2, [r7, #6]
 80062e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	88fa      	ldrh	r2, [r7, #6]
 80062ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f6:	d10e      	bne.n	8006316 <HAL_UART_Receive+0x80>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d105      	bne.n	800630c <HAL_UART_Receive+0x76>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006306:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800630a:	e02d      	b.n	8006368 <HAL_UART_Receive+0xd2>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	22ff      	movs	r2, #255	; 0xff
 8006310:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006314:	e028      	b.n	8006368 <HAL_UART_Receive+0xd2>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10d      	bne.n	800633a <HAL_UART_Receive+0xa4>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d104      	bne.n	8006330 <HAL_UART_Receive+0x9a>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	22ff      	movs	r2, #255	; 0xff
 800632a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800632e:	e01b      	b.n	8006368 <HAL_UART_Receive+0xd2>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	227f      	movs	r2, #127	; 0x7f
 8006334:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006338:	e016      	b.n	8006368 <HAL_UART_Receive+0xd2>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006342:	d10d      	bne.n	8006360 <HAL_UART_Receive+0xca>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d104      	bne.n	8006356 <HAL_UART_Receive+0xc0>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	227f      	movs	r2, #127	; 0x7f
 8006350:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006354:	e008      	b.n	8006368 <HAL_UART_Receive+0xd2>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	223f      	movs	r2, #63	; 0x3f
 800635a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800635e:	e003      	b.n	8006368 <HAL_UART_Receive+0xd2>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800636e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006378:	d108      	bne.n	800638c <HAL_UART_Receive+0xf6>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d104      	bne.n	800638c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006382:	2300      	movs	r3, #0
 8006384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	61bb      	str	r3, [r7, #24]
 800638a:	e003      	b.n	8006394 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006390:	2300      	movs	r3, #0
 8006392:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006394:	e032      	b.n	80063fc <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2200      	movs	r2, #0
 800639e:	2120      	movs	r1, #32
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 fee2 	bl	800716a <UART_WaitOnFlagUntilTimeout>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e032      	b.n	8006416 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10c      	bne.n	80063d0 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	b29a      	uxth	r2, r3
 80063be:	8a7b      	ldrh	r3, [r7, #18]
 80063c0:	4013      	ands	r3, r2
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	3302      	adds	r3, #2
 80063cc:	61bb      	str	r3, [r7, #24]
 80063ce:	e00c      	b.n	80063ea <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	8a7b      	ldrh	r3, [r7, #18]
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	4013      	ands	r3, r2
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	3301      	adds	r3, #1
 80063e8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	3b01      	subs	r3, #1
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006402:	b29b      	uxth	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1c6      	bne.n	8006396 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2220      	movs	r2, #32
 800640c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	e000      	b.n	8006416 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8006414:	2302      	movs	r3, #2
  }
}
 8006416:	4618      	mov	r0, r3
 8006418:	3720      	adds	r7, #32
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b0ba      	sub	sp, #232	; 0xe8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006446:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800644a:	f640 030f 	movw	r3, #2063	; 0x80f
 800644e:	4013      	ands	r3, r2
 8006450:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006454:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006458:	2b00      	cmp	r3, #0
 800645a:	d11b      	bne.n	8006494 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800645c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006460:	f003 0320 	and.w	r3, r3, #32
 8006464:	2b00      	cmp	r3, #0
 8006466:	d015      	beq.n	8006494 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800646c:	f003 0320 	and.w	r3, r3, #32
 8006470:	2b00      	cmp	r3, #0
 8006472:	d105      	bne.n	8006480 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d009      	beq.n	8006494 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 82e3 	beq.w	8006a50 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	4798      	blx	r3
      }
      return;
 8006492:	e2dd      	b.n	8006a50 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 8123 	beq.w	80066e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800649e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80064a2:	4b8d      	ldr	r3, [pc, #564]	; (80066d8 <HAL_UART_IRQHandler+0x2b8>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d106      	bne.n	80064b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80064aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80064ae:	4b8b      	ldr	r3, [pc, #556]	; (80066dc <HAL_UART_IRQHandler+0x2bc>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 8116 	beq.w	80066e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d011      	beq.n	80064e8 <HAL_UART_IRQHandler+0xc8>
 80064c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00b      	beq.n	80064e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2201      	movs	r2, #1
 80064d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064de:	f043 0201 	orr.w	r2, r3, #1
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d011      	beq.n	8006518 <HAL_UART_IRQHandler+0xf8>
 80064f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00b      	beq.n	8006518 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2202      	movs	r2, #2
 8006506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800650e:	f043 0204 	orr.w	r2, r3, #4
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b00      	cmp	r3, #0
 8006522:	d011      	beq.n	8006548 <HAL_UART_IRQHandler+0x128>
 8006524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00b      	beq.n	8006548 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2204      	movs	r2, #4
 8006536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653e:	f043 0202 	orr.w	r2, r3, #2
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800654c:	f003 0308 	and.w	r3, r3, #8
 8006550:	2b00      	cmp	r3, #0
 8006552:	d017      	beq.n	8006584 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006558:	f003 0320 	and.w	r3, r3, #32
 800655c:	2b00      	cmp	r3, #0
 800655e:	d105      	bne.n	800656c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006560:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006564:	4b5c      	ldr	r3, [pc, #368]	; (80066d8 <HAL_UART_IRQHandler+0x2b8>)
 8006566:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00b      	beq.n	8006584 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2208      	movs	r2, #8
 8006572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800657a:	f043 0208 	orr.w	r2, r3, #8
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800658c:	2b00      	cmp	r3, #0
 800658e:	d012      	beq.n	80065b6 <HAL_UART_IRQHandler+0x196>
 8006590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006594:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00c      	beq.n	80065b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ac:	f043 0220 	orr.w	r2, r3, #32
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 8249 	beq.w	8006a54 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d013      	beq.n	80065f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d105      	bne.n	80065e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d007      	beq.n	80065f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660a:	2b40      	cmp	r3, #64	; 0x40
 800660c:	d005      	beq.n	800661a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800660e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006612:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006616:	2b00      	cmp	r3, #0
 8006618:	d054      	beq.n	80066c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fe6d 	bl	80072fa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662a:	2b40      	cmp	r3, #64	; 0x40
 800662c:	d146      	bne.n	80066bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3308      	adds	r3, #8
 8006634:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006638:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800663c:	e853 3f00 	ldrex	r3, [r3]
 8006640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006644:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800664c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3308      	adds	r3, #8
 8006656:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800665a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800665e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006666:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800666a:	e841 2300 	strex	r3, r2, [r1]
 800666e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1d9      	bne.n	800662e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006680:	2b00      	cmp	r3, #0
 8006682:	d017      	beq.n	80066b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800668a:	4a15      	ldr	r2, [pc, #84]	; (80066e0 <HAL_UART_IRQHandler+0x2c0>)
 800668c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006694:	4618      	mov	r0, r3
 8006696:	f7fc f930 	bl	80028fa <HAL_DMA_Abort_IT>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d019      	beq.n	80066d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80066ae:	4610      	mov	r0, r2
 80066b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b2:	e00f      	b.n	80066d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f9e0 	bl	8006a7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ba:	e00b      	b.n	80066d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f9dc 	bl	8006a7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c2:	e007      	b.n	80066d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f9d8 	bl	8006a7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80066d2:	e1bf      	b.n	8006a54 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d4:	bf00      	nop
    return;
 80066d6:	e1bd      	b.n	8006a54 <HAL_UART_IRQHandler+0x634>
 80066d8:	10000001 	.word	0x10000001
 80066dc:	04000120 	.word	0x04000120
 80066e0:	080073c5 	.word	0x080073c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	f040 8153 	bne.w	8006994 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80066ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f2:	f003 0310 	and.w	r3, r3, #16
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f000 814c 	beq.w	8006994 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80066fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006700:	f003 0310 	and.w	r3, r3, #16
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 8145 	beq.w	8006994 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2210      	movs	r2, #16
 8006710:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671c:	2b40      	cmp	r3, #64	; 0x40
 800671e:	f040 80bb 	bne.w	8006898 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006730:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 818f 	beq.w	8006a58 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006740:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006744:	429a      	cmp	r2, r3
 8006746:	f080 8187 	bcs.w	8006a58 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006750:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b00      	cmp	r3, #0
 8006764:	f040 8087 	bne.w	8006876 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006770:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006774:	e853 3f00 	ldrex	r3, [r3]
 8006778:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800677c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	461a      	mov	r2, r3
 800678e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006796:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800679e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067a2:	e841 2300 	strex	r3, r2, [r1]
 80067a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1da      	bne.n	8006768 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3308      	adds	r3, #8
 80067b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067bc:	e853 3f00 	ldrex	r3, [r3]
 80067c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067c4:	f023 0301 	bic.w	r3, r3, #1
 80067c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3308      	adds	r3, #8
 80067d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1e1      	bne.n	80067b2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3308      	adds	r3, #8
 80067f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006804:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3308      	adds	r3, #8
 800680e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006812:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006814:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006816:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006818:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800681a:	e841 2300 	strex	r3, r2, [r1]
 800681e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1e3      	bne.n	80067ee <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800683c:	e853 3f00 	ldrex	r3, [r3]
 8006840:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006844:	f023 0310 	bic.w	r3, r3, #16
 8006848:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	461a      	mov	r2, r3
 8006852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006856:	65bb      	str	r3, [r7, #88]	; 0x58
 8006858:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800685c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800685e:	e841 2300 	strex	r3, r2, [r1]
 8006862:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1e4      	bne.n	8006834 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006870:	4618      	mov	r0, r3
 8006872:	f7fb ffe4 	bl	800283e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2202      	movs	r2, #2
 800687a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006888:	b29b      	uxth	r3, r3
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	b29b      	uxth	r3, r3
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f8fb 	bl	8006a8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006896:	e0df      	b.n	8006a58 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 80d1 	beq.w	8006a5c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80068ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 80cc 	beq.w	8006a5c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	461a      	mov	r2, r3
 80068e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068e6:	647b      	str	r3, [r7, #68]	; 0x44
 80068e8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068ee:	e841 2300 	strex	r3, r2, [r1]
 80068f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1e4      	bne.n	80068c4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3308      	adds	r3, #8
 8006900:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	623b      	str	r3, [r7, #32]
   return(result);
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006910:	f023 0301 	bic.w	r3, r3, #1
 8006914:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3308      	adds	r3, #8
 800691e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006922:	633a      	str	r2, [r7, #48]	; 0x30
 8006924:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800692a:	e841 2300 	strex	r3, r2, [r1]
 800692e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1e1      	bne.n	80068fa <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2220      	movs	r2, #32
 800693a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	e853 3f00 	ldrex	r3, [r3]
 8006956:	60fb      	str	r3, [r7, #12]
   return(result);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0310 	bic.w	r3, r3, #16
 800695e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800696c:	61fb      	str	r3, [r7, #28]
 800696e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	69b9      	ldr	r1, [r7, #24]
 8006972:	69fa      	ldr	r2, [r7, #28]
 8006974:	e841 2300 	strex	r3, r2, [r1]
 8006978:	617b      	str	r3, [r7, #20]
   return(result);
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e4      	bne.n	800694a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006986:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f87d 	bl	8006a8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006992:	e063      	b.n	8006a5c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00e      	beq.n	80069be <HAL_UART_IRQHandler+0x59e>
 80069a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d008      	beq.n	80069be <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80069b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fd45 	bl	8007446 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069bc:	e051      	b.n	8006a62 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80069be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d014      	beq.n	80069f4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80069ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d105      	bne.n	80069e2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80069d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d008      	beq.n	80069f4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d03a      	beq.n	8006a60 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	4798      	blx	r3
    }
    return;
 80069f2:	e035      	b.n	8006a60 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d009      	beq.n	8006a14 <HAL_UART_IRQHandler+0x5f4>
 8006a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fcef 	bl	80073f0 <UART_EndTransmit_IT>
    return;
 8006a12:	e026      	b.n	8006a62 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d009      	beq.n	8006a34 <HAL_UART_IRQHandler+0x614>
 8006a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fd1c 	bl	800746a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a32:	e016      	b.n	8006a62 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d010      	beq.n	8006a62 <HAL_UART_IRQHandler+0x642>
 8006a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	da0c      	bge.n	8006a62 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fd05 	bl	8007458 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a4e:	e008      	b.n	8006a62 <HAL_UART_IRQHandler+0x642>
      return;
 8006a50:	bf00      	nop
 8006a52:	e006      	b.n	8006a62 <HAL_UART_IRQHandler+0x642>
    return;
 8006a54:	bf00      	nop
 8006a56:	e004      	b.n	8006a62 <HAL_UART_IRQHandler+0x642>
      return;
 8006a58:	bf00      	nop
 8006a5a:	e002      	b.n	8006a62 <HAL_UART_IRQHandler+0x642>
      return;
 8006a5c:	bf00      	nop
 8006a5e:	e000      	b.n	8006a62 <HAL_UART_IRQHandler+0x642>
    return;
 8006a60:	bf00      	nop
  }
}
 8006a62:	37e8      	adds	r7, #232	; 0xe8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bc80      	pop	{r7}
 8006a78:	4770      	bx	lr

08006a7a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a82:	bf00      	nop
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr

08006a8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	460b      	mov	r3, r1
 8006a96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	4770      	bx	lr
	...

08006aa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006aa8:	b08c      	sub	sp, #48	; 0x30
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	431a      	orrs	r2, r3
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	4b94      	ldr	r3, [pc, #592]	; (8006d24 <UART_SetConfig+0x280>)
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	6812      	ldr	r2, [r2, #0]
 8006ada:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006adc:	430b      	orrs	r3, r1
 8006ade:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	68da      	ldr	r2, [r3, #12]
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a89      	ldr	r2, [pc, #548]	; (8006d28 <UART_SetConfig+0x284>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d004      	beq.n	8006b10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006b1a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	6812      	ldr	r2, [r2, #0]
 8006b22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b24:	430b      	orrs	r3, r1
 8006b26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2e:	f023 010f 	bic.w	r1, r3, #15
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a7a      	ldr	r2, [pc, #488]	; (8006d2c <UART_SetConfig+0x288>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d127      	bne.n	8006b98 <UART_SetConfig+0xf4>
 8006b48:	2003      	movs	r0, #3
 8006b4a:	f7ff faad 	bl	80060a8 <LL_RCC_GetUSARTClockSource>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8006b54:	2b03      	cmp	r3, #3
 8006b56:	d81b      	bhi.n	8006b90 <UART_SetConfig+0xec>
 8006b58:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <UART_SetConfig+0xbc>)
 8006b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5e:	bf00      	nop
 8006b60:	08006b71 	.word	0x08006b71
 8006b64:	08006b81 	.word	0x08006b81
 8006b68:	08006b79 	.word	0x08006b79
 8006b6c:	08006b89 	.word	0x08006b89
 8006b70:	2301      	movs	r3, #1
 8006b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b76:	e080      	b.n	8006c7a <UART_SetConfig+0x1d6>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b7e:	e07c      	b.n	8006c7a <UART_SetConfig+0x1d6>
 8006b80:	2304      	movs	r3, #4
 8006b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b86:	e078      	b.n	8006c7a <UART_SetConfig+0x1d6>
 8006b88:	2308      	movs	r3, #8
 8006b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b8e:	e074      	b.n	8006c7a <UART_SetConfig+0x1d6>
 8006b90:	2310      	movs	r3, #16
 8006b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b96:	e070      	b.n	8006c7a <UART_SetConfig+0x1d6>
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a64      	ldr	r2, [pc, #400]	; (8006d30 <UART_SetConfig+0x28c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d138      	bne.n	8006c14 <UART_SetConfig+0x170>
 8006ba2:	200c      	movs	r0, #12
 8006ba4:	f7ff fa80 	bl	80060a8 <LL_RCC_GetUSARTClockSource>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8006bae:	2b0c      	cmp	r3, #12
 8006bb0:	d82c      	bhi.n	8006c0c <UART_SetConfig+0x168>
 8006bb2:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <UART_SetConfig+0x114>)
 8006bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb8:	08006bed 	.word	0x08006bed
 8006bbc:	08006c0d 	.word	0x08006c0d
 8006bc0:	08006c0d 	.word	0x08006c0d
 8006bc4:	08006c0d 	.word	0x08006c0d
 8006bc8:	08006bfd 	.word	0x08006bfd
 8006bcc:	08006c0d 	.word	0x08006c0d
 8006bd0:	08006c0d 	.word	0x08006c0d
 8006bd4:	08006c0d 	.word	0x08006c0d
 8006bd8:	08006bf5 	.word	0x08006bf5
 8006bdc:	08006c0d 	.word	0x08006c0d
 8006be0:	08006c0d 	.word	0x08006c0d
 8006be4:	08006c0d 	.word	0x08006c0d
 8006be8:	08006c05 	.word	0x08006c05
 8006bec:	2300      	movs	r3, #0
 8006bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bf2:	e042      	b.n	8006c7a <UART_SetConfig+0x1d6>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bfa:	e03e      	b.n	8006c7a <UART_SetConfig+0x1d6>
 8006bfc:	2304      	movs	r3, #4
 8006bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c02:	e03a      	b.n	8006c7a <UART_SetConfig+0x1d6>
 8006c04:	2308      	movs	r3, #8
 8006c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c0a:	e036      	b.n	8006c7a <UART_SetConfig+0x1d6>
 8006c0c:	2310      	movs	r3, #16
 8006c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c12:	e032      	b.n	8006c7a <UART_SetConfig+0x1d6>
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a43      	ldr	r2, [pc, #268]	; (8006d28 <UART_SetConfig+0x284>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d12a      	bne.n	8006c74 <UART_SetConfig+0x1d0>
 8006c1e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006c22:	f7ff fa53 	bl	80060cc <LL_RCC_GetLPUARTClockSource>
 8006c26:	4603      	mov	r3, r0
 8006c28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c2c:	d01a      	beq.n	8006c64 <UART_SetConfig+0x1c0>
 8006c2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c32:	d81b      	bhi.n	8006c6c <UART_SetConfig+0x1c8>
 8006c34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c38:	d00c      	beq.n	8006c54 <UART_SetConfig+0x1b0>
 8006c3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c3e:	d815      	bhi.n	8006c6c <UART_SetConfig+0x1c8>
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d003      	beq.n	8006c4c <UART_SetConfig+0x1a8>
 8006c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c48:	d008      	beq.n	8006c5c <UART_SetConfig+0x1b8>
 8006c4a:	e00f      	b.n	8006c6c <UART_SetConfig+0x1c8>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c52:	e012      	b.n	8006c7a <UART_SetConfig+0x1d6>
 8006c54:	2302      	movs	r3, #2
 8006c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c5a:	e00e      	b.n	8006c7a <UART_SetConfig+0x1d6>
 8006c5c:	2304      	movs	r3, #4
 8006c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c62:	e00a      	b.n	8006c7a <UART_SetConfig+0x1d6>
 8006c64:	2308      	movs	r3, #8
 8006c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c6a:	e006      	b.n	8006c7a <UART_SetConfig+0x1d6>
 8006c6c:	2310      	movs	r3, #16
 8006c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c72:	e002      	b.n	8006c7a <UART_SetConfig+0x1d6>
 8006c74:	2310      	movs	r3, #16
 8006c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a2a      	ldr	r2, [pc, #168]	; (8006d28 <UART_SetConfig+0x284>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	f040 80a4 	bne.w	8006dce <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c8a:	2b08      	cmp	r3, #8
 8006c8c:	d823      	bhi.n	8006cd6 <UART_SetConfig+0x232>
 8006c8e:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <UART_SetConfig+0x1f0>)
 8006c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c94:	08006cb9 	.word	0x08006cb9
 8006c98:	08006cd7 	.word	0x08006cd7
 8006c9c:	08006cc1 	.word	0x08006cc1
 8006ca0:	08006cd7 	.word	0x08006cd7
 8006ca4:	08006cc7 	.word	0x08006cc7
 8006ca8:	08006cd7 	.word	0x08006cd7
 8006cac:	08006cd7 	.word	0x08006cd7
 8006cb0:	08006cd7 	.word	0x08006cd7
 8006cb4:	08006ccf 	.word	0x08006ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cb8:	f7fd f840 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 8006cbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cbe:	e010      	b.n	8006ce2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cc0:	4b1c      	ldr	r3, [pc, #112]	; (8006d34 <UART_SetConfig+0x290>)
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006cc4:	e00d      	b.n	8006ce2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cc6:	f7fc ff85 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8006cca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ccc:	e009      	b.n	8006ce2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006cd4:	e005      	b.n	8006ce2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006ce0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 8137 	beq.w	8006f58 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cee:	4a12      	ldr	r2, [pc, #72]	; (8006d38 <UART_SetConfig+0x294>)
 8006cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cfc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	4613      	mov	r3, r2
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	4413      	add	r3, r2
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d305      	bcc.n	8006d1a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d910      	bls.n	8006d3c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006d20:	e11a      	b.n	8006f58 <UART_SetConfig+0x4b4>
 8006d22:	bf00      	nop
 8006d24:	cfff69f3 	.word	0xcfff69f3
 8006d28:	40008000 	.word	0x40008000
 8006d2c:	40013800 	.word	0x40013800
 8006d30:	40004400 	.word	0x40004400
 8006d34:	00f42400 	.word	0x00f42400
 8006d38:	08008434 	.word	0x08008434
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	2200      	movs	r2, #0
 8006d40:	60bb      	str	r3, [r7, #8]
 8006d42:	60fa      	str	r2, [r7, #12]
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	4a8e      	ldr	r2, [pc, #568]	; (8006f84 <UART_SetConfig+0x4e0>)
 8006d4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	2200      	movs	r2, #0
 8006d52:	603b      	str	r3, [r7, #0]
 8006d54:	607a      	str	r2, [r7, #4]
 8006d56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d5e:	f7f9 fa5f 	bl	8000220 <__aeabi_uldivmod>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4610      	mov	r0, r2
 8006d68:	4619      	mov	r1, r3
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	020b      	lsls	r3, r1, #8
 8006d74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d78:	0202      	lsls	r2, r0, #8
 8006d7a:	6979      	ldr	r1, [r7, #20]
 8006d7c:	6849      	ldr	r1, [r1, #4]
 8006d7e:	0849      	lsrs	r1, r1, #1
 8006d80:	2000      	movs	r0, #0
 8006d82:	460c      	mov	r4, r1
 8006d84:	4605      	mov	r5, r0
 8006d86:	eb12 0804 	adds.w	r8, r2, r4
 8006d8a:	eb43 0905 	adc.w	r9, r3, r5
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	469a      	mov	sl, r3
 8006d96:	4693      	mov	fp, r2
 8006d98:	4652      	mov	r2, sl
 8006d9a:	465b      	mov	r3, fp
 8006d9c:	4640      	mov	r0, r8
 8006d9e:	4649      	mov	r1, r9
 8006da0:	f7f9 fa3e 	bl	8000220 <__aeabi_uldivmod>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	4613      	mov	r3, r2
 8006daa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006db2:	d308      	bcc.n	8006dc6 <UART_SetConfig+0x322>
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dba:	d204      	bcs.n	8006dc6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6a3a      	ldr	r2, [r7, #32]
 8006dc2:	60da      	str	r2, [r3, #12]
 8006dc4:	e0c8      	b.n	8006f58 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006dcc:	e0c4      	b.n	8006f58 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dd6:	d167      	bne.n	8006ea8 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8006dd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ddc:	2b08      	cmp	r3, #8
 8006dde:	d828      	bhi.n	8006e32 <UART_SetConfig+0x38e>
 8006de0:	a201      	add	r2, pc, #4	; (adr r2, 8006de8 <UART_SetConfig+0x344>)
 8006de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de6:	bf00      	nop
 8006de8:	08006e0d 	.word	0x08006e0d
 8006dec:	08006e15 	.word	0x08006e15
 8006df0:	08006e1d 	.word	0x08006e1d
 8006df4:	08006e33 	.word	0x08006e33
 8006df8:	08006e23 	.word	0x08006e23
 8006dfc:	08006e33 	.word	0x08006e33
 8006e00:	08006e33 	.word	0x08006e33
 8006e04:	08006e33 	.word	0x08006e33
 8006e08:	08006e2b 	.word	0x08006e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e0c:	f7fc ff96 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 8006e10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e12:	e014      	b.n	8006e3e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e14:	f7fc ffa4 	bl	8003d60 <HAL_RCC_GetPCLK2Freq>
 8006e18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e1a:	e010      	b.n	8006e3e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e1c:	4b5a      	ldr	r3, [pc, #360]	; (8006f88 <UART_SetConfig+0x4e4>)
 8006e1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e20:	e00d      	b.n	8006e3e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e22:	f7fc fed7 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8006e26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e28:	e009      	b.n	8006e3e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e30:	e005      	b.n	8006e3e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 8089 	beq.w	8006f58 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	4a4e      	ldr	r2, [pc, #312]	; (8006f84 <UART_SetConfig+0x4e0>)
 8006e4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e50:	461a      	mov	r2, r3
 8006e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e54:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e58:	005a      	lsls	r2, r3, #1
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	085b      	lsrs	r3, r3, #1
 8006e60:	441a      	add	r2, r3
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	2b0f      	cmp	r3, #15
 8006e70:	d916      	bls.n	8006ea0 <UART_SetConfig+0x3fc>
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e78:	d212      	bcs.n	8006ea0 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	f023 030f 	bic.w	r3, r3, #15
 8006e82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	085b      	lsrs	r3, r3, #1
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	f003 0307 	and.w	r3, r3, #7
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	8bfb      	ldrh	r3, [r7, #30]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	8bfa      	ldrh	r2, [r7, #30]
 8006e9c:	60da      	str	r2, [r3, #12]
 8006e9e:	e05b      	b.n	8006f58 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ea6:	e057      	b.n	8006f58 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ea8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d828      	bhi.n	8006f02 <UART_SetConfig+0x45e>
 8006eb0:	a201      	add	r2, pc, #4	; (adr r2, 8006eb8 <UART_SetConfig+0x414>)
 8006eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb6:	bf00      	nop
 8006eb8:	08006edd 	.word	0x08006edd
 8006ebc:	08006ee5 	.word	0x08006ee5
 8006ec0:	08006eed 	.word	0x08006eed
 8006ec4:	08006f03 	.word	0x08006f03
 8006ec8:	08006ef3 	.word	0x08006ef3
 8006ecc:	08006f03 	.word	0x08006f03
 8006ed0:	08006f03 	.word	0x08006f03
 8006ed4:	08006f03 	.word	0x08006f03
 8006ed8:	08006efb 	.word	0x08006efb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006edc:	f7fc ff2e 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 8006ee0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ee2:	e014      	b.n	8006f0e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ee4:	f7fc ff3c 	bl	8003d60 <HAL_RCC_GetPCLK2Freq>
 8006ee8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006eea:	e010      	b.n	8006f0e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eec:	4b26      	ldr	r3, [pc, #152]	; (8006f88 <UART_SetConfig+0x4e4>)
 8006eee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ef0:	e00d      	b.n	8006f0e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ef2:	f7fc fe6f 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8006ef6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ef8:	e009      	b.n	8006f0e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006efe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f00:	e005      	b.n	8006f0e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f0c:	bf00      	nop
    }

    if (pclk != 0U)
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d021      	beq.n	8006f58 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f18:	4a1a      	ldr	r2, [pc, #104]	; (8006f84 <UART_SetConfig+0x4e0>)
 8006f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	085b      	lsrs	r3, r3, #1
 8006f2c:	441a      	add	r2, r3
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	2b0f      	cmp	r3, #15
 8006f3c:	d909      	bls.n	8006f52 <UART_SetConfig+0x4ae>
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f44:	d205      	bcs.n	8006f52 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	60da      	str	r2, [r3, #12]
 8006f50:	e002      	b.n	8006f58 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2200      	movs	r2, #0
 8006f72:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006f74:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3730      	adds	r7, #48	; 0x30
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f82:	bf00      	nop
 8006f84:	08008434 	.word	0x08008434
 8006f88:	00f42400 	.word	0x00f42400

08006f8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00a      	beq.n	8006fb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00a      	beq.n	8006fd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00a      	beq.n	8006ffa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffe:	f003 0308 	and.w	r3, r3, #8
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007020:	f003 0310 	and.w	r3, r3, #16
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00a      	beq.n	800703e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	430a      	orrs	r2, r1
 800703c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007042:	f003 0320 	and.w	r3, r3, #32
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007068:	2b00      	cmp	r3, #0
 800706a:	d01a      	beq.n	80070a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800708a:	d10a      	bne.n	80070a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00a      	beq.n	80070c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	605a      	str	r2, [r3, #4]
  }
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bc80      	pop	{r7}
 80070cc:	4770      	bx	lr

080070ce <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b086      	sub	sp, #24
 80070d2:	af02      	add	r7, sp, #8
 80070d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070de:	f7fa fecb 	bl	8001e78 <HAL_GetTick>
 80070e2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0308 	and.w	r3, r3, #8
 80070ee:	2b08      	cmp	r3, #8
 80070f0:	d10e      	bne.n	8007110 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f832 	bl	800716a <UART_WaitOnFlagUntilTimeout>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	e028      	b.n	8007162 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0304 	and.w	r3, r3, #4
 800711a:	2b04      	cmp	r3, #4
 800711c:	d10e      	bne.n	800713c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800711e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f81c 	bl	800716a <UART_WaitOnFlagUntilTimeout>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d001      	beq.n	800713c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e012      	b.n	8007162 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2220      	movs	r2, #32
 8007148:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b09c      	sub	sp, #112	; 0x70
 800716e:	af00      	add	r7, sp, #0
 8007170:	60f8      	str	r0, [r7, #12]
 8007172:	60b9      	str	r1, [r7, #8]
 8007174:	603b      	str	r3, [r7, #0]
 8007176:	4613      	mov	r3, r2
 8007178:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800717a:	e0a9      	b.n	80072d0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800717c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800717e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007182:	f000 80a5 	beq.w	80072d0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007186:	f7fa fe77 	bl	8001e78 <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007192:	429a      	cmp	r2, r3
 8007194:	d302      	bcc.n	800719c <UART_WaitOnFlagUntilTimeout+0x32>
 8007196:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007198:	2b00      	cmp	r3, #0
 800719a:	d140      	bne.n	800721e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80071aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071b0:	667b      	str	r3, [r7, #100]	; 0x64
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	461a      	mov	r2, r3
 80071b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071c2:	e841 2300 	strex	r3, r2, [r1]
 80071c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80071c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1e6      	bne.n	800719c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3308      	adds	r3, #8
 80071d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d8:	e853 3f00 	ldrex	r3, [r3]
 80071dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e0:	f023 0301 	bic.w	r3, r3, #1
 80071e4:	663b      	str	r3, [r7, #96]	; 0x60
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3308      	adds	r3, #8
 80071ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80071f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e5      	bne.n	80071ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2220      	movs	r2, #32
 8007206:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2220      	movs	r2, #32
 800720e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e069      	b.n	80072f2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0304 	and.w	r3, r3, #4
 8007228:	2b00      	cmp	r3, #0
 800722a:	d051      	beq.n	80072d0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800723a:	d149      	bne.n	80072d0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007244:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724e:	e853 3f00 	ldrex	r3, [r3]
 8007252:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800725a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	461a      	mov	r2, r3
 8007262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007264:	637b      	str	r3, [r7, #52]	; 0x34
 8007266:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007268:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800726a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800726c:	e841 2300 	strex	r3, r2, [r1]
 8007270:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1e6      	bne.n	8007246 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3308      	adds	r3, #8
 800727e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	e853 3f00 	ldrex	r3, [r3]
 8007286:	613b      	str	r3, [r7, #16]
   return(result);
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f023 0301 	bic.w	r3, r3, #1
 800728e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3308      	adds	r3, #8
 8007296:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007298:	623a      	str	r2, [r7, #32]
 800729a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729c:	69f9      	ldr	r1, [r7, #28]
 800729e:	6a3a      	ldr	r2, [r7, #32]
 80072a0:	e841 2300 	strex	r3, r2, [r1]
 80072a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1e5      	bne.n	8007278 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2220      	movs	r2, #32
 80072b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2220      	movs	r2, #32
 80072b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2220      	movs	r2, #32
 80072c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e010      	b.n	80072f2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	69da      	ldr	r2, [r3, #28]
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	4013      	ands	r3, r2
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	429a      	cmp	r2, r3
 80072de:	bf0c      	ite	eq
 80072e0:	2301      	moveq	r3, #1
 80072e2:	2300      	movne	r3, #0
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	461a      	mov	r2, r3
 80072e8:	79fb      	ldrb	r3, [r7, #7]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	f43f af46 	beq.w	800717c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3770      	adds	r7, #112	; 0x70
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b095      	sub	sp, #84	; 0x54
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800730a:	e853 3f00 	ldrex	r3, [r3]
 800730e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007312:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007316:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	461a      	mov	r2, r3
 800731e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007320:	643b      	str	r3, [r7, #64]	; 0x40
 8007322:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007324:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007326:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007328:	e841 2300 	strex	r3, r2, [r1]
 800732c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800732e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1e6      	bne.n	8007302 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3308      	adds	r3, #8
 800733a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733c:	6a3b      	ldr	r3, [r7, #32]
 800733e:	e853 3f00 	ldrex	r3, [r3]
 8007342:	61fb      	str	r3, [r7, #28]
   return(result);
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800734a:	f023 0301 	bic.w	r3, r3, #1
 800734e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	3308      	adds	r3, #8
 8007356:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007358:	62fa      	str	r2, [r7, #44]	; 0x2c
 800735a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800735e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007360:	e841 2300 	strex	r3, r2, [r1]
 8007364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1e3      	bne.n	8007334 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007370:	2b01      	cmp	r3, #1
 8007372:	d118      	bne.n	80073a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	e853 3f00 	ldrex	r3, [r3]
 8007380:	60bb      	str	r3, [r7, #8]
   return(result);
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	f023 0310 	bic.w	r3, r3, #16
 8007388:	647b      	str	r3, [r7, #68]	; 0x44
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	461a      	mov	r2, r3
 8007390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007392:	61bb      	str	r3, [r7, #24]
 8007394:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007396:	6979      	ldr	r1, [r7, #20]
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	e841 2300 	strex	r3, r2, [r1]
 800739e:	613b      	str	r3, [r7, #16]
   return(result);
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1e6      	bne.n	8007374 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80073ba:	bf00      	nop
 80073bc:	3754      	adds	r7, #84	; 0x54
 80073be:	46bd      	mov	sp, r7
 80073c0:	bc80      	pop	{r7}
 80073c2:	4770      	bx	lr

080073c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f7ff fb49 	bl	8006a7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073e8:	bf00      	nop
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b088      	sub	sp, #32
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	60bb      	str	r3, [r7, #8]
   return(result);
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800740c:	61fb      	str	r3, [r7, #28]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	61bb      	str	r3, [r7, #24]
 8007418:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741a:	6979      	ldr	r1, [r7, #20]
 800741c:	69ba      	ldr	r2, [r7, #24]
 800741e:	e841 2300 	strex	r3, r2, [r1]
 8007422:	613b      	str	r3, [r7, #16]
   return(result);
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1e6      	bne.n	80073f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2220      	movs	r2, #32
 800742e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7ff fb15 	bl	8006a68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800743e:	bf00      	nop
 8007440:	3720      	adds	r7, #32
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007446:	b480      	push	{r7}
 8007448:	b083      	sub	sp, #12
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800744e:	bf00      	nop
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	bc80      	pop	{r7}
 8007456:	4770      	bx	lr

08007458 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	bc80      	pop	{r7}
 8007468:	4770      	bx	lr

0800746a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007472:	bf00      	nop
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	bc80      	pop	{r7}
 800747a:	4770      	bx	lr

0800747c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800748a:	2b01      	cmp	r3, #1
 800748c:	d101      	bne.n	8007492 <HAL_UARTEx_DisableFifoMode+0x16>
 800748e:	2302      	movs	r3, #2
 8007490:	e027      	b.n	80074e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2224      	movs	r2, #36	; 0x24
 800749e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 0201 	bic.w	r2, r2, #1
 80074b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80074c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2220      	movs	r2, #32
 80074d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bc80      	pop	{r7}
 80074ea:	4770      	bx	lr

080074ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d101      	bne.n	8007504 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007500:	2302      	movs	r3, #2
 8007502:	e02d      	b.n	8007560 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2224      	movs	r2, #36	; 0x24
 8007510:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 0201 	bic.w	r2, r2, #1
 800752a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f84f 	bl	80075e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2220      	movs	r2, #32
 8007552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007578:	2b01      	cmp	r3, #1
 800757a:	d101      	bne.n	8007580 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800757c:	2302      	movs	r3, #2
 800757e:	e02d      	b.n	80075dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2224      	movs	r2, #36	; 0x24
 800758c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 0201 	bic.w	r2, r2, #1
 80075a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	430a      	orrs	r2, r1
 80075ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f811 	bl	80075e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2220      	movs	r2, #32
 80075ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d108      	bne.n	8007606 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007604:	e031      	b.n	800766a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007606:	2308      	movs	r3, #8
 8007608:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800760a:	2308      	movs	r3, #8
 800760c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	0e5b      	lsrs	r3, r3, #25
 8007616:	b2db      	uxtb	r3, r3
 8007618:	f003 0307 	and.w	r3, r3, #7
 800761c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	0f5b      	lsrs	r3, r3, #29
 8007626:	b2db      	uxtb	r3, r3
 8007628:	f003 0307 	and.w	r3, r3, #7
 800762c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800762e:	7bbb      	ldrb	r3, [r7, #14]
 8007630:	7b3a      	ldrb	r2, [r7, #12]
 8007632:	4910      	ldr	r1, [pc, #64]	; (8007674 <UARTEx_SetNbDataToProcess+0x90>)
 8007634:	5c8a      	ldrb	r2, [r1, r2]
 8007636:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800763a:	7b3a      	ldrb	r2, [r7, #12]
 800763c:	490e      	ldr	r1, [pc, #56]	; (8007678 <UARTEx_SetNbDataToProcess+0x94>)
 800763e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007640:	fb93 f3f2 	sdiv	r3, r3, r2
 8007644:	b29a      	uxth	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800764c:	7bfb      	ldrb	r3, [r7, #15]
 800764e:	7b7a      	ldrb	r2, [r7, #13]
 8007650:	4908      	ldr	r1, [pc, #32]	; (8007674 <UARTEx_SetNbDataToProcess+0x90>)
 8007652:	5c8a      	ldrb	r2, [r1, r2]
 8007654:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007658:	7b7a      	ldrb	r2, [r7, #13]
 800765a:	4907      	ldr	r1, [pc, #28]	; (8007678 <UARTEx_SetNbDataToProcess+0x94>)
 800765c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800765e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007662:	b29a      	uxth	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800766a:	bf00      	nop
 800766c:	3714      	adds	r7, #20
 800766e:	46bd      	mov	sp, r7
 8007670:	bc80      	pop	{r7}
 8007672:	4770      	bx	lr
 8007674:	0800844c 	.word	0x0800844c
 8007678:	08008454 	.word	0x08008454

0800767c <_vsniprintf_r>:
 800767c:	b530      	push	{r4, r5, lr}
 800767e:	4614      	mov	r4, r2
 8007680:	2c00      	cmp	r4, #0
 8007682:	b09b      	sub	sp, #108	; 0x6c
 8007684:	4605      	mov	r5, r0
 8007686:	461a      	mov	r2, r3
 8007688:	da05      	bge.n	8007696 <_vsniprintf_r+0x1a>
 800768a:	238b      	movs	r3, #139	; 0x8b
 800768c:	6003      	str	r3, [r0, #0]
 800768e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007692:	b01b      	add	sp, #108	; 0x6c
 8007694:	bd30      	pop	{r4, r5, pc}
 8007696:	f44f 7302 	mov.w	r3, #520	; 0x208
 800769a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800769e:	bf14      	ite	ne
 80076a0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80076a4:	4623      	moveq	r3, r4
 80076a6:	9302      	str	r3, [sp, #8]
 80076a8:	9305      	str	r3, [sp, #20]
 80076aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076ae:	9100      	str	r1, [sp, #0]
 80076b0:	9104      	str	r1, [sp, #16]
 80076b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80076b6:	4669      	mov	r1, sp
 80076b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80076ba:	f000 f8a7 	bl	800780c <_svfiprintf_r>
 80076be:	1c43      	adds	r3, r0, #1
 80076c0:	bfbc      	itt	lt
 80076c2:	238b      	movlt	r3, #139	; 0x8b
 80076c4:	602b      	strlt	r3, [r5, #0]
 80076c6:	2c00      	cmp	r4, #0
 80076c8:	d0e3      	beq.n	8007692 <_vsniprintf_r+0x16>
 80076ca:	9b00      	ldr	r3, [sp, #0]
 80076cc:	2200      	movs	r2, #0
 80076ce:	701a      	strb	r2, [r3, #0]
 80076d0:	e7df      	b.n	8007692 <_vsniprintf_r+0x16>
	...

080076d4 <vsniprintf>:
 80076d4:	b507      	push	{r0, r1, r2, lr}
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	4613      	mov	r3, r2
 80076da:	460a      	mov	r2, r1
 80076dc:	4601      	mov	r1, r0
 80076de:	4803      	ldr	r0, [pc, #12]	; (80076ec <vsniprintf+0x18>)
 80076e0:	6800      	ldr	r0, [r0, #0]
 80076e2:	f7ff ffcb 	bl	800767c <_vsniprintf_r>
 80076e6:	b003      	add	sp, #12
 80076e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80076ec:	20000064 	.word	0x20000064

080076f0 <memset>:
 80076f0:	4402      	add	r2, r0
 80076f2:	4603      	mov	r3, r0
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d100      	bne.n	80076fa <memset+0xa>
 80076f8:	4770      	bx	lr
 80076fa:	f803 1b01 	strb.w	r1, [r3], #1
 80076fe:	e7f9      	b.n	80076f4 <memset+0x4>

08007700 <__errno>:
 8007700:	4b01      	ldr	r3, [pc, #4]	; (8007708 <__errno+0x8>)
 8007702:	6818      	ldr	r0, [r3, #0]
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	20000064 	.word	0x20000064

0800770c <__libc_init_array>:
 800770c:	b570      	push	{r4, r5, r6, lr}
 800770e:	4d0d      	ldr	r5, [pc, #52]	; (8007744 <__libc_init_array+0x38>)
 8007710:	4c0d      	ldr	r4, [pc, #52]	; (8007748 <__libc_init_array+0x3c>)
 8007712:	1b64      	subs	r4, r4, r5
 8007714:	10a4      	asrs	r4, r4, #2
 8007716:	2600      	movs	r6, #0
 8007718:	42a6      	cmp	r6, r4
 800771a:	d109      	bne.n	8007730 <__libc_init_array+0x24>
 800771c:	4d0b      	ldr	r5, [pc, #44]	; (800774c <__libc_init_array+0x40>)
 800771e:	4c0c      	ldr	r4, [pc, #48]	; (8007750 <__libc_init_array+0x44>)
 8007720:	f000 fc68 	bl	8007ff4 <_init>
 8007724:	1b64      	subs	r4, r4, r5
 8007726:	10a4      	asrs	r4, r4, #2
 8007728:	2600      	movs	r6, #0
 800772a:	42a6      	cmp	r6, r4
 800772c:	d105      	bne.n	800773a <__libc_init_array+0x2e>
 800772e:	bd70      	pop	{r4, r5, r6, pc}
 8007730:	f855 3b04 	ldr.w	r3, [r5], #4
 8007734:	4798      	blx	r3
 8007736:	3601      	adds	r6, #1
 8007738:	e7ee      	b.n	8007718 <__libc_init_array+0xc>
 800773a:	f855 3b04 	ldr.w	r3, [r5], #4
 800773e:	4798      	blx	r3
 8007740:	3601      	adds	r6, #1
 8007742:	e7f2      	b.n	800772a <__libc_init_array+0x1e>
 8007744:	08008498 	.word	0x08008498
 8007748:	08008498 	.word	0x08008498
 800774c:	08008498 	.word	0x08008498
 8007750:	0800849c 	.word	0x0800849c

08007754 <__retarget_lock_acquire_recursive>:
 8007754:	4770      	bx	lr

08007756 <__retarget_lock_release_recursive>:
 8007756:	4770      	bx	lr

08007758 <__ssputs_r>:
 8007758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800775c:	688e      	ldr	r6, [r1, #8]
 800775e:	461f      	mov	r7, r3
 8007760:	42be      	cmp	r6, r7
 8007762:	680b      	ldr	r3, [r1, #0]
 8007764:	4682      	mov	sl, r0
 8007766:	460c      	mov	r4, r1
 8007768:	4690      	mov	r8, r2
 800776a:	d82c      	bhi.n	80077c6 <__ssputs_r+0x6e>
 800776c:	898a      	ldrh	r2, [r1, #12]
 800776e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007772:	d026      	beq.n	80077c2 <__ssputs_r+0x6a>
 8007774:	6965      	ldr	r5, [r4, #20]
 8007776:	6909      	ldr	r1, [r1, #16]
 8007778:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800777c:	eba3 0901 	sub.w	r9, r3, r1
 8007780:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007784:	1c7b      	adds	r3, r7, #1
 8007786:	444b      	add	r3, r9
 8007788:	106d      	asrs	r5, r5, #1
 800778a:	429d      	cmp	r5, r3
 800778c:	bf38      	it	cc
 800778e:	461d      	movcc	r5, r3
 8007790:	0553      	lsls	r3, r2, #21
 8007792:	d527      	bpl.n	80077e4 <__ssputs_r+0x8c>
 8007794:	4629      	mov	r1, r5
 8007796:	f000 f957 	bl	8007a48 <_malloc_r>
 800779a:	4606      	mov	r6, r0
 800779c:	b360      	cbz	r0, 80077f8 <__ssputs_r+0xa0>
 800779e:	6921      	ldr	r1, [r4, #16]
 80077a0:	464a      	mov	r2, r9
 80077a2:	f000 fbc7 	bl	8007f34 <memcpy>
 80077a6:	89a3      	ldrh	r3, [r4, #12]
 80077a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b0:	81a3      	strh	r3, [r4, #12]
 80077b2:	6126      	str	r6, [r4, #16]
 80077b4:	6165      	str	r5, [r4, #20]
 80077b6:	444e      	add	r6, r9
 80077b8:	eba5 0509 	sub.w	r5, r5, r9
 80077bc:	6026      	str	r6, [r4, #0]
 80077be:	60a5      	str	r5, [r4, #8]
 80077c0:	463e      	mov	r6, r7
 80077c2:	42be      	cmp	r6, r7
 80077c4:	d900      	bls.n	80077c8 <__ssputs_r+0x70>
 80077c6:	463e      	mov	r6, r7
 80077c8:	6820      	ldr	r0, [r4, #0]
 80077ca:	4632      	mov	r2, r6
 80077cc:	4641      	mov	r1, r8
 80077ce:	f000 fb86 	bl	8007ede <memmove>
 80077d2:	68a3      	ldr	r3, [r4, #8]
 80077d4:	1b9b      	subs	r3, r3, r6
 80077d6:	60a3      	str	r3, [r4, #8]
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	4433      	add	r3, r6
 80077dc:	6023      	str	r3, [r4, #0]
 80077de:	2000      	movs	r0, #0
 80077e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e4:	462a      	mov	r2, r5
 80077e6:	f000 fb4b 	bl	8007e80 <_realloc_r>
 80077ea:	4606      	mov	r6, r0
 80077ec:	2800      	cmp	r0, #0
 80077ee:	d1e0      	bne.n	80077b2 <__ssputs_r+0x5a>
 80077f0:	6921      	ldr	r1, [r4, #16]
 80077f2:	4650      	mov	r0, sl
 80077f4:	f000 fbac 	bl	8007f50 <_free_r>
 80077f8:	230c      	movs	r3, #12
 80077fa:	f8ca 3000 	str.w	r3, [sl]
 80077fe:	89a3      	ldrh	r3, [r4, #12]
 8007800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007804:	81a3      	strh	r3, [r4, #12]
 8007806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800780a:	e7e9      	b.n	80077e0 <__ssputs_r+0x88>

0800780c <_svfiprintf_r>:
 800780c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007810:	4698      	mov	r8, r3
 8007812:	898b      	ldrh	r3, [r1, #12]
 8007814:	061b      	lsls	r3, r3, #24
 8007816:	b09d      	sub	sp, #116	; 0x74
 8007818:	4607      	mov	r7, r0
 800781a:	460d      	mov	r5, r1
 800781c:	4614      	mov	r4, r2
 800781e:	d50e      	bpl.n	800783e <_svfiprintf_r+0x32>
 8007820:	690b      	ldr	r3, [r1, #16]
 8007822:	b963      	cbnz	r3, 800783e <_svfiprintf_r+0x32>
 8007824:	2140      	movs	r1, #64	; 0x40
 8007826:	f000 f90f 	bl	8007a48 <_malloc_r>
 800782a:	6028      	str	r0, [r5, #0]
 800782c:	6128      	str	r0, [r5, #16]
 800782e:	b920      	cbnz	r0, 800783a <_svfiprintf_r+0x2e>
 8007830:	230c      	movs	r3, #12
 8007832:	603b      	str	r3, [r7, #0]
 8007834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007838:	e0d0      	b.n	80079dc <_svfiprintf_r+0x1d0>
 800783a:	2340      	movs	r3, #64	; 0x40
 800783c:	616b      	str	r3, [r5, #20]
 800783e:	2300      	movs	r3, #0
 8007840:	9309      	str	r3, [sp, #36]	; 0x24
 8007842:	2320      	movs	r3, #32
 8007844:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007848:	f8cd 800c 	str.w	r8, [sp, #12]
 800784c:	2330      	movs	r3, #48	; 0x30
 800784e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80079f4 <_svfiprintf_r+0x1e8>
 8007852:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007856:	f04f 0901 	mov.w	r9, #1
 800785a:	4623      	mov	r3, r4
 800785c:	469a      	mov	sl, r3
 800785e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007862:	b10a      	cbz	r2, 8007868 <_svfiprintf_r+0x5c>
 8007864:	2a25      	cmp	r2, #37	; 0x25
 8007866:	d1f9      	bne.n	800785c <_svfiprintf_r+0x50>
 8007868:	ebba 0b04 	subs.w	fp, sl, r4
 800786c:	d00b      	beq.n	8007886 <_svfiprintf_r+0x7a>
 800786e:	465b      	mov	r3, fp
 8007870:	4622      	mov	r2, r4
 8007872:	4629      	mov	r1, r5
 8007874:	4638      	mov	r0, r7
 8007876:	f7ff ff6f 	bl	8007758 <__ssputs_r>
 800787a:	3001      	adds	r0, #1
 800787c:	f000 80a9 	beq.w	80079d2 <_svfiprintf_r+0x1c6>
 8007880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007882:	445a      	add	r2, fp
 8007884:	9209      	str	r2, [sp, #36]	; 0x24
 8007886:	f89a 3000 	ldrb.w	r3, [sl]
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 80a1 	beq.w	80079d2 <_svfiprintf_r+0x1c6>
 8007890:	2300      	movs	r3, #0
 8007892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800789a:	f10a 0a01 	add.w	sl, sl, #1
 800789e:	9304      	str	r3, [sp, #16]
 80078a0:	9307      	str	r3, [sp, #28]
 80078a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078a6:	931a      	str	r3, [sp, #104]	; 0x68
 80078a8:	4654      	mov	r4, sl
 80078aa:	2205      	movs	r2, #5
 80078ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078b0:	4850      	ldr	r0, [pc, #320]	; (80079f4 <_svfiprintf_r+0x1e8>)
 80078b2:	f7f8 fc65 	bl	8000180 <memchr>
 80078b6:	9a04      	ldr	r2, [sp, #16]
 80078b8:	b9d8      	cbnz	r0, 80078f2 <_svfiprintf_r+0xe6>
 80078ba:	06d0      	lsls	r0, r2, #27
 80078bc:	bf44      	itt	mi
 80078be:	2320      	movmi	r3, #32
 80078c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078c4:	0711      	lsls	r1, r2, #28
 80078c6:	bf44      	itt	mi
 80078c8:	232b      	movmi	r3, #43	; 0x2b
 80078ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078ce:	f89a 3000 	ldrb.w	r3, [sl]
 80078d2:	2b2a      	cmp	r3, #42	; 0x2a
 80078d4:	d015      	beq.n	8007902 <_svfiprintf_r+0xf6>
 80078d6:	9a07      	ldr	r2, [sp, #28]
 80078d8:	4654      	mov	r4, sl
 80078da:	2000      	movs	r0, #0
 80078dc:	f04f 0c0a 	mov.w	ip, #10
 80078e0:	4621      	mov	r1, r4
 80078e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078e6:	3b30      	subs	r3, #48	; 0x30
 80078e8:	2b09      	cmp	r3, #9
 80078ea:	d94d      	bls.n	8007988 <_svfiprintf_r+0x17c>
 80078ec:	b1b0      	cbz	r0, 800791c <_svfiprintf_r+0x110>
 80078ee:	9207      	str	r2, [sp, #28]
 80078f0:	e014      	b.n	800791c <_svfiprintf_r+0x110>
 80078f2:	eba0 0308 	sub.w	r3, r0, r8
 80078f6:	fa09 f303 	lsl.w	r3, r9, r3
 80078fa:	4313      	orrs	r3, r2
 80078fc:	9304      	str	r3, [sp, #16]
 80078fe:	46a2      	mov	sl, r4
 8007900:	e7d2      	b.n	80078a8 <_svfiprintf_r+0x9c>
 8007902:	9b03      	ldr	r3, [sp, #12]
 8007904:	1d19      	adds	r1, r3, #4
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	9103      	str	r1, [sp, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	bfbb      	ittet	lt
 800790e:	425b      	neglt	r3, r3
 8007910:	f042 0202 	orrlt.w	r2, r2, #2
 8007914:	9307      	strge	r3, [sp, #28]
 8007916:	9307      	strlt	r3, [sp, #28]
 8007918:	bfb8      	it	lt
 800791a:	9204      	strlt	r2, [sp, #16]
 800791c:	7823      	ldrb	r3, [r4, #0]
 800791e:	2b2e      	cmp	r3, #46	; 0x2e
 8007920:	d10c      	bne.n	800793c <_svfiprintf_r+0x130>
 8007922:	7863      	ldrb	r3, [r4, #1]
 8007924:	2b2a      	cmp	r3, #42	; 0x2a
 8007926:	d134      	bne.n	8007992 <_svfiprintf_r+0x186>
 8007928:	9b03      	ldr	r3, [sp, #12]
 800792a:	1d1a      	adds	r2, r3, #4
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	9203      	str	r2, [sp, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	bfb8      	it	lt
 8007934:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007938:	3402      	adds	r4, #2
 800793a:	9305      	str	r3, [sp, #20]
 800793c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80079f8 <_svfiprintf_r+0x1ec>
 8007940:	7821      	ldrb	r1, [r4, #0]
 8007942:	2203      	movs	r2, #3
 8007944:	4650      	mov	r0, sl
 8007946:	f7f8 fc1b 	bl	8000180 <memchr>
 800794a:	b138      	cbz	r0, 800795c <_svfiprintf_r+0x150>
 800794c:	9b04      	ldr	r3, [sp, #16]
 800794e:	eba0 000a 	sub.w	r0, r0, sl
 8007952:	2240      	movs	r2, #64	; 0x40
 8007954:	4082      	lsls	r2, r0
 8007956:	4313      	orrs	r3, r2
 8007958:	3401      	adds	r4, #1
 800795a:	9304      	str	r3, [sp, #16]
 800795c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007960:	4826      	ldr	r0, [pc, #152]	; (80079fc <_svfiprintf_r+0x1f0>)
 8007962:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007966:	2206      	movs	r2, #6
 8007968:	f7f8 fc0a 	bl	8000180 <memchr>
 800796c:	2800      	cmp	r0, #0
 800796e:	d038      	beq.n	80079e2 <_svfiprintf_r+0x1d6>
 8007970:	4b23      	ldr	r3, [pc, #140]	; (8007a00 <_svfiprintf_r+0x1f4>)
 8007972:	bb1b      	cbnz	r3, 80079bc <_svfiprintf_r+0x1b0>
 8007974:	9b03      	ldr	r3, [sp, #12]
 8007976:	3307      	adds	r3, #7
 8007978:	f023 0307 	bic.w	r3, r3, #7
 800797c:	3308      	adds	r3, #8
 800797e:	9303      	str	r3, [sp, #12]
 8007980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007982:	4433      	add	r3, r6
 8007984:	9309      	str	r3, [sp, #36]	; 0x24
 8007986:	e768      	b.n	800785a <_svfiprintf_r+0x4e>
 8007988:	fb0c 3202 	mla	r2, ip, r2, r3
 800798c:	460c      	mov	r4, r1
 800798e:	2001      	movs	r0, #1
 8007990:	e7a6      	b.n	80078e0 <_svfiprintf_r+0xd4>
 8007992:	2300      	movs	r3, #0
 8007994:	3401      	adds	r4, #1
 8007996:	9305      	str	r3, [sp, #20]
 8007998:	4619      	mov	r1, r3
 800799a:	f04f 0c0a 	mov.w	ip, #10
 800799e:	4620      	mov	r0, r4
 80079a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079a4:	3a30      	subs	r2, #48	; 0x30
 80079a6:	2a09      	cmp	r2, #9
 80079a8:	d903      	bls.n	80079b2 <_svfiprintf_r+0x1a6>
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d0c6      	beq.n	800793c <_svfiprintf_r+0x130>
 80079ae:	9105      	str	r1, [sp, #20]
 80079b0:	e7c4      	b.n	800793c <_svfiprintf_r+0x130>
 80079b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80079b6:	4604      	mov	r4, r0
 80079b8:	2301      	movs	r3, #1
 80079ba:	e7f0      	b.n	800799e <_svfiprintf_r+0x192>
 80079bc:	ab03      	add	r3, sp, #12
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	462a      	mov	r2, r5
 80079c2:	4b10      	ldr	r3, [pc, #64]	; (8007a04 <_svfiprintf_r+0x1f8>)
 80079c4:	a904      	add	r1, sp, #16
 80079c6:	4638      	mov	r0, r7
 80079c8:	f3af 8000 	nop.w
 80079cc:	1c42      	adds	r2, r0, #1
 80079ce:	4606      	mov	r6, r0
 80079d0:	d1d6      	bne.n	8007980 <_svfiprintf_r+0x174>
 80079d2:	89ab      	ldrh	r3, [r5, #12]
 80079d4:	065b      	lsls	r3, r3, #25
 80079d6:	f53f af2d 	bmi.w	8007834 <_svfiprintf_r+0x28>
 80079da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079dc:	b01d      	add	sp, #116	; 0x74
 80079de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e2:	ab03      	add	r3, sp, #12
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	462a      	mov	r2, r5
 80079e8:	4b06      	ldr	r3, [pc, #24]	; (8007a04 <_svfiprintf_r+0x1f8>)
 80079ea:	a904      	add	r1, sp, #16
 80079ec:	4638      	mov	r0, r7
 80079ee:	f000 f919 	bl	8007c24 <_printf_i>
 80079f2:	e7eb      	b.n	80079cc <_svfiprintf_r+0x1c0>
 80079f4:	0800845c 	.word	0x0800845c
 80079f8:	08008462 	.word	0x08008462
 80079fc:	08008466 	.word	0x08008466
 8007a00:	00000000 	.word	0x00000000
 8007a04:	08007759 	.word	0x08007759

08007a08 <sbrk_aligned>:
 8007a08:	b570      	push	{r4, r5, r6, lr}
 8007a0a:	4e0e      	ldr	r6, [pc, #56]	; (8007a44 <sbrk_aligned+0x3c>)
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	6831      	ldr	r1, [r6, #0]
 8007a10:	4605      	mov	r5, r0
 8007a12:	b911      	cbnz	r1, 8007a1a <sbrk_aligned+0x12>
 8007a14:	f000 fa7e 	bl	8007f14 <_sbrk_r>
 8007a18:	6030      	str	r0, [r6, #0]
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	f000 fa79 	bl	8007f14 <_sbrk_r>
 8007a22:	1c43      	adds	r3, r0, #1
 8007a24:	d00a      	beq.n	8007a3c <sbrk_aligned+0x34>
 8007a26:	1cc4      	adds	r4, r0, #3
 8007a28:	f024 0403 	bic.w	r4, r4, #3
 8007a2c:	42a0      	cmp	r0, r4
 8007a2e:	d007      	beq.n	8007a40 <sbrk_aligned+0x38>
 8007a30:	1a21      	subs	r1, r4, r0
 8007a32:	4628      	mov	r0, r5
 8007a34:	f000 fa6e 	bl	8007f14 <_sbrk_r>
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d101      	bne.n	8007a40 <sbrk_aligned+0x38>
 8007a3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007a40:	4620      	mov	r0, r4
 8007a42:	bd70      	pop	{r4, r5, r6, pc}
 8007a44:	20000564 	.word	0x20000564

08007a48 <_malloc_r>:
 8007a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a4c:	1ccd      	adds	r5, r1, #3
 8007a4e:	f025 0503 	bic.w	r5, r5, #3
 8007a52:	3508      	adds	r5, #8
 8007a54:	2d0c      	cmp	r5, #12
 8007a56:	bf38      	it	cc
 8007a58:	250c      	movcc	r5, #12
 8007a5a:	2d00      	cmp	r5, #0
 8007a5c:	4607      	mov	r7, r0
 8007a5e:	db01      	blt.n	8007a64 <_malloc_r+0x1c>
 8007a60:	42a9      	cmp	r1, r5
 8007a62:	d905      	bls.n	8007a70 <_malloc_r+0x28>
 8007a64:	230c      	movs	r3, #12
 8007a66:	603b      	str	r3, [r7, #0]
 8007a68:	2600      	movs	r6, #0
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b44 <_malloc_r+0xfc>
 8007a74:	f000 f9f8 	bl	8007e68 <__malloc_lock>
 8007a78:	f8d8 3000 	ldr.w	r3, [r8]
 8007a7c:	461c      	mov	r4, r3
 8007a7e:	bb5c      	cbnz	r4, 8007ad8 <_malloc_r+0x90>
 8007a80:	4629      	mov	r1, r5
 8007a82:	4638      	mov	r0, r7
 8007a84:	f7ff ffc0 	bl	8007a08 <sbrk_aligned>
 8007a88:	1c43      	adds	r3, r0, #1
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	d155      	bne.n	8007b3a <_malloc_r+0xf2>
 8007a8e:	f8d8 4000 	ldr.w	r4, [r8]
 8007a92:	4626      	mov	r6, r4
 8007a94:	2e00      	cmp	r6, #0
 8007a96:	d145      	bne.n	8007b24 <_malloc_r+0xdc>
 8007a98:	2c00      	cmp	r4, #0
 8007a9a:	d048      	beq.n	8007b2e <_malloc_r+0xe6>
 8007a9c:	6823      	ldr	r3, [r4, #0]
 8007a9e:	4631      	mov	r1, r6
 8007aa0:	4638      	mov	r0, r7
 8007aa2:	eb04 0903 	add.w	r9, r4, r3
 8007aa6:	f000 fa35 	bl	8007f14 <_sbrk_r>
 8007aaa:	4581      	cmp	r9, r0
 8007aac:	d13f      	bne.n	8007b2e <_malloc_r+0xe6>
 8007aae:	6821      	ldr	r1, [r4, #0]
 8007ab0:	1a6d      	subs	r5, r5, r1
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	4638      	mov	r0, r7
 8007ab6:	f7ff ffa7 	bl	8007a08 <sbrk_aligned>
 8007aba:	3001      	adds	r0, #1
 8007abc:	d037      	beq.n	8007b2e <_malloc_r+0xe6>
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	442b      	add	r3, r5
 8007ac2:	6023      	str	r3, [r4, #0]
 8007ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d038      	beq.n	8007b3e <_malloc_r+0xf6>
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	42a2      	cmp	r2, r4
 8007ad0:	d12b      	bne.n	8007b2a <_malloc_r+0xe2>
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	605a      	str	r2, [r3, #4]
 8007ad6:	e00f      	b.n	8007af8 <_malloc_r+0xb0>
 8007ad8:	6822      	ldr	r2, [r4, #0]
 8007ada:	1b52      	subs	r2, r2, r5
 8007adc:	d41f      	bmi.n	8007b1e <_malloc_r+0xd6>
 8007ade:	2a0b      	cmp	r2, #11
 8007ae0:	d917      	bls.n	8007b12 <_malloc_r+0xca>
 8007ae2:	1961      	adds	r1, r4, r5
 8007ae4:	42a3      	cmp	r3, r4
 8007ae6:	6025      	str	r5, [r4, #0]
 8007ae8:	bf18      	it	ne
 8007aea:	6059      	strne	r1, [r3, #4]
 8007aec:	6863      	ldr	r3, [r4, #4]
 8007aee:	bf08      	it	eq
 8007af0:	f8c8 1000 	streq.w	r1, [r8]
 8007af4:	5162      	str	r2, [r4, r5]
 8007af6:	604b      	str	r3, [r1, #4]
 8007af8:	4638      	mov	r0, r7
 8007afa:	f104 060b 	add.w	r6, r4, #11
 8007afe:	f000 f9b9 	bl	8007e74 <__malloc_unlock>
 8007b02:	f026 0607 	bic.w	r6, r6, #7
 8007b06:	1d23      	adds	r3, r4, #4
 8007b08:	1af2      	subs	r2, r6, r3
 8007b0a:	d0ae      	beq.n	8007a6a <_malloc_r+0x22>
 8007b0c:	1b9b      	subs	r3, r3, r6
 8007b0e:	50a3      	str	r3, [r4, r2]
 8007b10:	e7ab      	b.n	8007a6a <_malloc_r+0x22>
 8007b12:	42a3      	cmp	r3, r4
 8007b14:	6862      	ldr	r2, [r4, #4]
 8007b16:	d1dd      	bne.n	8007ad4 <_malloc_r+0x8c>
 8007b18:	f8c8 2000 	str.w	r2, [r8]
 8007b1c:	e7ec      	b.n	8007af8 <_malloc_r+0xb0>
 8007b1e:	4623      	mov	r3, r4
 8007b20:	6864      	ldr	r4, [r4, #4]
 8007b22:	e7ac      	b.n	8007a7e <_malloc_r+0x36>
 8007b24:	4634      	mov	r4, r6
 8007b26:	6876      	ldr	r6, [r6, #4]
 8007b28:	e7b4      	b.n	8007a94 <_malloc_r+0x4c>
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	e7cc      	b.n	8007ac8 <_malloc_r+0x80>
 8007b2e:	230c      	movs	r3, #12
 8007b30:	603b      	str	r3, [r7, #0]
 8007b32:	4638      	mov	r0, r7
 8007b34:	f000 f99e 	bl	8007e74 <__malloc_unlock>
 8007b38:	e797      	b.n	8007a6a <_malloc_r+0x22>
 8007b3a:	6025      	str	r5, [r4, #0]
 8007b3c:	e7dc      	b.n	8007af8 <_malloc_r+0xb0>
 8007b3e:	605b      	str	r3, [r3, #4]
 8007b40:	deff      	udf	#255	; 0xff
 8007b42:	bf00      	nop
 8007b44:	20000560 	.word	0x20000560

08007b48 <_printf_common>:
 8007b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b4c:	4616      	mov	r6, r2
 8007b4e:	4699      	mov	r9, r3
 8007b50:	688a      	ldr	r2, [r1, #8]
 8007b52:	690b      	ldr	r3, [r1, #16]
 8007b54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	bfb8      	it	lt
 8007b5c:	4613      	movlt	r3, r2
 8007b5e:	6033      	str	r3, [r6, #0]
 8007b60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b64:	4607      	mov	r7, r0
 8007b66:	460c      	mov	r4, r1
 8007b68:	b10a      	cbz	r2, 8007b6e <_printf_common+0x26>
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	6033      	str	r3, [r6, #0]
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	0699      	lsls	r1, r3, #26
 8007b72:	bf42      	ittt	mi
 8007b74:	6833      	ldrmi	r3, [r6, #0]
 8007b76:	3302      	addmi	r3, #2
 8007b78:	6033      	strmi	r3, [r6, #0]
 8007b7a:	6825      	ldr	r5, [r4, #0]
 8007b7c:	f015 0506 	ands.w	r5, r5, #6
 8007b80:	d106      	bne.n	8007b90 <_printf_common+0x48>
 8007b82:	f104 0a19 	add.w	sl, r4, #25
 8007b86:	68e3      	ldr	r3, [r4, #12]
 8007b88:	6832      	ldr	r2, [r6, #0]
 8007b8a:	1a9b      	subs	r3, r3, r2
 8007b8c:	42ab      	cmp	r3, r5
 8007b8e:	dc26      	bgt.n	8007bde <_printf_common+0x96>
 8007b90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b94:	1e13      	subs	r3, r2, #0
 8007b96:	6822      	ldr	r2, [r4, #0]
 8007b98:	bf18      	it	ne
 8007b9a:	2301      	movne	r3, #1
 8007b9c:	0692      	lsls	r2, r2, #26
 8007b9e:	d42b      	bmi.n	8007bf8 <_printf_common+0xb0>
 8007ba0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ba4:	4649      	mov	r1, r9
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	47c0      	blx	r8
 8007baa:	3001      	adds	r0, #1
 8007bac:	d01e      	beq.n	8007bec <_printf_common+0xa4>
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	6922      	ldr	r2, [r4, #16]
 8007bb2:	f003 0306 	and.w	r3, r3, #6
 8007bb6:	2b04      	cmp	r3, #4
 8007bb8:	bf02      	ittt	eq
 8007bba:	68e5      	ldreq	r5, [r4, #12]
 8007bbc:	6833      	ldreq	r3, [r6, #0]
 8007bbe:	1aed      	subeq	r5, r5, r3
 8007bc0:	68a3      	ldr	r3, [r4, #8]
 8007bc2:	bf0c      	ite	eq
 8007bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bc8:	2500      	movne	r5, #0
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	bfc4      	itt	gt
 8007bce:	1a9b      	subgt	r3, r3, r2
 8007bd0:	18ed      	addgt	r5, r5, r3
 8007bd2:	2600      	movs	r6, #0
 8007bd4:	341a      	adds	r4, #26
 8007bd6:	42b5      	cmp	r5, r6
 8007bd8:	d11a      	bne.n	8007c10 <_printf_common+0xc8>
 8007bda:	2000      	movs	r0, #0
 8007bdc:	e008      	b.n	8007bf0 <_printf_common+0xa8>
 8007bde:	2301      	movs	r3, #1
 8007be0:	4652      	mov	r2, sl
 8007be2:	4649      	mov	r1, r9
 8007be4:	4638      	mov	r0, r7
 8007be6:	47c0      	blx	r8
 8007be8:	3001      	adds	r0, #1
 8007bea:	d103      	bne.n	8007bf4 <_printf_common+0xac>
 8007bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf4:	3501      	adds	r5, #1
 8007bf6:	e7c6      	b.n	8007b86 <_printf_common+0x3e>
 8007bf8:	18e1      	adds	r1, r4, r3
 8007bfa:	1c5a      	adds	r2, r3, #1
 8007bfc:	2030      	movs	r0, #48	; 0x30
 8007bfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c02:	4422      	add	r2, r4
 8007c04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c0c:	3302      	adds	r3, #2
 8007c0e:	e7c7      	b.n	8007ba0 <_printf_common+0x58>
 8007c10:	2301      	movs	r3, #1
 8007c12:	4622      	mov	r2, r4
 8007c14:	4649      	mov	r1, r9
 8007c16:	4638      	mov	r0, r7
 8007c18:	47c0      	blx	r8
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	d0e6      	beq.n	8007bec <_printf_common+0xa4>
 8007c1e:	3601      	adds	r6, #1
 8007c20:	e7d9      	b.n	8007bd6 <_printf_common+0x8e>
	...

08007c24 <_printf_i>:
 8007c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c28:	7e0f      	ldrb	r7, [r1, #24]
 8007c2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c2c:	2f78      	cmp	r7, #120	; 0x78
 8007c2e:	4691      	mov	r9, r2
 8007c30:	4680      	mov	r8, r0
 8007c32:	460c      	mov	r4, r1
 8007c34:	469a      	mov	sl, r3
 8007c36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c3a:	d807      	bhi.n	8007c4c <_printf_i+0x28>
 8007c3c:	2f62      	cmp	r7, #98	; 0x62
 8007c3e:	d80a      	bhi.n	8007c56 <_printf_i+0x32>
 8007c40:	2f00      	cmp	r7, #0
 8007c42:	f000 80d4 	beq.w	8007dee <_printf_i+0x1ca>
 8007c46:	2f58      	cmp	r7, #88	; 0x58
 8007c48:	f000 80c0 	beq.w	8007dcc <_printf_i+0x1a8>
 8007c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c54:	e03a      	b.n	8007ccc <_printf_i+0xa8>
 8007c56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c5a:	2b15      	cmp	r3, #21
 8007c5c:	d8f6      	bhi.n	8007c4c <_printf_i+0x28>
 8007c5e:	a101      	add	r1, pc, #4	; (adr r1, 8007c64 <_printf_i+0x40>)
 8007c60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c64:	08007cbd 	.word	0x08007cbd
 8007c68:	08007cd1 	.word	0x08007cd1
 8007c6c:	08007c4d 	.word	0x08007c4d
 8007c70:	08007c4d 	.word	0x08007c4d
 8007c74:	08007c4d 	.word	0x08007c4d
 8007c78:	08007c4d 	.word	0x08007c4d
 8007c7c:	08007cd1 	.word	0x08007cd1
 8007c80:	08007c4d 	.word	0x08007c4d
 8007c84:	08007c4d 	.word	0x08007c4d
 8007c88:	08007c4d 	.word	0x08007c4d
 8007c8c:	08007c4d 	.word	0x08007c4d
 8007c90:	08007dd5 	.word	0x08007dd5
 8007c94:	08007cfd 	.word	0x08007cfd
 8007c98:	08007d8f 	.word	0x08007d8f
 8007c9c:	08007c4d 	.word	0x08007c4d
 8007ca0:	08007c4d 	.word	0x08007c4d
 8007ca4:	08007df7 	.word	0x08007df7
 8007ca8:	08007c4d 	.word	0x08007c4d
 8007cac:	08007cfd 	.word	0x08007cfd
 8007cb0:	08007c4d 	.word	0x08007c4d
 8007cb4:	08007c4d 	.word	0x08007c4d
 8007cb8:	08007d97 	.word	0x08007d97
 8007cbc:	682b      	ldr	r3, [r5, #0]
 8007cbe:	1d1a      	adds	r2, r3, #4
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	602a      	str	r2, [r5, #0]
 8007cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e09f      	b.n	8007e10 <_printf_i+0x1ec>
 8007cd0:	6820      	ldr	r0, [r4, #0]
 8007cd2:	682b      	ldr	r3, [r5, #0]
 8007cd4:	0607      	lsls	r7, r0, #24
 8007cd6:	f103 0104 	add.w	r1, r3, #4
 8007cda:	6029      	str	r1, [r5, #0]
 8007cdc:	d501      	bpl.n	8007ce2 <_printf_i+0xbe>
 8007cde:	681e      	ldr	r6, [r3, #0]
 8007ce0:	e003      	b.n	8007cea <_printf_i+0xc6>
 8007ce2:	0646      	lsls	r6, r0, #25
 8007ce4:	d5fb      	bpl.n	8007cde <_printf_i+0xba>
 8007ce6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007cea:	2e00      	cmp	r6, #0
 8007cec:	da03      	bge.n	8007cf6 <_printf_i+0xd2>
 8007cee:	232d      	movs	r3, #45	; 0x2d
 8007cf0:	4276      	negs	r6, r6
 8007cf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cf6:	485a      	ldr	r0, [pc, #360]	; (8007e60 <_printf_i+0x23c>)
 8007cf8:	230a      	movs	r3, #10
 8007cfa:	e012      	b.n	8007d22 <_printf_i+0xfe>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	6820      	ldr	r0, [r4, #0]
 8007d00:	1d19      	adds	r1, r3, #4
 8007d02:	6029      	str	r1, [r5, #0]
 8007d04:	0605      	lsls	r5, r0, #24
 8007d06:	d501      	bpl.n	8007d0c <_printf_i+0xe8>
 8007d08:	681e      	ldr	r6, [r3, #0]
 8007d0a:	e002      	b.n	8007d12 <_printf_i+0xee>
 8007d0c:	0641      	lsls	r1, r0, #25
 8007d0e:	d5fb      	bpl.n	8007d08 <_printf_i+0xe4>
 8007d10:	881e      	ldrh	r6, [r3, #0]
 8007d12:	4853      	ldr	r0, [pc, #332]	; (8007e60 <_printf_i+0x23c>)
 8007d14:	2f6f      	cmp	r7, #111	; 0x6f
 8007d16:	bf0c      	ite	eq
 8007d18:	2308      	moveq	r3, #8
 8007d1a:	230a      	movne	r3, #10
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d22:	6865      	ldr	r5, [r4, #4]
 8007d24:	60a5      	str	r5, [r4, #8]
 8007d26:	2d00      	cmp	r5, #0
 8007d28:	bfa2      	ittt	ge
 8007d2a:	6821      	ldrge	r1, [r4, #0]
 8007d2c:	f021 0104 	bicge.w	r1, r1, #4
 8007d30:	6021      	strge	r1, [r4, #0]
 8007d32:	b90e      	cbnz	r6, 8007d38 <_printf_i+0x114>
 8007d34:	2d00      	cmp	r5, #0
 8007d36:	d04b      	beq.n	8007dd0 <_printf_i+0x1ac>
 8007d38:	4615      	mov	r5, r2
 8007d3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d3e:	fb03 6711 	mls	r7, r3, r1, r6
 8007d42:	5dc7      	ldrb	r7, [r0, r7]
 8007d44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d48:	4637      	mov	r7, r6
 8007d4a:	42bb      	cmp	r3, r7
 8007d4c:	460e      	mov	r6, r1
 8007d4e:	d9f4      	bls.n	8007d3a <_printf_i+0x116>
 8007d50:	2b08      	cmp	r3, #8
 8007d52:	d10b      	bne.n	8007d6c <_printf_i+0x148>
 8007d54:	6823      	ldr	r3, [r4, #0]
 8007d56:	07de      	lsls	r6, r3, #31
 8007d58:	d508      	bpl.n	8007d6c <_printf_i+0x148>
 8007d5a:	6923      	ldr	r3, [r4, #16]
 8007d5c:	6861      	ldr	r1, [r4, #4]
 8007d5e:	4299      	cmp	r1, r3
 8007d60:	bfde      	ittt	le
 8007d62:	2330      	movle	r3, #48	; 0x30
 8007d64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d68:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007d6c:	1b52      	subs	r2, r2, r5
 8007d6e:	6122      	str	r2, [r4, #16]
 8007d70:	f8cd a000 	str.w	sl, [sp]
 8007d74:	464b      	mov	r3, r9
 8007d76:	aa03      	add	r2, sp, #12
 8007d78:	4621      	mov	r1, r4
 8007d7a:	4640      	mov	r0, r8
 8007d7c:	f7ff fee4 	bl	8007b48 <_printf_common>
 8007d80:	3001      	adds	r0, #1
 8007d82:	d14a      	bne.n	8007e1a <_printf_i+0x1f6>
 8007d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d88:	b004      	add	sp, #16
 8007d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d8e:	6823      	ldr	r3, [r4, #0]
 8007d90:	f043 0320 	orr.w	r3, r3, #32
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	4833      	ldr	r0, [pc, #204]	; (8007e64 <_printf_i+0x240>)
 8007d98:	2778      	movs	r7, #120	; 0x78
 8007d9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	6829      	ldr	r1, [r5, #0]
 8007da2:	061f      	lsls	r7, r3, #24
 8007da4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007da8:	d402      	bmi.n	8007db0 <_printf_i+0x18c>
 8007daa:	065f      	lsls	r7, r3, #25
 8007dac:	bf48      	it	mi
 8007dae:	b2b6      	uxthmi	r6, r6
 8007db0:	07df      	lsls	r7, r3, #31
 8007db2:	bf48      	it	mi
 8007db4:	f043 0320 	orrmi.w	r3, r3, #32
 8007db8:	6029      	str	r1, [r5, #0]
 8007dba:	bf48      	it	mi
 8007dbc:	6023      	strmi	r3, [r4, #0]
 8007dbe:	b91e      	cbnz	r6, 8007dc8 <_printf_i+0x1a4>
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	f023 0320 	bic.w	r3, r3, #32
 8007dc6:	6023      	str	r3, [r4, #0]
 8007dc8:	2310      	movs	r3, #16
 8007dca:	e7a7      	b.n	8007d1c <_printf_i+0xf8>
 8007dcc:	4824      	ldr	r0, [pc, #144]	; (8007e60 <_printf_i+0x23c>)
 8007dce:	e7e4      	b.n	8007d9a <_printf_i+0x176>
 8007dd0:	4615      	mov	r5, r2
 8007dd2:	e7bd      	b.n	8007d50 <_printf_i+0x12c>
 8007dd4:	682b      	ldr	r3, [r5, #0]
 8007dd6:	6826      	ldr	r6, [r4, #0]
 8007dd8:	6961      	ldr	r1, [r4, #20]
 8007dda:	1d18      	adds	r0, r3, #4
 8007ddc:	6028      	str	r0, [r5, #0]
 8007dde:	0635      	lsls	r5, r6, #24
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	d501      	bpl.n	8007de8 <_printf_i+0x1c4>
 8007de4:	6019      	str	r1, [r3, #0]
 8007de6:	e002      	b.n	8007dee <_printf_i+0x1ca>
 8007de8:	0670      	lsls	r0, r6, #25
 8007dea:	d5fb      	bpl.n	8007de4 <_printf_i+0x1c0>
 8007dec:	8019      	strh	r1, [r3, #0]
 8007dee:	2300      	movs	r3, #0
 8007df0:	6123      	str	r3, [r4, #16]
 8007df2:	4615      	mov	r5, r2
 8007df4:	e7bc      	b.n	8007d70 <_printf_i+0x14c>
 8007df6:	682b      	ldr	r3, [r5, #0]
 8007df8:	1d1a      	adds	r2, r3, #4
 8007dfa:	602a      	str	r2, [r5, #0]
 8007dfc:	681d      	ldr	r5, [r3, #0]
 8007dfe:	6862      	ldr	r2, [r4, #4]
 8007e00:	2100      	movs	r1, #0
 8007e02:	4628      	mov	r0, r5
 8007e04:	f7f8 f9bc 	bl	8000180 <memchr>
 8007e08:	b108      	cbz	r0, 8007e0e <_printf_i+0x1ea>
 8007e0a:	1b40      	subs	r0, r0, r5
 8007e0c:	6060      	str	r0, [r4, #4]
 8007e0e:	6863      	ldr	r3, [r4, #4]
 8007e10:	6123      	str	r3, [r4, #16]
 8007e12:	2300      	movs	r3, #0
 8007e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e18:	e7aa      	b.n	8007d70 <_printf_i+0x14c>
 8007e1a:	6923      	ldr	r3, [r4, #16]
 8007e1c:	462a      	mov	r2, r5
 8007e1e:	4649      	mov	r1, r9
 8007e20:	4640      	mov	r0, r8
 8007e22:	47d0      	blx	sl
 8007e24:	3001      	adds	r0, #1
 8007e26:	d0ad      	beq.n	8007d84 <_printf_i+0x160>
 8007e28:	6823      	ldr	r3, [r4, #0]
 8007e2a:	079b      	lsls	r3, r3, #30
 8007e2c:	d413      	bmi.n	8007e56 <_printf_i+0x232>
 8007e2e:	68e0      	ldr	r0, [r4, #12]
 8007e30:	9b03      	ldr	r3, [sp, #12]
 8007e32:	4298      	cmp	r0, r3
 8007e34:	bfb8      	it	lt
 8007e36:	4618      	movlt	r0, r3
 8007e38:	e7a6      	b.n	8007d88 <_printf_i+0x164>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	4632      	mov	r2, r6
 8007e3e:	4649      	mov	r1, r9
 8007e40:	4640      	mov	r0, r8
 8007e42:	47d0      	blx	sl
 8007e44:	3001      	adds	r0, #1
 8007e46:	d09d      	beq.n	8007d84 <_printf_i+0x160>
 8007e48:	3501      	adds	r5, #1
 8007e4a:	68e3      	ldr	r3, [r4, #12]
 8007e4c:	9903      	ldr	r1, [sp, #12]
 8007e4e:	1a5b      	subs	r3, r3, r1
 8007e50:	42ab      	cmp	r3, r5
 8007e52:	dcf2      	bgt.n	8007e3a <_printf_i+0x216>
 8007e54:	e7eb      	b.n	8007e2e <_printf_i+0x20a>
 8007e56:	2500      	movs	r5, #0
 8007e58:	f104 0619 	add.w	r6, r4, #25
 8007e5c:	e7f5      	b.n	8007e4a <_printf_i+0x226>
 8007e5e:	bf00      	nop
 8007e60:	0800846d 	.word	0x0800846d
 8007e64:	0800847e 	.word	0x0800847e

08007e68 <__malloc_lock>:
 8007e68:	4801      	ldr	r0, [pc, #4]	; (8007e70 <__malloc_lock+0x8>)
 8007e6a:	f7ff bc73 	b.w	8007754 <__retarget_lock_acquire_recursive>
 8007e6e:	bf00      	nop
 8007e70:	2000055c 	.word	0x2000055c

08007e74 <__malloc_unlock>:
 8007e74:	4801      	ldr	r0, [pc, #4]	; (8007e7c <__malloc_unlock+0x8>)
 8007e76:	f7ff bc6e 	b.w	8007756 <__retarget_lock_release_recursive>
 8007e7a:	bf00      	nop
 8007e7c:	2000055c 	.word	0x2000055c

08007e80 <_realloc_r>:
 8007e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e84:	4680      	mov	r8, r0
 8007e86:	4614      	mov	r4, r2
 8007e88:	460e      	mov	r6, r1
 8007e8a:	b921      	cbnz	r1, 8007e96 <_realloc_r+0x16>
 8007e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e90:	4611      	mov	r1, r2
 8007e92:	f7ff bdd9 	b.w	8007a48 <_malloc_r>
 8007e96:	b92a      	cbnz	r2, 8007ea4 <_realloc_r+0x24>
 8007e98:	f000 f85a 	bl	8007f50 <_free_r>
 8007e9c:	4625      	mov	r5, r4
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ea4:	f000 f89e 	bl	8007fe4 <_malloc_usable_size_r>
 8007ea8:	4284      	cmp	r4, r0
 8007eaa:	4607      	mov	r7, r0
 8007eac:	d802      	bhi.n	8007eb4 <_realloc_r+0x34>
 8007eae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007eb2:	d812      	bhi.n	8007eda <_realloc_r+0x5a>
 8007eb4:	4621      	mov	r1, r4
 8007eb6:	4640      	mov	r0, r8
 8007eb8:	f7ff fdc6 	bl	8007a48 <_malloc_r>
 8007ebc:	4605      	mov	r5, r0
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d0ed      	beq.n	8007e9e <_realloc_r+0x1e>
 8007ec2:	42bc      	cmp	r4, r7
 8007ec4:	4622      	mov	r2, r4
 8007ec6:	4631      	mov	r1, r6
 8007ec8:	bf28      	it	cs
 8007eca:	463a      	movcs	r2, r7
 8007ecc:	f000 f832 	bl	8007f34 <memcpy>
 8007ed0:	4631      	mov	r1, r6
 8007ed2:	4640      	mov	r0, r8
 8007ed4:	f000 f83c 	bl	8007f50 <_free_r>
 8007ed8:	e7e1      	b.n	8007e9e <_realloc_r+0x1e>
 8007eda:	4635      	mov	r5, r6
 8007edc:	e7df      	b.n	8007e9e <_realloc_r+0x1e>

08007ede <memmove>:
 8007ede:	4288      	cmp	r0, r1
 8007ee0:	b510      	push	{r4, lr}
 8007ee2:	eb01 0402 	add.w	r4, r1, r2
 8007ee6:	d902      	bls.n	8007eee <memmove+0x10>
 8007ee8:	4284      	cmp	r4, r0
 8007eea:	4623      	mov	r3, r4
 8007eec:	d807      	bhi.n	8007efe <memmove+0x20>
 8007eee:	1e43      	subs	r3, r0, #1
 8007ef0:	42a1      	cmp	r1, r4
 8007ef2:	d008      	beq.n	8007f06 <memmove+0x28>
 8007ef4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ef8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007efc:	e7f8      	b.n	8007ef0 <memmove+0x12>
 8007efe:	4402      	add	r2, r0
 8007f00:	4601      	mov	r1, r0
 8007f02:	428a      	cmp	r2, r1
 8007f04:	d100      	bne.n	8007f08 <memmove+0x2a>
 8007f06:	bd10      	pop	{r4, pc}
 8007f08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f0c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f10:	e7f7      	b.n	8007f02 <memmove+0x24>
	...

08007f14 <_sbrk_r>:
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4d06      	ldr	r5, [pc, #24]	; (8007f30 <_sbrk_r+0x1c>)
 8007f18:	2300      	movs	r3, #0
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	602b      	str	r3, [r5, #0]
 8007f20:	f7f9 fed8 	bl	8001cd4 <_sbrk>
 8007f24:	1c43      	adds	r3, r0, #1
 8007f26:	d102      	bne.n	8007f2e <_sbrk_r+0x1a>
 8007f28:	682b      	ldr	r3, [r5, #0]
 8007f2a:	b103      	cbz	r3, 8007f2e <_sbrk_r+0x1a>
 8007f2c:	6023      	str	r3, [r4, #0]
 8007f2e:	bd38      	pop	{r3, r4, r5, pc}
 8007f30:	20000568 	.word	0x20000568

08007f34 <memcpy>:
 8007f34:	440a      	add	r2, r1
 8007f36:	4291      	cmp	r1, r2
 8007f38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007f3c:	d100      	bne.n	8007f40 <memcpy+0xc>
 8007f3e:	4770      	bx	lr
 8007f40:	b510      	push	{r4, lr}
 8007f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f4a:	4291      	cmp	r1, r2
 8007f4c:	d1f9      	bne.n	8007f42 <memcpy+0xe>
 8007f4e:	bd10      	pop	{r4, pc}

08007f50 <_free_r>:
 8007f50:	b538      	push	{r3, r4, r5, lr}
 8007f52:	4605      	mov	r5, r0
 8007f54:	2900      	cmp	r1, #0
 8007f56:	d041      	beq.n	8007fdc <_free_r+0x8c>
 8007f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f5c:	1f0c      	subs	r4, r1, #4
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	bfb8      	it	lt
 8007f62:	18e4      	addlt	r4, r4, r3
 8007f64:	f7ff ff80 	bl	8007e68 <__malloc_lock>
 8007f68:	4a1d      	ldr	r2, [pc, #116]	; (8007fe0 <_free_r+0x90>)
 8007f6a:	6813      	ldr	r3, [r2, #0]
 8007f6c:	b933      	cbnz	r3, 8007f7c <_free_r+0x2c>
 8007f6e:	6063      	str	r3, [r4, #4]
 8007f70:	6014      	str	r4, [r2, #0]
 8007f72:	4628      	mov	r0, r5
 8007f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f78:	f7ff bf7c 	b.w	8007e74 <__malloc_unlock>
 8007f7c:	42a3      	cmp	r3, r4
 8007f7e:	d908      	bls.n	8007f92 <_free_r+0x42>
 8007f80:	6820      	ldr	r0, [r4, #0]
 8007f82:	1821      	adds	r1, r4, r0
 8007f84:	428b      	cmp	r3, r1
 8007f86:	bf01      	itttt	eq
 8007f88:	6819      	ldreq	r1, [r3, #0]
 8007f8a:	685b      	ldreq	r3, [r3, #4]
 8007f8c:	1809      	addeq	r1, r1, r0
 8007f8e:	6021      	streq	r1, [r4, #0]
 8007f90:	e7ed      	b.n	8007f6e <_free_r+0x1e>
 8007f92:	461a      	mov	r2, r3
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	b10b      	cbz	r3, 8007f9c <_free_r+0x4c>
 8007f98:	42a3      	cmp	r3, r4
 8007f9a:	d9fa      	bls.n	8007f92 <_free_r+0x42>
 8007f9c:	6811      	ldr	r1, [r2, #0]
 8007f9e:	1850      	adds	r0, r2, r1
 8007fa0:	42a0      	cmp	r0, r4
 8007fa2:	d10b      	bne.n	8007fbc <_free_r+0x6c>
 8007fa4:	6820      	ldr	r0, [r4, #0]
 8007fa6:	4401      	add	r1, r0
 8007fa8:	1850      	adds	r0, r2, r1
 8007faa:	4283      	cmp	r3, r0
 8007fac:	6011      	str	r1, [r2, #0]
 8007fae:	d1e0      	bne.n	8007f72 <_free_r+0x22>
 8007fb0:	6818      	ldr	r0, [r3, #0]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	6053      	str	r3, [r2, #4]
 8007fb6:	4408      	add	r0, r1
 8007fb8:	6010      	str	r0, [r2, #0]
 8007fba:	e7da      	b.n	8007f72 <_free_r+0x22>
 8007fbc:	d902      	bls.n	8007fc4 <_free_r+0x74>
 8007fbe:	230c      	movs	r3, #12
 8007fc0:	602b      	str	r3, [r5, #0]
 8007fc2:	e7d6      	b.n	8007f72 <_free_r+0x22>
 8007fc4:	6820      	ldr	r0, [r4, #0]
 8007fc6:	1821      	adds	r1, r4, r0
 8007fc8:	428b      	cmp	r3, r1
 8007fca:	bf04      	itt	eq
 8007fcc:	6819      	ldreq	r1, [r3, #0]
 8007fce:	685b      	ldreq	r3, [r3, #4]
 8007fd0:	6063      	str	r3, [r4, #4]
 8007fd2:	bf04      	itt	eq
 8007fd4:	1809      	addeq	r1, r1, r0
 8007fd6:	6021      	streq	r1, [r4, #0]
 8007fd8:	6054      	str	r4, [r2, #4]
 8007fda:	e7ca      	b.n	8007f72 <_free_r+0x22>
 8007fdc:	bd38      	pop	{r3, r4, r5, pc}
 8007fde:	bf00      	nop
 8007fe0:	20000560 	.word	0x20000560

08007fe4 <_malloc_usable_size_r>:
 8007fe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fe8:	1f18      	subs	r0, r3, #4
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	bfbc      	itt	lt
 8007fee:	580b      	ldrlt	r3, [r1, r0]
 8007ff0:	18c0      	addlt	r0, r0, r3
 8007ff2:	4770      	bx	lr

08007ff4 <_init>:
 8007ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff6:	bf00      	nop
 8007ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffa:	bc08      	pop	{r3}
 8007ffc:	469e      	mov	lr, r3
 8007ffe:	4770      	bx	lr

08008000 <_fini>:
 8008000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008002:	bf00      	nop
 8008004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008006:	bc08      	pop	{r3}
 8008008:	469e      	mov	lr, r3
 800800a:	4770      	bx	lr
